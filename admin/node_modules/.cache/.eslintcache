[{"/Users/tony/Documents/Projects/react/Writer/admin/src/index.js":"1","/Users/tony/Documents/Projects/react/Writer/admin/src/store.js":"2","/Users/tony/Documents/Projects/react/Writer/admin/src/serviceWorker.js":"3","/Users/tony/Documents/Projects/react/Writer/admin/src/App.js":"4","/Users/tony/Documents/Projects/react/Writer/admin/src/polyfill.js":"5","/Users/tony/Documents/Projects/react/Writer/admin/src/assets/icons/index.js":"6","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheLayout.js":"7","/Users/tony/Documents/Projects/react/Writer/admin/src/assets/icons/logo-negative.js":"8","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/index.js":"9","/Users/tony/Documents/Projects/react/Writer/admin/src/assets/icons/sygnet.js":"10","/Users/tony/Documents/Projects/react/Writer/admin/src/assets/icons/logo.js":"11","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheSidebar.js":"12","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeaderDropdownNotif.js":"13","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeaderDropdownTasks.js":"14","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeaderDropdownMssg.js":"15","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeaderDropdown.js":"16","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeader.js":"17","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheFooter.js":"18","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheContent.js":"19","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/_nav.js":"20","/Users/tony/Documents/Projects/react/Writer/admin/src/routes.js":"21","/Users/tony/Documents/Projects/react/Writer/admin/src/views/modal/Modal.js":"22","/Users/tony/Documents/Projects/react/Writer/admin/src/views/supportCenter/support.js":"23","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/seatings.js":"24","/Users/tony/Documents/Projects/react/Writer/admin/src/views/dashboard/Dashboard.js":"25","/Users/tony/Documents/Projects/react/Writer/admin/src/views/charts/Charts.js":"26","/Users/tony/Documents/Projects/react/Writer/admin/src/views/icons/coreui-icons/CoreUIIcons.js":"27","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/mangement.js":"28","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/post/postTask.js":"29","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/assign/assign.js":"30","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/pending/pendingPayments.js":"31","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/writers.js":"32","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/history/history.js":"33","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/Paid/paid.js":"34","/Users/tony/Documents/Projects/react/Writer/admin/src/views/widgets/WidgetsDropdown.js":"35","/Users/tony/Documents/Projects/react/Writer/admin/src/views/table/TableCard.js":"36","/Users/tony/Documents/Projects/react/Writer/admin/src/views/ChatBox/ChatBox.js":"37","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/admins.js":"38","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/accountSeating.js":"39","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/adminProfile.js":"40","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/editCategory.js":"41","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/TaskDetails/SingleTaskDetails.js":"42","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/newWriter.js":"43","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Invoice/Invoice.js":"44","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/profile/profile.js":"45","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/submited/submited.js":"46","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/Redones/redones.js":"47","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/post/dropzone/Dropzone.js":"48","/Users/tony/Documents/Projects/react/Writer/admin/src/reusable/index.js":"49","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/CreateAdmins.js":"50","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/dynamicForm.js":"51","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/registeredAdmins/registeredAdminsProfile.js":"52","/Users/tony/Documents/Projects/react/Writer/admin/src/reusable/DocsLink.js":"53","/Users/tony/Documents/Projects/react/Writer/admin/src/views/charts/ChartBarSimple.js":"54","/Users/tony/Documents/Projects/react/Writer/admin/src/views/charts/ChartLineSimple.js":"55","/Users/tony/Documents/Projects/react/Writer/admin/src/views/dashboard/moreButton.js":"56","/Users/tony/Documents/Projects/react/Writer/admin/src/views/icons/brands/Brands.js":"57","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/in-progress/progress.js":"58","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/completed/completed.js":"59","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/cancelled/cancelled.js":"60","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/assigned/assigned.js":"61","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/assigned/re-assign/reasign.js":"62","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/assign/Asigne/Asign.js":"63","/Users/tony/Documents/Projects/react/Writer/admin/src/views/pages/login/Login.js":"64","/Users/tony/Documents/Projects/react/Writer/admin/src/views/pages/activate/activate.js":"65","/Users/tony/Documents/Projects/react/Writer/admin/src/views/pages/activate/forgot.js":"66","/Users/tony/Documents/Projects/react/Writer/admin/src/Api/authThenticateToken.js":"67","/Users/tony/Documents/Projects/react/Writer/admin/src/Api/config.js":"68","/Users/tony/Documents/Projects/react/Writer/admin/src/Api/auth/auth.js":"69","/Users/tony/Documents/Projects/react/Writer/admin/src/Api/Data/requestApi.js":"70","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/formValidate.js":"71","/Users/tony/Documents/Projects/react/Writer/admin/src/idleTimeDetection.js":"72","/Users/tony/Documents/Projects/react/Writer/admin/src/sound.js":"73","/Users/tony/Documents/Projects/react/Writer/admin/src/Api/urls.js":"74","/Users/tony/Documents/Projects/react/Writer/admin/src/Api/auth/UrlParams.js":"75"},{"size":735,"mtime":1629834944000,"results":"76","hashOfConfig":"77"},{"size":324,"mtime":1629834944000,"results":"78","hashOfConfig":"77"},{"size":4686,"mtime":1629834944000,"results":"79","hashOfConfig":"77"},{"size":4423,"mtime":1637625231563,"results":"80","hashOfConfig":"77"},{"size":1895,"mtime":1629834944000,"results":"81","hashOfConfig":"77"},{"size":3813,"mtime":1629834944000,"results":"82","hashOfConfig":"77"},{"size":1181,"mtime":1637589248386,"results":"83","hashOfConfig":"77"},{"size":6933,"mtime":1629834944000,"results":"84","hashOfConfig":"77"},{"size":596,"mtime":1629834944000,"results":"85","hashOfConfig":"77"},{"size":978,"mtime":1629834944000,"results":"86","hashOfConfig":"77"},{"size":6920,"mtime":1629834944000,"results":"87","hashOfConfig":"77"},{"size":1411,"mtime":1635454849506,"results":"88","hashOfConfig":"77"},{"size":1453,"mtime":1637401563382,"results":"89","hashOfConfig":"77"},{"size":1982,"mtime":1634681347448,"results":"90","hashOfConfig":"77"},{"size":3609,"mtime":1637617899639,"results":"91","hashOfConfig":"77"},{"size":1332,"mtime":1637995009415,"results":"92","hashOfConfig":"77"},{"size":3094,"mtime":1638052202750,"results":"93","hashOfConfig":"77"},{"size":521,"mtime":1634898396787,"results":"94","hashOfConfig":"77"},{"size":2375,"mtime":1637955746488,"results":"95","hashOfConfig":"77"},{"size":2278,"mtime":1635031394468,"results":"96","hashOfConfig":"77"},{"size":2366,"mtime":1637319662668,"results":"97","hashOfConfig":"77"},{"size":758,"mtime":1636800188660,"results":"98","hashOfConfig":"77"},{"size":2632,"mtime":1637621394668,"results":"99","hashOfConfig":"77"},{"size":1052,"mtime":1634719714643,"results":"100","hashOfConfig":"77"},{"size":2398,"mtime":1637624632887,"results":"101","hashOfConfig":"77"},{"size":5779,"mtime":1629834944000,"results":"102","hashOfConfig":"77"},{"size":606,"mtime":1629834944000,"results":"103","hashOfConfig":"77"},{"size":2081,"mtime":1637622682654,"results":"104","hashOfConfig":"77"},{"size":12500,"mtime":1637990903050,"results":"105","hashOfConfig":"77"},{"size":5129,"mtime":1637327590328,"results":"106","hashOfConfig":"77"},{"size":6089,"mtime":1636674620193,"results":"107","hashOfConfig":"77"},{"size":11376,"mtime":1637963460053,"results":"108","hashOfConfig":"77"},{"size":2903,"mtime":1637157392069,"results":"109","hashOfConfig":"77"},{"size":87,"mtime":1634552914710,"results":"110","hashOfConfig":"77"},{"size":4659,"mtime":1637161290498,"results":"111","hashOfConfig":"77"},{"size":1578,"mtime":1637977429058,"results":"112","hashOfConfig":"77"},{"size":7157,"mtime":1637612482106,"results":"113","hashOfConfig":"77"},{"size":9099,"mtime":1636844627638,"results":"114","hashOfConfig":"77"},{"size":4918,"mtime":1637963279534,"results":"115","hashOfConfig":"77"},{"size":8957,"mtime":1637962801933,"results":"116","hashOfConfig":"77"},{"size":386,"mtime":1634596223774,"results":"117","hashOfConfig":"77"},{"size":11620,"mtime":1637963618868,"results":"118","hashOfConfig":"77"},{"size":12736,"mtime":1635811123829,"results":"119","hashOfConfig":"77"},{"size":5737,"mtime":1636715916540,"results":"120","hashOfConfig":"77"},{"size":14059,"mtime":1637963485125,"results":"121","hashOfConfig":"77"},{"size":8465,"mtime":1637677064934,"results":"122","hashOfConfig":"77"},{"size":3873,"mtime":1637622820519,"results":"123","hashOfConfig":"77"},{"size":8456,"mtime":1637959875875,"results":"124","hashOfConfig":"77"},{"size":56,"mtime":1629834944000,"results":"125","hashOfConfig":"77"},{"size":12523,"mtime":1636805616032,"results":"126","hashOfConfig":"77"},{"size":2506,"mtime":1634718661868,"results":"127","hashOfConfig":"77"},{"size":8814,"mtime":1636846711195,"results":"128","hashOfConfig":"77"},{"size":581,"mtime":1629834944000,"results":"129","hashOfConfig":"77"},{"size":1545,"mtime":1629834944000,"results":"130","hashOfConfig":"77"},{"size":3294,"mtime":1629834944000,"results":"131","hashOfConfig":"77"},{"size":1471,"mtime":1634552181166,"results":"132","hashOfConfig":"77"},{"size":963,"mtime":1629834944000,"results":"133","hashOfConfig":"77"},{"size":4483,"mtime":1637963565973,"results":"134","hashOfConfig":"77"},{"size":3053,"mtime":1636462108063,"results":"135","hashOfConfig":"77"},{"size":5250,"mtime":1636421042138,"results":"136","hashOfConfig":"77"},{"size":5603,"mtime":1637963537348,"results":"137","hashOfConfig":"77"},{"size":10408,"mtime":1637020015647,"results":"138","hashOfConfig":"77"},{"size":1616,"mtime":1637327593606,"results":"139","hashOfConfig":"77"},{"size":2565,"mtime":1636716954168,"results":"140","hashOfConfig":"77"},{"size":3068,"mtime":1637635522212,"results":"141","hashOfConfig":"77"},{"size":3103,"mtime":1637635961949,"results":"142","hashOfConfig":"77"},{"size":3520,"mtime":1637799874347,"results":"143","hashOfConfig":"77"},{"size":392,"mtime":1637402781468,"results":"144","hashOfConfig":"77"},{"size":2441,"mtime":1636718765197,"results":"145","hashOfConfig":"77"},{"size":33221,"mtime":1637994462226,"results":"146","hashOfConfig":"77"},{"size":2827,"mtime":1637984876889,"results":"147","hashOfConfig":"77"},{"size":538,"mtime":1635695135326,"results":"148","hashOfConfig":"77"},{"size":921,"mtime":1637368089987,"results":"149","hashOfConfig":"150"},{"size":807,"mtime":1638051017268,"results":"151","hashOfConfig":"77"},{"size":487,"mtime":1637635511252,"results":"152","hashOfConfig":"77"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"305hv4",{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":100,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"129kzy4",{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347"},"/Users/tony/Documents/Projects/react/Writer/admin/src/index.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/store.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/serviceWorker.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/App.js",["348","349","350","351"],"import React, { Component } from 'react';\nimport { HashRouter, Route, Switch ,useHistory} from 'react-router-dom';\nimport {  requestRefreshToken, veryAccessTokens} from './Api/authThenticateToken';\nimport io from 'socket.io-client';\nimport './scss/style.scss';\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers\nconst TheLayout = React.lazy(() => import('./containers/TheLayout'));\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'));\nconst Activate = React.lazy(()=>import('./views/pages/activate/activate'));\nconst Forgot = React.lazy(()=>import('./views/pages/activate/forgot'));\n//let socket = io('http://localhost:4000', {transports: ['websocket']});\nfunction NotFound(){\n  let history = useHistory();\n  return <div style={{margin:\"300px auto\"}} className=\"page-wrap d-flex flex-row align-items-center\">\n  <div className=\"container\">\n      <div className=\"row justify-content-center\">\n          <div className=\"col-md-12 text-center\">\n              <span className=\"display-1 d-block\">404</span>\n              <div className=\"mb-4 lead\">The page you are looking for was not found.</div>\n              \n              <button className=\"btn btn-simple\" onClick={() => history.goBack()}>Go Back</button>\n          </div>\n      </div>\n  </div>\n</div>\n}\n\nclass App extends Component {\n\n\n  constructor(props){\n    super(props);\n    this.state={\n         username:\"\",\n         profile:\"\",\n         home:false,\n         email:'',\n        ENDPOINT:'localhost:4000',\n         \n    }\n\n\n  }\n  \n\n  handleProfile=(data)=>{\n    \n    const {username,profile,email} = data;\n  \n    this.setState({username:username,profile:profile,home:true,email:email});\n   \n }\n\n route =async ()=>{\n   \n  //this.state.home == true?\"\":window.location.href=\"/#/auth\";\n    var tr= localStorage.getItem('tr');\n    var ta = localStorage.getItem('ta');\n     \n      const check = await veryAccessTokens(ta,this.handleProfile);//authenTicateWebRefresh(ta,tr,this.handleProfile);\n      \n       \n      \n      if(check == true){\n          this.setState({home:true})\n      }else if( check == false){\n        const checkRefresh = await requestRefreshToken(tr,this.handleProfile);\n        if(checkRefresh == true){\n          this.setState({home:true});\n        }\n      }\n  if(!this.state.home){\n      window.location.href=\"/#/login\"\n  }\n }\n/*\n componentDidMount=()=>{\n  socket = io.connect(this.state.ENDPOINT);\n\n  \n  \n  \n \n  return () =>{\n  socket.emit('disconnect');\n  socket.off();\n  }\n }\n*/\n \n  componentDidMount=()=>{\n    const url = window.location.href.split('/#/')[1];\n\n    if(url === \"auth/activate\"){}\n    else{\n      \n     if(url.split('?')[0] === \"auth/activate\"){\n      console.log(url);\n     }else{\n       \n       this.route();\n     }\n    }\n\n   \n\n  }\n\n  render() {\n  \n    return (\n      <HashRouter>\n          <React.Suspense fallback={loading}>\n            <Switch>\n             {/* <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login {...props}/>} />\n              <Route exact path=\"/register\" name=\"Register Page\" render={props => <Register {...props}/>} />\n              <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />\n              <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />\n            */}\n            {!this.state.home && <Route exact path=\"/\" name=\"Login Page\" render={props => <Login Profile={this.handleProfile} {...props}/>} />}\n            {!this.state.home && <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login Profile={this.handleProfile} {...props}/>} />}\n           {!this.state.home && <Route exact path=\"/auth/ForgotPassWord\" name=\"Forgot\" render={props => <Forgot {...props}/>} />}\n           {!this.state.home &&<Route exact path=\"/auth/activate\" name=\"Login Page\" render={props => <Activate {...props}/>} />}\n           {this.state.home && <Route path=\"/\" name=\"Home\" render={props => <TheLayout Uname={this.state.username} email={this.state.email} Pfile={this.state.profile} {...props}/>} />}\n           {/*this.state.home && <Route path=\"/dashboard\" name=\"Dashboard\" render={props=><TheLayout Uname={this.state.username} Pfile={this.state.profile}/>}/>*/}\n           <Route component={NotFound} />\n            </Switch>\n          </React.Suspense>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","/Users/tony/Documents/Projects/react/Writer/admin/src/polyfill.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/assets/icons/index.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheLayout.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/assets/icons/logo-negative.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/containers/index.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/assets/icons/sygnet.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/assets/icons/logo.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheSidebar.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeaderDropdownNotif.js",["352"],"import React from 'react'\nimport {\n  CBadge,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CProgress\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport ApiRequest from 'src/Api/Data/requestApi'\n\nconst TheHeaderDropdownNotif = ({notificationCount,Messages=[]}) => {\n  \n     const clearReadNotification =()=>{\n        setTimeout(() => {\n          Messages.forEach(async (element) => {\n            await ApiRequest.clearReadNotification(element.id);\n          });\n        }, 4000);\n         \n     }\n\n  const itemsCount = notificationCount;\n  return (\n    <CDropdown\n      inNav\n      className=\"c-header-nav-item mx-2\"\n    >\n      <CDropdownToggle onClick={()=>clearReadNotification()} className=\"c-header-nav-link\" caret={false}>\n        <CIcon name=\"cil-bell\"/>\n        <CBadge shape=\"pill\" color=\"danger\">{itemsCount}</CBadge>\n      </CDropdownToggle>\n      <CDropdownMenu  placement=\"bottom-end\" className=\"pt-0\">\n        <CDropdownItem\n          header\n          tag=\"div\"\n          className=\"text-center\"\n          color=\"light\"\n        >\n          <strong>You have {itemsCount} notifications</strong>\n        </CDropdownItem>\n          {Messages.map((item)=>{\n             return <CDropdownItem ><CIcon name=\"cil-user-follow\" className=\"mr-2 text-success\" /> {item.text}</CDropdownItem>\n              \n          })}\n      \n      </CDropdownMenu>\n    </CDropdown>\n  )\n}\n\nexport default TheHeaderDropdownNotif","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeaderDropdownTasks.js",["353","354","355","356"],"import React, { useState } from 'react'\nimport {\n  CBadge,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CProgress\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport ModalCard from 'src/views/modal/Modal'\nimport Loader from 'react-loader-spinner'\n\n\nconst TheHeaderDropdownTasks = () => {\n      const [show,SetShow] = useState(false);\n      const [isShowLoader,setIshowLoader]= useState(false);\n\n      const Open=()=>{\n         SetShow(true);\n      }\n      const close=()=>{\n        SetShow(false);\n      }\n\n      const Content=()=>{\n        return <>\n               <form class=\"row g-3\">\n               <div style={{\n                  display:\"block\",\n                  cursor:\"pointer\",\n                   zIndex:99,\n                  position:\"absolute\",\n                  top:\"40%\",\n                  left:'40%',\n                  right:\"40%\",\n                  \n             }}>\n               \n                 \n                {isShowLoader &&  <Loader\n                   type=\"Circles\"\n                   color=\"#00BFFF\"\n                    height={100}\n                    width={100}\n      \n                  />}\n               \n             </div>\n  <div class=\"col-md-12\">\n    <label for=\"inputEmail4\" class=\"form-label\">Payment Name</label>\n    <input type=\"text\" class=\"form-control\" id=\"inputEmail4\"/>\n  </div>\n  </form>\n              </>\n      }\n      const Save=()=>{\n         setIshowLoader(true);\n         \n      }\n  return (\n    <>\n    <CDropdown\n      inNav\n      className=\"c-header-nav-item mx-2\"\n     \n    >\n      <CDropdownToggle onClick={()=>Open()} className=\"c-header-nav-link\" caret={false}>\n        <CIcon name=\"cil-list\" />\n        \n      </CDropdownToggle>\n   \n    </CDropdown>\n    <ModalCard \n     Close={close}\n     Save={Save}\n     ButtonName={\"Add Payment Method\"}\n     Show={show}\n     isShowLoader={isShowLoader}\n     content={<Content/>}\n    />\n    \n    </>\n  )\n}\n\nexport default TheHeaderDropdownTasks","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeaderDropdownMssg.js",["357","358","359"],"import React, { useEffect, useState } from 'react'\nimport {\n  CBadge,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CImg\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport ChatBox from 'src/views/ChatBox/ChatBox';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst TheHeaderDropdownMssg = ({socket,state}) => {\n  const notify = (data) => toast(data);\n  \n  const [open,setOpen]=useState(false);\n  const [email,setEmail] = useState('');\n  const [taskid,setTaskid] =useState('');\n\n  const [newMessage,setNewMessage] = useState([]);\n  const [itemsCount,setItemCount] = useState(0);\n  const Open=(mail,taskid)=>{\n    setTaskid(taskid);\n    setEmail(mail);\n    setOpen(!open);\n\n    var lists = newMessage.filter(x => {\n      return x.task_id != taskid;\n    })\n\n   // console.log(lists)\n    setNewMessage(lists);\n\n    setTimeout(() => {\n     // Count()\n     var legth = lists.length;\n\n     setItemCount(legth);\n   }, 1200);\n   }\n   \nconst Alert = (message)=>setTimeout(() => {\n  notify('you have a new message from '+message.username+\"...\"+message.message.substring(0, 100));\n\n  \n}, 3000);\n\nconst Count = ()=>{\n    var legth = newMessage.length;\n\n  setItemCount(legth +1);\n}\n\n   if(state){\n    socket.on('newMessage',(message)=>{\n      //console.log(message);\n          //clearTimeout(Alert);\n          //Alert(message)\n\n          const found = newMessage.some(item=>item.task_id === message.task_id);\n          if(!found){\n            setNewMessage((newMessage)=>[...newMessage,message]);\n          }\n          setTimeout(() => {\n             Count()\n          }, 1200);\n\n         \n      \n    },[]);\n   }\n  \n   \n  \n  return (<>\n    <CDropdown\n      inNav\n      className=\"c-header-nav-item mx-2\"\n      direction=\"down\"\n    >\n      <CDropdownToggle className=\"c-header-nav-link\" caret={false}>\n        <CIcon name=\"cil-envelope-open\" /><CBadge shape=\"pill\" color=\"info\">{itemsCount}</CBadge>\n      </CDropdownToggle>\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n        <CDropdownItem\n          header\n          tag=\"div\"\n          color=\"light\"\n        >\n          <strong>You have {itemsCount} messages</strong>\n        </CDropdownItem>\n       \n       {newMessage.map((item)=>{\n         return <>\n                   <CDropdownItem onClick={()=>Open(item.sender_id,item.task_id)} href=\"#\">\n          <div className=\"message\">\n            <div className=\"pt-3 mr-3 float-left\">\n              <div className=\"c-avatar\">\n                <CImg\n                 style={{width:\"40px\",height:\"40px\",borderRadius:\"20px\"}}\n                  src={item.Imageurl}\n                  className=\"c-avatar-img\"\n                  alt=\"admin@bootstrapmaster.com\"\n                />\n                <span className=\"c-avatar-status bg-warning\"></span>\n              </div>\n            </div>\n            <div>\n              <small className=\"text-muted\">{item.username}</small>\n              <small className=\"text-muted float-right mt-1\">5 minutes ago</small>\n            </div>\n            <div className=\"text-truncate font-weight-bold\"></div>\n            <br/>\n            <div className=\"small text-muted text-truncate\">\n              <p>{item.message}</p>\n            </div>\n            <br/>\n          </div>\n        </CDropdownItem>\n                </>\n       })}\n\n        \n      </CDropdownMenu>\n    </CDropdown>\n    {open && <ChatBox\n    open={open}\n    SetOpen={Open}\n    email={email}\n    socket={socket}\n    taskid={taskid}\n   />}\n   <ToastContainer />\n   </>\n  )\n}\n\nexport default TheHeaderDropdownMssg","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeaderDropdown.js",["360"],"import React from 'react'\nimport {\n  CBadge,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CImg\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { Logout } from 'src/Api/auth/auth'\n\nconst TheHeaderDropdown = ({profile}) => {\n  return (\n    <CDropdown\n      inNav\n      className=\"c-header-nav-items mx-2\"\n      direction=\"down\"\n    >\n      <CDropdownToggle className=\"c-header-nav-link\" caret={false}>\n        <div className=\"c-avatar\">\n          <CImg\n            src={profile}\n            className=\"c-avatar-img\"\n            alt=\"admin@bootstrapmaster.com\"\n          />\n        </div>\n      </CDropdownToggle>\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n       \n        <CDropdownItem\n          header\n          tag=\"div\"\n          color=\"light\"\n          className=\"text-center\"\n        >\n          <strong>Settings</strong>\n        </CDropdownItem>\n        <CDropdownItem href={\"#/seatings/profile\"}>\n          <CIcon name=\"cil-user\" className=\"mfe-2\" />Profile\n        </CDropdownItem>\n       \n      \n        <CDropdownItem divider />\n        <CDropdownItem onClick={()=>Logout()}>\n          <CIcon name=\"cil-lock-locked\" className=\"mfe-2\" />\n          LogOut\n        </CDropdownItem>\n      </CDropdownMenu>\n    </CDropdown>\n  )\n}\n\nexport default TheHeaderDropdown\n","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheHeader.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheFooter.js",["361","362"],"import React from 'react'\nimport { CFooter } from '@coreui/react'\n\nconst TheFooter = () => {\n  return (\n    <CFooter fixed={false}>\n      <div>\n        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">softonica</a>\n        <span className=\"ml-1\">&copy; 2020 Writer.</span>\n      </div>\n      <div className=\"mfs-auto\">\n        <span className=\"mr-1\">Powered by</span>\n        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">softonica</a>\n      </div>\n    </CFooter>\n  )\n}\n\nexport default React.memo(TheFooter)\n","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/TheContent.js",["363","364"],"import React, { Suspense, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport {\n  Redirect,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport { CContainer, CFade } from '@coreui/react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// routes config\nimport routes from '../routes'\nimport Urls from 'src/Api/urls';\n\n//import Player from 'src/sound';\n\n\n//import Sound from 'src/sound';\n  \nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\nlet socket = io(Urls.baseUrl, {transports: ['websocket']});\nconst TheContent = ({email,name,notificationCount,Messages,setSocket}) => {\n  const ENDPOINT = 'localhost:4000';\n  const notify = (data) => toast(data);\n  const [click,setClick] = useState(false);\n\n\n  useEffect(()=>{\n     //  socket = io.connect(ENDPOINT);\n   \n    setSocket(socket);\n\n\n    let room = email;\n    localStorage.setItem('mail',room);\n \n     socket.emit('joins',{name,room}, () =>{\n      });\n \n     \n       \n      setSocket(socket)\n \n     \n \n      socket.on('newNotification',(notification)=>{\n       notificationCount(notification[0].count);\n        Messages(notification[0].data);\n        setTimeout(() => {\n         setClick(true);\n         //alert(notification[0].count+\" New Notifications\")\n       notify(notification[0].count+\" New Notifications\");\n        }, 2000);\n    \n          // console.log(notification);\n      })\n     \n      \n  },[ENDPOINT]);\n\n\n  useEffect(()=>{\n   //alert(email)\n\n \n\n   \n  })\n  return (\n    \n    <main className=\"c-main\">\n      \n      <CContainer fluid>\n        <Suspense fallback={loading}>\n          <Switch>\n            {routes.map((route, idx) => {\n              return route.component && (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={props => (\n                    <CFade>\n                      <route.component   socket={socket}  {...props} />\n                    </CFade>\n                  )} />\n              )\n            })}\n            <Redirect from=\"/\" to=\"/dashboard\" />\n          </Switch>\n        </Suspense>\n      </CContainer>\n      \n      <ToastContainer />\n    </main>\n  )\n}\n\nexport default React.memo(TheContent)\n","/Users/tony/Documents/Projects/react/Writer/admin/src/containers/_nav.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/routes.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/modal/Modal.js",["365"],"import { useState } from \"react\";\nimport { Button,Modal } from \"react-bootstrap\";\n\nconst ModalCard=({Show,Close,Save,ButtonName,content,isShowLoader,style,showBtn=true,Buttons})=>{\n  \n\nreturn (\n  <>\n   \n\n    <Modal style={style} show={Show} onHide={Close}>\n      <Modal.Header closeButton>\n        <Modal.Title>{ButtonName}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n          {content}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={Close}>\n          Close\n        </Button>\n       {showBtn &&<Button variant=\"primary\" disabled={isShowLoader} onClick={Save}>\n          {ButtonName}\n        </Button>}\n        {!showBtn && Buttons() }\n      </Modal.Footer>\n    </Modal>\n  </>\n);\n}\n\nexport default ModalCard;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/supportCenter/support.js",["366"],"import { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\n\nimport ChatBox from \"../ChatBox/ChatBox\";\nimport TableCard from \"../table/TableCard\";\n\nconst Support = ({socket})=>{\n\n   const [open,setOpen]=useState(false);\n\n   const [TICKETS,setTickects] = useState([]);\n   const [email,setEmail] = useState('');\n  const [taskid,setTaskid] =useState('');\n\n    const getOpentickets = async ()=>{\n            try {\n              \n              const result = await ApiRequest.getOpenTickets();\n              var organisedData =[];\n              result.data.forEach(element => {\n              var dat=  {\n\n                  \"#Id\":element.task_id,\n                   image:ProfileImage(element.writer_profile),\n                  \n                   email:element.writer_email,\n                   \n                   Odate:element.taskl_accepted_date,\n                   Action:Buttons(element.writer_email,element.task_id)\n                }\n                organisedData.push(dat);\n              });\n\n              setTickects(organisedData);\n            } catch (error) {\n              \n            \n            }\n    }\n\n    useEffect(()=>{\n      getOpentickets();\n    },[]);\n\n    const Open=(mail,taskid)=>{\n      setTaskid(taskid);\n      setEmail(mail);\n      setOpen(!open);\n   }\n   const ProfileImage=image=>{\n    \n      return <img \n              style={{\n                width:\"30px\",\n                height:\"30px\",\n                borderRadius:'15px'\n                \n              }}\n          src={image} alt=\"profile\"/>\n    }\n   \n    const Buttons =(email,task_id)=>{\n      return <> \n           <button style={{color:\"blue\"}} onClick={()=>Open(email,task_id)}  className=\"fa fa-reply btn\"></button> \n         \n           \n       </>\n         }\n\n       \n   \n   const columns = [\n        {\n          dataField: \"#Id\",\n          text: \"TicketId(taskid)\",\n         \n        },\n        {\n          dataField: \"image\",\n          text: \"Profile\",\n        \n          sort: true\n        },\n       \n        {\n          dataField: \"email\",\n          text: \"email\",\n        \n        },\n       \n        {\n          \n            dataField: \"Odate\",\n            text: \"OpenDate\",\n          \n          \n        },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n    \n return <>  \n<div className=\"container card\">\n<TableCard products={TICKETS} columns={columns} title={\"SUPPORT TICKETS\"}/>\n</div>\n     \n{open && <ChatBox\n    open={open}\n    SetOpen={Open}\n    email={email}\n    socket={socket}\n    taskid={taskid}\n   />}\n   </>;\n}\n\nexport default Support;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/seatings.js",["367","368","369","370","371","372","373","374","375"],"import { useEffect, useState } from \"react\";\nimport AccountSeating from \"./admins/accountSeating\";\nimport AdminProfile from \"./admins/adminProfile\";\nimport Administrators from \"./admins/admins\";\n\nconst Seatings=()=>{\n    \n    const [id,setId]= useState('');\n    const SetId=(id)=>{\n        setId(id);\n    }\n\n    useEffect(()=>{\n       setId(1);\n    },[])\n  return <>\n  <ul className=\"nav nav-tabs\">\n  <li className=\"nav-item\">\n    \n    <a className={1== id?\"nav-link active\":\"nav-link\"} onClick={()=>SetId(1)}  href=\"javascript:void(0)\">Manage Your Account</a>\n  \n</li>\n<li className=\"nav-item\">\n    \n    <a className={2== id?\"nav-link active\":\"nav-link\"}\n       onClick={()=>SetId(2)}\n     href=\"javascript:void(0)\">Account Seatings</a>\n  \n</li>\n<li className=\"nav-item\">\n    \n    <a className={3== id?\"nav-link active\":\"nav-link\"}\n       onClick={()=>SetId(3)}\n     href=\"javascript:void(0)\">Administrators</a>\n  \n</li>\n</ul>\n{1 === id?<AdminProfile/>:\"\"}\n{2=== id? <AccountSeating/>:\"\"}\n{3 ===id?<Administrators/>:\"\"}\n</>\n}\n\nexport default Seatings;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/dashboard/Dashboard.js",["376","377","378"],"import React, { lazy, useEffect, useState } from 'react'\n//import Tables from '../table/table.js'\n//import TableCard from '../table/TableCard.js';\n//import { Dropdown } from \"react-bootstrap\";\nimport MoreButton from './moreButton.js';\n//import DashBoardData from 'src/Api/Data/requestApi.js';\nimport TaskInProgress from '../base/Task/management/in-progress/progress.js';\nimport ApiRequest from 'src/Api/Data/requestApi.js';\n\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\n\nconst columns = [\n  {\n    dataField: \"#Order\",\n    text: \"Order Id\",\n   \n  },\n  {\n    dataField: \"Title\",\n    text: \"Title\",\n  \n    sort: true\n  },\n  {\n    dataField: \"status\",\n    text: \"Status\",\n \n  },\n  {\n    dataField: \"created\",\n    text: \"Created On\",\n  \n  },\n  {\n    \n      dataField: \"deadline\",\n      text: \"Deadline\",\n    \n    \n  },\n  {\n      dataField: \"Action\",\n      text: \"Action\",\n   \n    }\n];\n\nconst style={\n  button:{\n    width:\"90%\",\n    border:\"0px\",\n   outline:\"none\",\n   \n    height:\"40px\",\n    borderRadius:\"4px\",\n    marginTop:\"2px\",\n    marginBottom:\"2px\",\n    marginLeft:\"6px\"\n    \n  }\n}\n\n\n\n\n\nconst Dashboard = ({socket}) => {\n\n   const [dashboard,setDashBoard]= useState([]);\n   const [set,setSet]=useState(false);\n\n   const HandleDashBoard=async ()=>{\n    var data= await ApiRequest.DashBoardData();\n    \n    setDashBoard([data.data]);\n    setSet(true);\n   }\n\n   useEffect(()=>{\n     \n     HandleDashBoard();\n   },[]);\n\n  const AcceptTask=(id)=>{\n    alert('accept'+id);\n  }\n  const TaskDetails=(id)=>{\n    alert(\"Task Details\"+id);\n  }\n\n  const writerDetails=(id)=>{\n     alert('writer detail'+id);\n  }\n\n  const RejectRequest=(id)=>{\n    alert('Reject request'+id);\n  }\n\n  const products = [\n    {\n      '#Order': \"#7882992\",\n      price: 100,\n      Title: 10,\n      status: \"japan\",\n      created:\"2020-7-19\",\n      deadline:\"2019-18-10\",\n      Action:<MoreButton \n          writer={writerDetails}\n         accept={AcceptTask}\n         Reject={RejectRequest}\n         task={TaskDetails}\n         taskid={8}\n         writerId={5}\n      />\n  \n    },\n  \n  ];\n  \n  return (\n    <>\n      {set && <WidgetsDropdown dashboard={dashboard}/>}\n      <div className=\"container card\">\n\n      <TaskInProgress socket={socket}/>\n     {/* <TableCard title={\"Writers Task Request\"} columns={columns} products={products}/>*/}\n      </div>\n    \n    </>\n  )\n}\n\n\nexport default Dashboard\n","/Users/tony/Documents/Projects/react/Writer/admin/src/views/charts/Charts.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/icons/coreui-icons/CoreUIIcons.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/mangement.js",["379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396"],"import React, { useEffect, useState } from \"react\";\n\nconst AssignedTask = React.lazy(()=>import('./assigned/assigned'));\nconst CancelledTask = React.lazy(()=>import('./cancelled/cancelled'));\nconst CompletedTask = React.lazy(()=>import('./completed/completed'));\nconst TaskInProgress = React.lazy(()=>import('./in-progress/progress'));\nconst TaskBeingRedone = React.lazy(()=>import('./Redones/redones'));\nconst NewTaskSubmited = React.lazy(()=>import('./submited/submited'));\n\nconst TaskManagement = ({socket})=>{\n      const [id,setId]= useState('');\n      const SetId=(id)=>{\n          setId(id);\n      }\n\n      useEffect(()=>{\n         setId(1);\n      },[])\n    return <>\n    <ul className=\"nav nav-tabs\">\n    <li className=\"nav-item\">\n      \n      <a className={1== id?\"nav-link active\":\"nav-link\"} onClick={()=>SetId(1)}  href=\"javascript:void(0)\">New Submited</a>\n    \n  </li>\n  <li className=\"nav-item\">\n      \n      <a className={2== id?\"nav-link active\":\"nav-link\"}\n         onClick={()=>SetId(2)}\n       href=\"javascript:void(0)\">Assigned Orders</a>\n    \n  </li>\n  <li className=\"nav-item\">\n \n  <a className={3== id?\"nav-link active\":\"nav-link\"}\n    onClick={()=>SetId(3)}\n  href=\"javascript:void(0)\">Orders In Progress</a>\n  </li>\n  <li className=\"nav-item\">\n    <a className={4== id?\"nav-link active\":\"nav-link\"} \n    onClick={()=>SetId(4)}\n    href=\"javascript:void(0)\">Cancelled Orders</a>\n  </li>\n  <li className=\"nav-item\">\n    <a className={5== id?\"nav-link active\":\"nav-link\"}\n     onClick={()=>SetId(5)}\n    href=\"javascript:void(0)\">Revisions</a>\n  </li>\n  <li className=\"nav-item\">\n    <a className={6== id?\"nav-link active\":\"nav-link\"} \n    onClick={()=>SetId(6)}\n    href=\"javascript:void(0)\">Completed Orders</a>\n  </li>\n \n</ul>\n<div className=\"container\">\n    {id === 1 ?<NewTaskSubmited/>:\"\"}\n    {id === 2 ?<AssignedTask/>:\"\"}\n    {id === 3 ?<TaskInProgress socket={socket}/>:\"\"}\n    {id === 4 ?<CancelledTask/>:\"\"}\n    {id === 5 ?<TaskBeingRedone socket={socket}/>:\"\"}\n    {id === 6 ?<CompletedTask/>:\"\"}\n</div>\n\n\n  </>\n}\n\nexport default TaskManagement;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/post/postTask.js",["397","398","399","400","401","402","403"],"import Dropzone from './dropzone/Dropzone';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { useEffect, useState } from 'react';\nimport swal from 'sweetalert';\nimport { Modal ,Button} from 'react-bootstrap';\nimport ApiRequest from 'src/Api/Data/requestApi';\nimport FormValidation from '../../Users/writers/formValidate';\nimport ModalCard from 'src/views/modal/Modal';\nimport TableCard from 'src/views/table/TableCard';\n\nconst PostTask=()=>{\n\n  const [validFiles, setValidFiles] = useState([]);\n  const [Show,setShow]= useState(false);\n  const [prog,setProg]= useState(0);\n  const [categories,setCategories]=useState([]);\n\n  const [title,setTitle]= useState('');\n  const [category,setCategory] = useState('');\n  const [time,setTime] = useState('');\n  const [expectedDate,setExpectedDate]=useState('');\n  const [pages,setPage]= useState('');\n  const [pricePerpage,setPricePerPag]= useState('');\n  const [totalAmountTobePaid,setAmountToBePaid]=useState('');\n  const [description,setDescription]=useState('');\n  const [workType,setWorktype] = useState('');\n  const [service,setService] = useState('');\n\n  const [selectedInvoice,setSelectedInvoice] = useState('');\n  const [selectedInvoiceEndDate,setSelectedInvoiceEndate] = useState('');\n  const [openInvoices,setOpenInvoices] = useState([]);\n  const [invoiceId,setInvoiceId] = useState('');\n\n  const [show, setShows] = useState(false);\n  const [isShowLoader,setShowLoader] = useState(false);\n\n\n\n\n  const LoadOpenInvoices =async  ()=>{\n       const result = await ApiRequest.LoadOpenInvoices();\n\n       var filteredData =[];\n\n       result.data.forEach(element => {\n        var dat=  {\n            taskid:element.invoice_id,\n            status:<span className=\"badge badge-info\">open</span>,\n            start:element.created_date,\n            deadline:element.end_date,\n            Action:Btns(element.invoice_id,element.Invoice,element.end_date)\n          }\n  \n          filteredData.push(dat);\n        });\n\n        setOpenInvoices(filteredData)\n                //console.log(result);\n  }\n\n  const assignInvoice =(invoice_id,invoice,invoiceEndate)=>{\n     \n        setSelectedInvoice(invoice);\n        setSelectedInvoiceEndate(invoiceEndate);\n        setInvoiceId(invoice_id);\n  }\n\n  const assignNewInvoice = (startDate)=>{\n    setSelectedInvoice('new');\n    setSelectedInvoiceEndate(startDate);\n    setInvoiceId(''); \n  }\n\n  const CloseInvoice = async (invoice_id)=>{\n             const result = await ApiRequest.CloseInvoice(invoice_id);\n\n             if(result.data === 'done'){\n                 swal('success','Invoice closed successfully','success');\n                 LoadOpenInvoices();\n             }else{\n                 swal('error','invoice could not be closed','error');\n             }\n\n  }\n  \n  const  Btns =(task_id,invoice,endate)=>{\n    return<> <button onClick={()=>assignInvoice(task_id,invoice,endate)} className=\"btn btn-info fa fa-check\"></button>\n     &nbsp; <button onClick={()=>CloseInvoice(task_id)} className=\"btn btn-success fa fa-trash\"></button>\n    </>;\n}\n   const AssignContent=()=>{\n     \n     const columns = [\n       {\n         dataField: \"taskid\",\n         text: \"#id\",\n        \n       },\n       {\n         dataField: \"status\",\n         text: \"Invoice status\",\n       \n         sort: true\n       },\n       {\n         dataField: \"start\",\n         text: \"start date\",\n       \n         sort: true\n       },\n       {\n         dataField: \"deadline\",\n         text: \"Deadline\",\n       \n         sort: true\n       },\n      \n       {\n           dataField: \"Action\",\n           text: \"Action\",\n        \n         }\n     ];\n\n    \n      return <TableCard\n                columns={columns}\n                products={openInvoices}\n                title={\"Existing Invoice\"}\n             />\n   }\n  const Contents =()=>{\n      return <>\n               <form className=\"form\">\n                     <label>start date</label>\n                     <input onChange={(e)=>assignNewInvoice(e.target.value)} type=\"date\" placeholder=\"end date\" className=\"form-control\"/>\n               </form>\n                <AssignContent/>\n          </>\n  }\n  const handleClose = () => {setShows(false)};\n  const handleShow = () => {LoadOpenInvoices()\n     setShows(true)};\n\n  const createInvoice =()=>{\n\n  }\n\n\n  const LoadCategories =async ()=>{\n    \n    const result = await ApiRequest.getCategories();\n  \n     setCategories(result.data);\n  //  setSelected(result.data)\n  }\n\n  useEffect(()=>{\n    LoadCategories();\n  },[]);\n\n  const HandleClose = () =>{\n    setShow(false);\n  }\n\n  const setPages=(page)=>{\n     var total = pricePerpage * page;\n     setAmountToBePaid(total);\n     setPage(page);\n\n  }\n  const setPricePerPage=(price)=>{\n     var total = price * pages;\n     setAmountToBePaid(total);\n     setPricePerPag(price);\n  }\n\n  const Update =()=>{\n    var number = prog;\n    var progs = parseInt(prog);\n    if(progs >= 100){\n      clearInterval(progress);\n      setTimeout(() => {\n        setShow(false);\n        swal(\"Upload Success\",\"file uploaded succesfully\",\"success\");\n      }, 1500);\n    };\n  \n    \n  \n  \n  \n  \n  number = number +10;\n    \n   setProg(number);\n  }\n\n  var progress = function(){ \n    setInterval(() => {\n    Update();\n}, 1500);\n  }\n const HandlePostTask=async ()=>{\n\n   /* selectedInvoice\n    selectedInvoiceEndDate\n     invoiceId\n     */\n   \n   \n   var check= FormValidation.postTaskForm(title,category,time,expectedDate,pages,pricePerpage,totalAmountTobePaid,description,service,workType,selectedInvoice);\n    \n   if(check == true){\n    if(validFiles.length !==0){\n        const result = await ApiRequest.postTask(title,category,time,expectedDate,pages,pricePerpage,totalAmountTobePaid,description,service,workType,selectedInvoice,selectedInvoiceEndDate,invoiceId);\n\n        const {success,lastId}= result.data;\n         if(success == true){\n               \n  var number = 1;\n  var total = validFiles.length;\n\n \n//setShow(true);\nif(validFiles.length !==0){\n  setShow(true);\n  for (let index = 0; index <validFiles.length; index++) {\n    var newValue = Math.floor((number/total) * 100);\n    const element =validFiles[index];\n   // const result = await ApiRequest.uploadFiles(lastId,element);\n\n   const results = await ApiRequest.uploadFiles2(element);\n\n   \n\n    if(results !==false){\n      const resultst = await ApiRequest.uploadFiles(lastId,results)\n     \n      if(resultst == true){\n         // swal('success','Task submited succesfully','success');\n          //getTaskInprogress();\n      }else{\n          swal('Error','Proccess Failed','error');\n      }\n  }\n    if(result == true){\n      setProg(newValue);\n      number = number + 1;\n     continue;\n   }\n    \n  }\n  setTimeout(()=>{\n     setValidFiles([]);\n     setTitle('');\n     setCategory('');\n     setTime('');\n    setExpectedDate('');\n    setPage('');\n    setPricePerPag('');\n    setAmountToBePaid('');\n    setDescription('');\n    setWorktype('');\n    setService('');\n    setShow(false);\n    setProg(0);\n    swal(\"success\",\"upload succesfull\",\"success\");\n  },1000);\n\n//progress();\n }else{\n  swal(\"Provide Files\",\"file uploaded Failed\",\"error\");\n }\n\n         }\n          }else{\n            swal(\"Provide Files\",\"file uploaded Failed\",\"error\");\n           }  //\n\n   }else{\n    swal(\"Submision Error\",check,\"error\");\n   }\n\n  \n    \n   \n  }\n\n\n\n\n    return <>\n    <div  className=\"container card\">\n      <br/>\n    <button style={{height:'50px',outline:\"none\"}} onClick={()=>handleShow()} className=\"btn-primary shadow-none\">SELECT INVOICE</button>\n             <form style={{\n                    marginTop:\"30px\",\n                    marginBottom:\"30px\"\n             }}>\n\n  <div className=\"form-row\">\n    \n    <div className=\"form-group col-md-6\">\n      <label for=\"inputEmail4\">Title</label>\n      <input value={title} type=\"text\" onChange={(e)=>setTitle(e.target.value)} className=\"form-control\" id=\"inputEmail4\" placeholder=\"Title\"/>\n    </div>\n    <div className=\"form-group col-md-6\">\n      <label for=\"inputPassword4\">Category</label>\n       <select onChange={(e)=>setCategory(e.target.value)} className=\"form-control\">\n           <option value=\"0\" selected>chose Category</option>\n           {categories.map((item)=>{\n           return <option>{item.category_name}</option>\n         })}\n       </select>\n    </div>\n  </div>\n \n  <div className=\"form-row\">\n    <div className=\"form-group col-md-6\">\n      <label for=\"inputCity\">Time</label>\n      <input type=\"time\" value={time} onChange={(e)=>setTime(e.target.value)} className=\"form-control\" id=\"inputCity\"/>\n    </div>\n    <div className=\"form-group col-md-4\">\n      <label for=\"inputState\">Expected date</label>\n        <input value={expectedDate} onChange={(e)=>setExpectedDate(e.target.value)} className=\"form-control\" type=\"date\"/>\n    </div>\n    <div className=\"form-group col-md-2\">\n      <label for=\"inputZip\">Pages</label>\n      <input type=\"number\" value={pages} onChange={(e)=>setPages(e.target.value)} className=\"form-control\" min=\"0.00\" max=\"10000.00\" step=\"0.01\" placeholder=\"pages\" />\n      \n    </div>\n\n    <div className=\"form-group col-md-2\">\n      <label for=\"inputZip\">Price (Ksh per page)</label>\n      <input type=\"number\" value={pricePerpage} onChange={(e)=>setPricePerPage(e.target.value)} className=\"form-control\" min=\"0.00\" max=\"10000.00\" step=\"0.01\" placeholder=\"price Ksh\" />\n      \n    </div>\n\n    <div className=\"form-group col-md-2\">\n      <label for=\"inputZip\">Total Ksh to Be Paid</label>\n      <input type=\"number\" value={totalAmountTobePaid} disabled className=\"form-control\" min=\"0.00\" max=\"10000.00\" step=\"0.01\" placeholder=\"price in dollars\" />\n      \n    </div>\n    <div className=\"form-group col-md-2\">\n      <label for=\"inputZip\">Work type</label>\n      <input type=\"text\" value={workType} onChange={(e)=>setWorktype(e.target.value)}  className=\"form-control\" min=\"0.00\" max=\"10000.00\" step=\"0.01\" placeholder=\"Work type\" />\n      \n    </div>\n    <div className=\"form-group col-md-2\">\n      <label for=\"inputZip\">Service</label>\n      <input type=\"text\" value={service} onChange={(e)=>setService(e.target.value)}  className=\"form-control\" min=\"0.00\" max=\"10000.00\" step=\"0.01\" placeholder=\"service\" />\n      \n    </div>\n    <div className=\"form-group col-md-2\">\n      <label for=\"inputZip\">Selected Invoice</label>\n      <input type=\"text\" disabled value={selectedInvoice}   className=\"form-control\" placeholder=\"seleted invoice\" />\n      \n    </div>\n\n    <div className=\"form-group col-md-2\">\n      <label for=\"inputZip\">Selected Invoice end date</label>\n      <input type=\"text\" disabled value={selectedInvoiceEndDate}   className=\"form-control\" placeholder=\"seleted invoice end date\" />\n      \n    </div>\n  </div>\n\n  <div className=\"form-row\">\n  <div style={{display:\"block\"}} class=\"form-group col-md-12\">\n      <Dropzone validFiles={validFiles} setValidFiles={setValidFiles}/>\n</div>\n  </div>\n\n  <div className=\"form-row\">\n     <div className=\"form-group col-md-12\">\n     <label for=\"inputZip\">Descripe task Here(..Task Details)</label>\n   <CKEditor\n       \n       editor={ ClassicEditor }\n      // data={message}\n    \n       onReady={ editor => {\n           // You can store the \"editor\" and use when it is needed.\n           //console.log( 'Editor is ready to use!', editor );\n           editor.editing.view.change((writer) => {\n            writer.setStyle(\n                \"height\",\n                \"300px\",\n                editor.editing.view.document.getRoot()\n            );\n            });\n       } }\n       onChange={ ( event, editor ) => {\n           const data = editor.getData();\n           setDescription(data);\n           \n           //setMessage(data);\n       } }\n      \n   />\n     </div>\n  </div>\n  \n  <button onClick={()=>HandlePostTask()}  type=\"button\" className=\"btn btn-primary\">Post New Task</button>\n</form>\n</div>\n<ModalCard\n   content={Contents()}\n    Show={show}\n    Close={handleClose}\n   Save={createInvoice} ButtonName={\"Create New Invoice\"}\n/>\n\n\n\n\n<Modal show={Show} onHide={HandleClose}>\n<Modal.Header>\n  <Modal.Title>Uploading Task</Modal.Title>\n</Modal.Header>\n<Modal.Body>\n<small>Upload Progress {prog}%</small>\n                      <div className=\"progress mb-3\" style={{height:\"15px\"}}>\n                        <div className=\"progress-bar bg-primary\" role=\"progressbar\" style={{width:prog+\"%\"}} aria-valuenow=\"72\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n</Modal.Body>\n\n</Modal>\n\n\n          </>;\n}\n\nexport default PostTask;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/assign/assign.js",["404","405","406"],"import download from \"downloadjs\";\nimport { useEffect, useState } from \"react\";\n//import { Alert } from \"react-bootstrap\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport TableCard from \"src/views/table/TableCard\";\nimport swal from \"sweetalert\";\nimport SingeleTask from \"../TaskDetails/SingleTaskDetails\";\nimport AsignUser from \"./Asigne/Asign\";\n\nconst AssignTask = ({socket})=>{\n  const [taskDetails,setTaskDetails] = useState(false);\n  const [taskId,setTaskId]=useState('');\n  const [assign,setAssign] = useState(false);\n  const [bck,setBck] = useState(true);\n  const [unAssignedTask,setUnassignedTask] = useState([]);\n  const [taskID,setTaskID]= useState('');\n  \n  const AssignTasks=TaskId=>{\n      setTaskID(TaskId);\n    setAssign(true);\n      \n  }\n  const Button=(task_id)=>{\n    return <>\n    \n    \n             <button onClick={()=>TaskDetails(task_id)} style={{marginLeft:\"2px\"}} className=\"btn btn-primary\">Details</button>\n            <button onClick={()=>AssignTasks(task_id)}  style={{marginLeft:\"2px\"}} className=\"btn btn-info\">Assign Task</button>\n            <button  onClick={()=>DeleteTask(task_id)} style={{marginLeft:\"2px\"}}  className=\"btn btn-success fa fa-trash\"></button>\n              </>\n     \n  }\n\n  const getUnAssignedTask = async ()=>{\n       const result = await ApiRequest.getUnAssignedTask();\n       const filteredData=[];\n  \n       result.data.forEach(element => {\n       var dat =  {\n           \"#taskId\":element.task_id,\n            title:element.task_title,\n            writerName:\"\",\n            email:\"\",\n            status:State(element.task_status),\n            category:element.task_Descipline,\n            sdate:element.task_created_date,\n            ddate:element.task_deadline,\n            Action:Button(element.task_id)\n         }\n \n         filteredData.push(dat);\n       });\n       \n        \n       setUnassignedTask(filteredData);\n  }\n\n  useEffect(()=>{\n  \n      getUnAssignedTask();\n  },[])\n\nconst State=(state)=>{\n    if(state === \"new\"){\n      return <div className=\"badge badge-info\">{state}</div>\n    }\n    if(state === \"cancelled\"){\n      return <div className=\"badge badge-warning\">{state}</div>\n    }\n}\n\n  const Delete=async (id)=>{\n       var data = await ApiRequest.deleteTask(id);\n       \n       if(data.data ===\"done\"){\n        getUnAssignedTask();\n        swal(\"Deleted\",\"succefully\",\"success\");\n        \n       }else{\n        swal(\"Failed\",data.data,\"error\");\n       }\n  }\n\n  const DeleteTask=TaskId=>{\n     swal(\"Are you sure To Delete This Task\",\"\",\"warning\",{\n           buttons:{\n             cancel:'Cancel !',\n             procceed:{\n                 text:\"Delete !\",\n                 value:\"delete\"\n             }\n           }\n     })\n     .then((value)=>{\n         switch (value) {\n           case 'delete':\n\n              Delete(TaskId);\n               // swal(\"Deleted\",\"succefully\"+TaskId,\"success\");\n             break;\n         \n           default:\n             break;\n         }\n     })\n  }\n\n  const CloseTask=()=>{\n    setTaskDetails(false);\n  }\n\n  const TaskDetails=(taskId)=>{\n    setTaskId(taskId);\n     setTaskDetails(true);\n  }\n\n \n    const columns = [\n        {\n          dataField: \"#taskId\",\n          text: \"#taskId\",\n         \n        },\n        {\n          dataField: \"title\",\n          text: \"Title\",\n        \n          sort: true\n        },\n      \n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n        {\n          \n            dataField: \"category\",\n            text: \"Category\",\n          \n          \n        },\n        {\n          \n          dataField: \"sdate\",\n          text: \"Submited-Date\",\n        \n        \n      },\n      {\n          \n        dataField: \"ddate\",\n        text: \"Deadline\",\n      \n      \n      },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n      const products=[\n       { \n         \"#taskId\":\"7888888\",\n            title:\"Lorem ipsume\",\n            writerName:\"John \",\n            email:\"airotony8@gmail.com\",\n            status:\"Revision\",\n            category:\"Lorem\",\n            sdate:\"2018-9-10\",\n            ddate:\"2019-10-10\",\n            Action:<>\n             <button onClick={()=>TaskDetails(1)} style={{marginLeft:\"2px\"}} className=\"btn btn-primary\">Details</button>\n            <button onClick={()=>AssignTasks(1)}  style={{marginLeft:\"2px\"}} className=\"btn btn-info\">Assign Task</button>\n            <button  onClick={()=>DeleteTask(1)} style={{marginLeft:\"2px\"}}  className=\"btn btn-success fa fa-trash\"></button>\n              </>\n       }\n      ]\n    return <>\n         {!taskDetails && !assign &&<div className=\"container card\"> <TableCard \n             products={unAssignedTask}\n             columns={columns}\n              title={\"NEW TASK NOT ASSIGNED\"}\n             />\n             </div>\n         }\n         {taskDetails && !assign && <SingeleTask id={taskId} closeTask={CloseTask} isAccept={false}/>}\n         {assign && <AsignUser taskId={taskID} isBck={bck} setAssign={setAssign} setBack={setBck}/>}\n          </>\n\n          \n}\n\nexport default AssignTask;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/pending/pendingPayments.js",["407","408"],"import { useEffect, useState } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport TableCard from \"src/views/table/TableCard\";\nimport SingeleTask from \"../../Task/TaskDetails/SingleTaskDetails\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst PendingPayments= ()=>{\n\n  const notify = (data) => toast(data);\n  const [isShowSingleTask,setIsShowSingleTask]=useState(false);\n  const [taskId,setTaskId]=useState('');\n  const [markedOrders,setMarkedOrders] = useState([]);\n  const [unpaidTask,setUnpaidTask] = useState([]);\n  const [isShowLoader,setShowLoader] = useState(false);\n\n  const ShowSingleTasks =taskid=>{\n    setTaskId(taskid);\n  \n   setIsShowSingleTask(true);\n  }\n  const CloseSingleTask=()=>{\n    setTaskId('');\n    // setIsShowInvoice(false);\n     setIsShowSingleTask(false);\n  }\n  const SubmitMultipleMarked = ()=>{\n    setShowLoader(true);\n   console.log(markedOrders)\n      if(markedOrders.length > 0){\n             markedOrders.forEach(async (element) => {\n              //invoice:invoice,taskId:id\n              const result = await ApiRequest.markTaskPaid(element.invoice,element.taskId);\n              notify(result.data);\n             });\n             getUnpaidTask();\n      }else{\n        toast('Selectem Payments first');\n        setShowLoader(false);\n      }\n    //console.log(markedOrders)\n  }\n\n  const SubmitSingle=async (id,invoice)=>{\n     /* let data = {\n         invoice:invoice,\n         taskId:id\n      }*/\n      setShowLoader(true);\n   if(id === \"\" || invoice === \"\"){\n      notify('Failed')\n     return\n   }\n    \n      const result = await ApiRequest.markTaskPaid(invoice,id);\n      notify(result.data);\n      getUnpaidTask();\n     // alert(result.data)\n      setShowLoader(false);\n      //console.log(data);\n  }\n  const HandleSelected =(id,invoice,event)=>{\n      if(event.target.checked){\n        let newMarked = markedOrders;\n        console.log(markedOrders)\n       // console.log(id+\"\"+invoice)\n        newMarked.push({invoice:invoice,taskId:id})\n        //[i][e.target.name] = e.target.value;\n       setMarkedOrders(newMarked);\n\n       \n      }else {\n          var newData =[];\n        markedOrders.forEach((element) => {\n               if(element.taskId !== id){\n                   newData.push({invoice:element.invoice,taskId:element.taskId})\n               }\n\n        });\n        //let newMarke = markedOrders.filter((item)=>item.taskId !== id);\n        //setMarkedOrders([]);\n        //console.log(newMarke)\n       //newMarked= newMarked.filter((item)=>item.taskId !== id);\n       // newMarked.push({invoice:invoice,taskId:id})\n      setMarkedOrders(newData);\n        \n      };\n  }\n\n  const Button=(id,invoice)=>{\n    return <>\n        <button style={{marginRight:\"5px\"}} onClick={()=>SubmitSingle(id,invoice)} className=\"btn btn-info\">Mark Paid</button>\n    <button style={{\n             \n              color:\"#000\",\n            \n  }} onClick={()=>ShowSingleTasks(id)} className=\"btn btn-success fa fa-history\"></button>\n  </>\n  }\n\n const getUnpaidTask = async ()=>{\n        const result = await ApiRequest.getPendingPayments();\n        const organisedData=[];\n        result.data.forEach(element => {\n            var data={\n              //check:<input onChange={(e)=>HandleSelected(element.task_id,element.Invoice,e)} type=\"checkbox\"/>,\n              \"#taskId\":element.task_id,\n              invoiceId:element.Invoice,\n              email:element.writer_email,\n              status:<span className=\"badge badge-warning\">{element.payment_status}</span>,\n              pdate:element.end_date,\n              amount:\"Ksh \"+element.payment_expected_amount,\n              Action:Button(element.task_id,element.Invoice)\n             }\n\n             organisedData.push(data);\n             \n        });\n\n        setUnpaidTask(organisedData);\n\n      //  organisedData=[];\n       // console.log(result);\n } \n\n useEffect(()=>{\n     getUnpaidTask();\n },[]);\n    const columns = [\n      //{\n      //  dataField: \"check\",\n       // text: <span className=\"fa fa-check badge badge-success\"></span>,\n       \n      //},\n        {\n          dataField: \"#taskId\",\n          text: \"#taskId\",\n         \n        },\n      \n        {\n          dataField: \"invoiceId\",\n          text: \"#Invoice Id\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"Writer email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n       \n        {\n          \n          dataField: \"pdate\",\n          text: \"Expected-Day-Pay\",\n        },\n        {\n          \n          dataField: \"amount\",\n          text: \"Amount to be paid\",\n        },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n  \n    return <>\n            {!isShowSingleTask &&<>\n            <button onClick={()=>SubmitMultipleMarked()} style={{float:\"right\",marginBottom:\"5px\"}} className=\"btn btn-warning\">Submit All Selected As Paid</button>\n             <div className=\"container card\">\n              \n             <TableCard \n             products={unpaidTask}\n             columns={columns}\n              title={\"PENDING PAYMENTS\"}\n             />\n             </div></>}\n\n            {isShowSingleTask && <SingeleTask id={taskId} closeTask={CloseSingleTask} isAccept={false}/>}\n\n            <ToastContainer />\n            <div style={{\n                  display:\"block\",\n                  cursor:\"pointer\",\n                   zIndex:99,\n                  position:\"absolute\",\n                  top:\"40%\",\n                  left:'50%',\n                  right:\"40%\",\n                  \n             }}>\n               \n                 \n                {isShowLoader &&  <Loader\n                   type=\"Circles\"\n                   color=\"#00BFFF\"\n                    height={100}\n                    width={100}\n      \n                  />}\n               \n             </div>\n          </>\n          \n}\nexport default PendingPayments;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/writers.js",["409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426"],"\nimport { useEffect, useState } from 'react';\nimport ModalCard from 'src/views/modal/Modal';\nimport TableCard from '../../../table/TableCard';\nimport NewWriter from './newWriter';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport swal from 'sweetalert';\nimport CategoryEdit from './editCategory';\nimport { element } from 'prop-types';\nimport Profile from './profile/profile';\nimport FormValidation from './formValidate';\nimport ApiRequest from 'src/Api/Data/requestApi';\n\n\nconst Writers = ({socket})=>{\n\n    const notify = (data) => toast(data);\n\n    const [show, setShow] = useState(false);\n    const [isShowLoader,setShowLoader] = useState(false);\n\n    const [email,setEmail] = useState('');\n    const [password,setPassword] = useState('');\n    const [ConfirmPassword,setConfirmPassword] = useState('');\n    const [country,setCountry] = useState('');\n    const [address,setAdress] = useState('');\n    const [phone,setPhone] = useState('');\n    const [category,setCategory] = useState([]);\n    const [username,setUsername] = useState('');\n    const [userId,setUserId]=useState('');\n    const  [categories,setCategories] = useState([]);\n    const [writers,setWriter] = useState([]);\n    const [userName,setUserName] = useState('');\n    const [checkd,setCheck] = useState();\n   //const [userEmail,setEmail] = useState('');\n    \n\n    const [initialSelected,setInititialSelected] = useState([\n      { label: \"Short Stories.\",value:\"short\"},\n      { label: \"Technically\",value:\"technical\"},\n      { label: \"Novellas\",value:\"novels\"},\n      { label: \"Scripts and Screenplays\",value:\"scripts\"},\n      { label: \"True Crime. ...\",value:\"true\"},\n      { label: \" Auto/Biography.\",value:\"auto\"},\n     ]);\n    const [selected, setSelecteds] = useState('');\n   const options = [\n      { label: \"Short Stories.\",value:\"short\"},\n      { label: \"Technically\",value:\"technical\"},\n      { label: \"Novellas\",value:\"novels\"},\n      { label: \"Scripts and Screenplays\",value:\"scripts\"},\n      { label: \"True Crime. ...\",value:\"true\"},\n      { label: \" Auto/Biography.\",value:\"auto\"},\n    \n      ];\n\n      const setSelected=data=>{\n       \n          setSelecteds(data)\n      }\n\n      const LoadCategories =async ()=>{\n        const result = await ApiRequest.getCategories();\n      \n         setCategories(result.data);\n      //  setSelected(result.data)\n      }\n\n      const ProfileImage=image=>{\n    \n        return <img \n                style={{\n                  width:\"70px\",\n                  height:\"70px\",\n                  borderRadius:\"35px\"\n                }}\n            src={image} alt=\"profile\"/>\n      }\n\n      const LoadWriters = async ()=>{\n            const result = await ApiRequest.getWriters();\n            const sortedItems=[];\n             //console.log(result);\n            if(result.data !==\"empty\" && result.data != false){\n            result.data.map((item)=>{\n             // =${`badge badge-primary`}\n                 var data={\n                  \"#writerId\":\"#\"+item.witer_id,\n                  image:ProfileImage(item.writer_profile),\n                  writerName:item.writer_name,\n                  email:item.writer_email,\n                  status:<span className={item.writer_account_status == \"0\"?\"badge badge-danger\":\"badge badge-primary\"}>{item.writer_account_status == \"0\"?\"deactivated\":\"Active\"}</span>,\n                  writercategory:item.writer_category,\n                  Action:Buttons(item.witer_id,item.writer_name,item.writer_email,checkes(item.writer_account_status))\n                 }\n\n                 sortedItems.push(data);\n            })\n          }\n\n\n          setWriter(sortedItems);\n      }\n      const checkes=(status)=>{\n        return status == \"0\"?false:true;\n      }\n\n    //load writers\n\n      useEffect(()=>{\n         LoadCategories();\n         LoadWriters();\n      },[]);\n\n\n    const [edit,setEdit] = useState(false);\n\n    const handleClose = () => {setShow(false);setEdit(false)};\n    const handleShow = () => setShow(true);\n\n    const BlockUserPermanet=(id,username)=>{\n        swal(\"You Are About To Permanently Block \"+username+\"!?\", {\n            buttons: {\n              cancel: \"Dont Block!\",\n              delete: {\n                text: \"Block User\",\n                value: \"delete\",\n              },\n             \n            },\n          })\n          .then(async (value) => {\n            switch (value) {\n           \n             \n           \n              case \"delete\":\n                  const result = await ApiRequest.BlockUser(id);\n                  if(result.data == true){\n                swal(`${username}`, \"Deleted Succesfully\", \"success\");\n                LoadWriters();\n                  }\n                break;\n           \n              default:\n                swal(\"Process Canceled Succesfully!\");\n            }\n          });\n    }\n\n    const DisableUser =(id,username)=>{\n      swal(\"\",\"Unblock \"+username+\"!?\",\"warning\", {\n        buttons: {\n          cancel: \"Cancel!\",\n          delete: {\n            text: \"Unblock User\",\n            value: \"unblock\",\n          },\n         \n        },\n      })\n      .then(async (value) => {\n        switch (value) {\n       \n         \n       \n          case \"unblock\":\n            const result = await ApiRequest.unblockUser(id);\n            \n           if(result.data == true){\n            swal(`${username}`, \"unblocked Succesfully\", \"success\");\n            LoadWriters();\n           }\n            break;\n       \n          default:\n            swal(\"Process Canceled Succesfully!\");\n        }\n      });\n    }\n\n    const EditUser=(id,checkeds,username,email)=>{\n         setUserId(id);\n         setUserName(username);\n         setCheck(checkeds);\n         setEdit(true)\n         setEmail(email);\n    }\n    const Back=()=>{\n      setUserId('')\n      setEdit(false);\n    }\n\n    const CreateNewWriter = async ()=>{\n      \n        setShowLoader(true);\n            const test = FormValidation.RegisterForm(email,username,password,ConfirmPassword,country,address,phone,category);\n            if(test == true){\n                 const result = await ApiRequest.RegisterWriter(email,username,password,ConfirmPassword,country,address,phone,category);\n                  if(result.data == true){\n                    notify('Writer added Succesfully');\n                    setShowLoader(false);\n                    LoadWriters();\n             setEmail('');\n             setPassword('');\n             setAdress('');\n             setPassword('');\n             setConfirmPassword('');\n             setCountry('');\n             setPhone('');\n             setUsername('');\n                  }else{\n                       notify(result.data);\n                       setShowLoader(false);\n                       setEmail('');\n                        setPassword('');\n                        setAdress('');\n                        setPassword('');\n                          setConfirmPassword('');\n                        setCountry('');\n                     setPhone('');\n                     setUsername('');\n                  }\n\n            }else{\n\n       notify(test);\n       setTimeout(() => {\n             setShowLoader(false);\n            setEmail('');\n             setPassword('');\n             setAdress('');\n             setPassword('');\n             setConfirmPassword('');\n             setCountry('');\n             setPhone('');\n             setUsername('');\n       }, 2000);\n      }\n    }\n\n\n    const Buttons =(id,username,email,checkeds)=>{\n     return <> \n          <button style={{color:\"blue\"}} onClick={()=>EditUser(id,checkeds,username,email)} className=\"fa fa-edit btn\"></button> \n          <button  onClick={()=>checkeds==true?BlockUserPermanet(id,username):DisableUser(id,username)} className={checkeds?\"fa fa-unlock btn btn-info\":\"fa fa-lock btn btn-warning\"}></button> \n           \n      </>\n        }\n    \n    const columns = [\n        {\n          dataField: \"#writerId\",\n          text: \"WriterId\",\n         \n        },\n        {\n          dataField: \"image\",\n          text: \"Profile\",\n        \n          sort: true\n        },\n        {\n          dataField: \"writerName\",\n          text: \"Username\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n        {\n          \n            dataField: \"writercategory\",\n            text: \"writer Category\",\n          \n          \n        },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n\n      const products = [\n           { \n               \"#writerId\":\"#9988\",\n                image:\"image\",\n                writerName:\"Airo\",\n                email:\"airotony8@gmail.com\",\n                status:<span className=\"badge badge-primary\">cancelled</span>,\n                writercategory:\"Litrature\",\n                Action:Buttons(1,\"Linet\")\n         },\n         { \n            \"#writerId\":\"#9988\",\n             image:\"image\",\n             writerName:\"Airo\",\n             email:\"airotony8@gmail.com\",\n             status:<span className=\"badge badge-primary\">cancelled</span>,\n             writercategory:\"Litrature\",\n             Action:Buttons(2,\"Brayo\")\n      },\n      { \n        \"#writerId\":\"#9988\",\n         image:\"image\",\n         writerName:\"Airo\",\n         email:\"airotony8@gmail.com\",\n         status:<span className=\"badge badge-primary\">cancelled</span>,\n         writercategory:\"Litrature\",\n         Action:Buttons(3,\"Kevo\")\n  },\n      \n      ];\n    \n    return <>\n     {edit && <Profile\n      category={categories}\n      existingCategories={initialSelected}\n      back={Back}\n      DisableUser={DisableUser}\n      BlockUserPermanet={BlockUserPermanet}\n      id={userId}\n      username={userName}\n      checkeds={checkd}\n      email={email}\n      socket={socket}\n      />}\n      {/*<CategoryEdit data={options} selected={category} setSelected={setCategory}/>*/}\n     <ModalCard \n       content={<NewWriter \n        isShowLoader={isShowLoader}\n         email={email}\n         setEmail={setEmail}\n         password={password}\n         setPassword={setPassword}\n         ConfirmPassword={ConfirmPassword}\n         setConfirmPassword={setConfirmPassword}\n         country={country}\n         setCountry={setCountry}\n         address={address}\n         setAdress={setAdress}\n         phone={phone}\n         setPhone={setPhone}\n         category={categories}\n         setCategory={setCategory}\n         username={username}\n         setUsername={setUsername}\n         setSelected={setCategory}\n        />}\n        Show={show}\n        Close={handleClose}\n       Save={CreateNewWriter} ButtonName={\"Create New Writer\"}\n      />\n      {!edit && <> <div style={{height:\"60px\",display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n            <h4 style={{marginTop:\"10px\",marginLeft:\"20px\"}}><i>CREATE NEW USER</i></h4>\n             <button onClick={()=>handleShow()} style={{width:\"40px\",height:\"40px\",marginRight:\"10px\",marginTop:\"7px\"}} className=\"btn btn-primary fa fa-plus\"></button>\n        </div>\n      <div className=\"container card\">\n       <TableCard products={writers} columns={columns} title={\"Writers\"}/>\n       </div></>}\n       \n       <ToastContainer />\n    </>\n}\n\nexport default Writers;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/history/history.js",["427"],"\nimport { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport TableCard from \"src/views/table/TableCard\";\nimport Invoice from \"../../Invoice/Invoice\";\nimport SingeleTask from \"../../Task/TaskDetails/SingleTaskDetails\";\n\nconst History = ()=>{\n    const [isShowInvoice,setIsShowInvoice] = useState(false);\n    const [isShowSingleTask,setIsShowSingleTask]=useState(false);\n    const [taskId,setTaskId]=useState('');\n    const [invoiceId,setInvoiceId]= useState('');\n    const [Invoices,setInvoices]= useState([]);\n\n     const ShowInvoice=invoiceid=>{\n         \n         setInvoiceId(invoiceid);\n         setIsShowInvoice(true);\n         setIsShowSingleTask(false);\n     }\n     const ShowSingleTasks =taskid=>{\n       setTaskId(taskid);\n      setIsShowInvoice(false);\n      setIsShowSingleTask(true);\n     }\n\n     const CloseInvoice=()=>{\n      setInvoiceId('');\n      setTaskId('');\n      setIsShowInvoice(false);\n      setIsShowSingleTask(false);\n     }\n\n\n     const LoadInvoices = async ()=>{\n          const data = await ApiRequest.LoadInvoices();\n           var organisedData=[];\n          data.data.forEach(element => {\n               var dat ={\n                invoiceId:element.Invoice,\n                created:element.created_date,\n                pdate:element.end_date,\n                Action:Button(element.invoice_id)\n               }\n\n               organisedData.push(dat);\n          });\n\n          setInvoices(organisedData);\n          \n          //console.log(data.data);\n     }\n\n     useEffect(()=>{\n        LoadInvoices();\n     },[]);\n\n  \n  const Button=id=>{\n    return <button style={{width:\"100%\",\n             \n              color:\"#000\"\n  }} onClick={()=>ShowInvoice(id)} className=\"btn btn-success fa fa-history\"></button>\n  }\n    const columns = [\n      \n        {\n          dataField: \"invoiceId\",\n          text: \"#Invoice Id\",\n       \n        },\n      \n        {\n          \n            dataField: \"created\",\n            text: \"Created Date\",\n          \n          \n        },\n        {\n          \n          dataField: \"pdate\",\n          text: \"Paid-Date\",\n       },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n  \n\n    \n    return <>\n          {!isShowInvoice && !isShowSingleTask && \n          <div className=\"container card\">  <TableCard \n             products={Invoices}\n             columns={columns}\n              title={\"PAYMENT HISTORY\"}\n             />\n             </div>\n          }\n\n        {isShowInvoice && !isShowSingleTask &&\n          \n           <Invoice InvoiceId={invoiceId} showSingleTask ={ShowSingleTasks} closeInvoice={CloseInvoice}/>\n         \n         \n         }  \n\n        {!isShowInvoice && isShowSingleTask && <SingeleTask invoiceId={invoiceId} id={taskId} closeTask={ShowInvoice} isAccept={false}/>}\n          </>\n          \n}\n\nexport default History;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/Paid/paid.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/widgets/WidgetsDropdown.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/table/TableCard.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/ChatBox/ChatBox.js",["428","429","430","431","432","433","434","435","436","437","438"],"//import { useState } from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport ApiRequest from 'src/Api/Data/requestApi';\nimport './style.css';\nimport { animateScroll } from 'react-scroll';\nconst ROOT_CSS=({\n    height: 400,\n    \n  });\n\n\n\nconst ChatBox = ({open,SetOpen,socket,email,loged,taskid})=>{\n    \n    const [messages,setMessages] = useState([]);\n    const [Loged,setLoged] = useState('');\n    const [receiver,setReceiver] = useState('');\n    const [message,setMessage] = useState('');\n    const [profile,setProfile] = useState('');\n    const [clientProfile,setClientProfile] = useState('');\n    const [senderUsername,setUsername] = useState('');\n    const [Taskid,setTaskId] = useState('');\n    const [writerUsername,setWriterName] =  useState('');\n    const messagesEndRef = useRef(null);\n    const [set,setSet] = useState(false);\n    \n\n\n   const  scrollToBottom=() =>{\n       animateScroll.scrollToBottom({\n          containerId: \"MessageBox\"\n        });\n    \n    }\n\n    const loadChatClient =async  ()=>{\n        //alert(taskid)\n             //alert(Taskid)\n             var from = localStorage.getItem('mail');\n             const result = await ApiRequest.loadChatUsers(from,email,taskid);\n\n             var data = result.data;\n             setClientProfile(data.receiver[0].writer_profile);\n             setProfile(data.sender[0].user_profile);\n             setUsername(data.sender[0].user_username)\n             //writer_display_name\n             setWriterName(data.receiver[0].writer_display_name);\n           //console.log(data.messages);\n             setMessages(data.messages);\n\n             \n\n    }\n\n\n\nconst HandleSocket=()=>{\n    \n    if(!set){\n    socket.on('message',(message)=>{\n       \n\n       if(messages.length !==0){\n         //  console.log(messages.length)\n       }\n        setMessages((messages)=>[...messages,message]);\n        setTimeout(() => {\n          scrollToBottom();\n        }, 100);\n  });\n  setSet(true);\n}\n}\n\n   \n\n    useEffect(()=>{\n        if(open == true && !set){\n        \n            var from = localStorage.getItem('mail');\n            setLoged(from);\n            setReceiver(email);\n            setTaskId(taskid);\n            \n    \n            loadChatClient();\n            \n        HandleSocket();\n           \n        }  \n        \n       \n        \n    },[]);\n    \n\n\n    const sendMessage =()=>{\n        \n        if(message === ''){\n             setMessage('');\n            return;\n        }\n        var body ={\n            username:senderUsername,\n            Imageurl:profile,\n            message:message,\n            receiver_id:receiver,\n            sender_id:Loged,\n            task_id:taskid,\n        \n     }\n     //\n     socket.emit('sendMessage',{message:body,room:receiver}, () =>{\n    });\n\n     //socket.emit('sendMessage',{body,receiver});\n      setMessages([...messages,body])\n      setMessage('');\n      setTimeout(() => {\n        scrollToBottom();\n      }, 100);\n      \n\n    }\n   // alert(email)\n\n   return <>\n   \n    <div className=\"chat-popup\" style={{display:open?\"block\":\"none\",backgroundColor:\"brown\"}} id=\"myForm\">\n       \n        <div style={{marginBottom:\"5px\"}} className=\"container\">\n        <div class=\"avatar\">\n       \n            <img class=\"img-circle\" style={{width:\"40px\",height:\"40px\",borderRadius:\"20px\"}}  src={clientProfile} />\n           &nbsp; <span className=\"badge badge-warning\">{writerUsername}</span>\n            </div>\n    <button type=\"button\" style={{float:'right',color:\"blue\",\n                   border:\"1px solid green\",\n                   backgroundColor:\"whitesmoke\"\n\n          }} className=\"btn badge-warning fa fa-times\" onClick={()=>SetOpen()}></button>\n       </div>\n    <div style={{maxHeight:'500px',overflowY:'auto'}}  className=\"col-sm-12 col-sm-offset-4 frame\">\n    \n            <ul id=\"MessageBox\" ref={messagesEndRef} style={{maxHeight:'400px',overflowY:'auto'}}>\n           \n                 {\n messages.map((element)=>{\n                          \n    if(element.sender_id === Loged){\n          return <li style={{width:\"100%\"}}>\n          <div class=\"msj-rta macro\">\n              <div class=\"text text-r\">\n                  <p>\n                 {element.message}\n                  </p>\n                  <p><small>'+date+ loged'</small></p>\n              </div>\n          <div class=\"avatar\" style={{padding:\"0px 0px 0px 10px !important\",width:'40px'}}><img class=\"img-circle\" style={{width:'40px',height:'40px',borderRadius:'20px'}}  src={profile} /></div>                                \n    </div>\n    </li>  \n    }\n    if(element.receiver_id === receiver){\n         return  <li style={{width:\"100%\"}}>\n         <div class=\"msj macro\">\n         <div class=\"avatar\"><img class=\"img-circle\" style={{width:'40px',height:'40px',borderRadius:'20px'}}  src={clientProfile} /></div>\n             <div class=\"text text-l\">\n                 <p>\n                 {element.message}\n                 </p>\n                 <p><small>'+date+'</small></p>\n             </div>\n         </div>\n     </li>\n    }\n    if(element.receiver_id === Loged){\n        return  <li style={{width:\"100%\"}}>\n        <div class=\"msj macro\">\n        <div class=\"avatar\"><img class=\"img-circle\" style={{width:'40px',height:'40px',borderRadius:'20px'}}  src={clientProfile} /></div>\n            <div class=\"text text-l\">\n                <p>\n                {element.message}\n                </p>\n                <p><small>'+date+'</small></p>\n            </div>\n        </div>\n    </li>\n   }\n   if(element.sender_id === receiver){\n    return <li style={{width:\"100%\"}}>\n    <div class=\"msj-rta macro\">\n        <div class=\"text text-r\">\n            <p>\n           {element.message}\n            </p>\n            <p><small>'+date+ loged'</small></p>\n        </div>\n    <div class=\"avatar\" style={{padding:\"0px 0px 0px 10px !important\"}}><img class=\"img-circle\" style={{width:'40px',height:'40px',borderRadius:'20px'}}  src={profile} /></div>                                \n</div>\n</li>  \n}\n\n})\n\n\n\n                  \n                 }\n\n         \n\n\n                     \n            </ul>\n            \n            <div style={{marginBottom:\"5px\"}}>\n                <div className=\"msj-rta macro\">                        \n                    \n                        \n                        <textarea\n                        value={message}\n                        onKeyPress = {event => event.key === 'Enter' ? sendMessage() : null}\n                        onChange={(e)=>setMessage(e.target.value)} style={{width:\"100%\",outline:\"none\"}} className=\"mytext\" placeholder=\"Type a message\"/>\n                    \n\n                </div>\n                <div \n                   onClick={()=>sendMessage()}\n                style={{padding:\"10px\",backgroundColor:\"#cff\",\n                   borderRadius:\"10px\",\n                   marginLeft:\"1px\",\n                   cursor:\"pointer\"\n                 }}>\n                    <span className=\"fa fa-share\"></span>\n                </div>                \n            </div>\n            \n        </div>  \n       \n        \n        </div>\n    \n          </>\n}\n\nexport default ChatBox;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/admins.js",["439","440","441","442","443","444","445","446","447","448"],"import { useEffect, useState } from \"react\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport ModalCard from \"src/views/modal/Modal\";\nimport TableCard from \"src/views/table/TableCard\";\nimport CreateAdmin from \"./CreateAdmins\";\nimport RegisteredAdminProfile from \"./registeredAdmins/registeredAdminsProfile\";\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport swal from 'sweetalert';\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport FormValidation from \"src/views/base/Users/writers/formValidate\";\n\n\n\n\nconst Administrators=()=>{\n    const [edit,setEdit] = useState(false);\n\n    const notify = (data) => toast(data);\n    const [email,setEmail] = useState('');\n    const [password,setPassword] = useState('');\n    const [ConfirmPassword,setConfirmPassword] = useState('');\n    const [country,setCountry] = useState('');\n    const [address,setAdress] = useState('');\n    const [phone,setPhone] = useState('');\n    const [category,setCategory] = useState([]);\n    const [username,setUsername] = useState('');\n    const [userId,setUserId]=useState('');\n\n    const handleClose = () => {setShow(false);setEdit(false)};\n    const handleShow = () => setShow(true);\n    const [show, setShow] = useState(false);\n    const [isShowLoader,setShowLoader] = useState(false);\n    const [Administrators,setAdministrators]= useState([]);\n\n\n\n    const CreateNewAdmin = async ()=>{\n      \n      setShowLoader(true);\n      \n          const test = FormValidation.RegisterForm(email,username,password,ConfirmPassword,country,address,phone,category);\n          if(test == true){\n               const result = await ApiRequest.RegisterAdmins(email,username,password,ConfirmPassword,country,address,phone,'super');\n                if(result.data == true){\n                  notify('Admin added Succesfully');\n                  setShowLoader(false);\n                 LoadAdministrators()\n           setEmail('');\n           setPassword('');\n           setAdress('');\n           setPassword('');\n           setConfirmPassword('');\n           setCountry('');\n           setPhone('');\n           setUsername('');\n                }else{\n                     notify(result.data);\n                     setShowLoader(false);\n                    /* setEmail('');\n                      setPassword('');\n                      setAdress('');\n                      setPassword('');\n                        setConfirmPassword('');\n                      setCountry('');\n                   setPhone('');\n                   setUsername('');\n                   */\n                }\n\n          }else{\n\n     notify(test);\n     setTimeout(() => {\n           setShowLoader(false);\n        /*  setEmail('');\n           setPassword('');\n           setAdress('');\n           setPassword('');\n           setConfirmPassword('');\n           setCountry('');\n           setPhone('');\n           setUsername('');\n           */\n     }, 2000);\n    }\n  }\n\n    const Save = ()=>{\n        setShowLoader(true);\n    }\n\n    const state = (state)=>{\n      return state == 1?<span className=\"badge badge-success\">Active</span>:<span className=\"badge badge-warning\">Deactivated</span>;\n    }\n\n    const LoadAdministrators = async ()=>{\n              const result = await ApiRequest.getAllAdministrators();\n                 var organisedData =[];\n              result.data.forEach(element => {\n                   var bat={\n                    \n                      \"#Id\":element.user_id,\n                       image:ProfileImage(element.user_profile),\n                       writerName:element.user_username,\n                       email:element.user_email,\n                       status:state(element.user_status),\n                       level:element.user_type,\n                       Action:Buttons(element.user_id,element.user_username,Checks(element.user_status))\n                    \n                   }\n\n                   organisedData.push(bat);\n              });\n\n              setAdministrators(organisedData);\n\n            //  console.log(result.data);\n    }\n\n    const Category=()=>{\n        return <>\n              <select className=\"form-control\">\n                  <option value=\"O\" selected>chose</option>\n                  <option>Super Admin</option>\n                  <option>Manager</option>\n              </select>\n            </>\n    }\n\n    const ProfileImage=image=>{\n    \n      return <img \n              style={{\n                width:\"50px\",\n                height:\"50px\",\n                borderRadius:'25px'\n              }}\n          src={image} alt=\"profile\"/>\n    }\n\n    useEffect(()=>{\n      LoadAdministrators();\n    },[])\n   \n\n  const EditUser=(id)=>{\n       setUserId(id);\n      setEdit(true)\n  }\n  const Back=()=>{\n    setUserId('')\n    setEdit(false);\n  }\n\n  const BlockUserPermanet=(id,username)=>{\n    swal(\"You Are About To Permanently Block \"+username+\"!?\", {\n        buttons: {\n          cancel: \"Dont Block!\",\n          delete: {\n            text: \"Block User\",\n            value: \"delete\",\n          },\n         \n        },\n      })\n      .then(async (value) => {\n        switch (value) {\n       \n         \n       \n          case \"delete\":\n              const result = await ApiRequest.BlockAdmin(id);\n              if(result.data == true){\n            swal(`${username}`, \"Deleted Succesfully\", \"success\");\n            LoadAdministrators();\n           // LoadWriters();\n              }\n            break;\n       \n          default:\n            swal(\"Process Canceled Succesfully!\");\n        }\n      });\n}\n\nconst DisableUser =(id,username)=>{\n  swal(\"\",\"Unblock \"+username+\"!?\",\"warning\", {\n    buttons: {\n      cancel: \"Cancel!\",\n      delete: {\n        text: \"Unblock User\",\n        value: \"unblock\",\n      },\n     \n    },\n  })\n  .then(async (value) => {\n    switch (value) {\n   \n     \n   \n      case \"unblock\":\n        const result = await ApiRequest.unblockAdmin(id);\n        \n       if(result.data == true){\n        swal(`${username}`, \"unblocked Succesfully\", \"success\");\n        LoadAdministrators();\n       // LoadWriters();\n       }\n        break;\n   \n      default:\n        swal(\"Process Canceled Succesfully!\");\n    }\n  });\n}\n\nconst Checks = (s)=>{\n  if(s == 1){\n    return true;\n  }else{\n    return false;\n  }\n}\n\n    const Buttons =(id,username,checkeds)=>{\n      return <> \n           <button style={{color:\"blue\"}} onClick={()=>EditUser(id)} className=\"fa fa-edit btn\"></button> \n         \n           <button  onClick={()=>checkeds==true?BlockUserPermanet(id,username):DisableUser(id,username)} className={checkeds?\"fa fa-unlock btn btn-info\":\"fa fa-lock btn btn-warning\"}></button> \n           \n       </>\n         }\n    \n\n    const columns = [\n        {\n          dataField: \"#Id\",\n          text: \"Id\",\n         \n        },\n        {\n          dataField: \"image\",\n          text: \"Profile\",\n        \n          sort: true\n        },\n        {\n          dataField: \"writerName\",\n          text: \"Username\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n        {\n          \n            dataField: \"level\",\n            text: \"Administartor Type\",\n          \n          \n        },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n      const products=[\n         {\n           \"#Id\":\"33444\",\n            image:ProfileImage('https://media.istockphoto.com/photos/senior-man-remembering-picture-id1166588777?b=1&k=20&m=1166588777&s=170667a&w=0&h=lNpNLSTkPOAvvo4TwEbUQa_p0IjFUQ6K5bjodzSzJok='),\n            writerName:\"Airo\",\n            email:\"airotony8@\",\n            status:\"status\",\n            level:\"level\",\n            Action:Buttons(5,\"airo\")\n         }\n      ]\n return <>  {!edit && <> <div style={{height:\"60px\",display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n    <h4 style={{marginTop:\"10px\",marginLeft:\"20px\"}}><i>CREATE NEW ADMINISTRATOR</i></h4>\n     <button onClick={()=>handleShow()} style={{width:\"40px\",height:\"40px\",marginRight:\"10px\",marginTop:\"7px\"}} className=\"btn btn-primary fa fa-plus\"></button>\n</div>\n<div className=\"container card\">\n<TableCard products={Administrators} columns={columns} title={\"Admin-Strators\"}/>\n</div>\n\n\n <ModalCard \n  content={<CreateAdmin\n    isShowLoader={isShowLoader}\n     email={email}\n     setEmail={setEmail}\n     password={password}\n     setPassword={setPassword}\n     ConfirmPassword={ConfirmPassword}\n     setConfirmPassword={setConfirmPassword}\n     country={country}\n     setCountry={setCountry}\n     address={address}\n     setAdress={setAdress}\n     phone={phone}\n     setPhone={setPhone}\n     category={<Category/>}\n     setCategory={setCategory}\n     username={username}\n     setUsername={setUsername}/>}\n\n     ButtonName={\"CREATE NEW ADMIN\"}\n     Save={CreateNewAdmin}\n     isShowLoader={isShowLoader}\n Show={show} Close={handleClose}/>\n</>}\n\n{edit && <RegisteredAdminProfile id={userId} back={Back}/>}\n\n<ToastContainer />\n</>\n}\n\nexport default Administrators;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/accountSeating.js",["449","450","451","452"],"import { number } from \"prop-types\";\nimport { useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport swal from \"sweetalert\";\nimport DynamicForm from \"./dynamicForm\";\n\nconst AccountSeating =()=>{\n  const [allowedTask,setAllowedTask] = useState('');\n  const [billingSequence,setBillingSequence] = useState('');\n\n\n  const HandleSubmitSequence = async ()=>{\n      if(billingSequence !==\"\" && billingSequence !==\"0\"){\n            const result = await ApiRequest.postSequence(billingSequence);\n            var data = result.data;\n            if(data == true){\n              swal(\"Number of allowed\",\"task updated succesfully\",\"success\");\n            }else{\n              swal(\"ERROR\",\"Sequence update failed\",\"error\");\n             }\n\n      }else{\n        swal(\"ERROR\",\"Provide sequence\",\"error\");\n      }\n  }\n\n\n  const HandleSubmitTask =async ()=>{\n     if(allowedTask === \"\"){\n       swal(\"ERROR\",\"provide task limit by number\",\"warning\");\n     }\n     else{\n         const result = await ApiRequest.postAllowedTaskNumber(allowedTask);\n        var data = result.data;\n        if(data == true){\n          swal(\"Number of allowed\",\"task updated succesfully\",\"success\");\n        }\n        else{\n          swal(\"ERROR\",\"task update failed\",\"error\");\n         }\n       }\n  }\n    return  <> <div className=\"container\">\n    <div className=\"main-body\">\n \n        \n          \n    \n          <div className=\"row gutters-sm\">\n         \n            <div style={{marginTop:\"20px\"}} className=\"col-md-12\">\n            \n              <div className=\"row gutters-sm\">\n               {/* <div className=\"col-sm-6 mb-3\">\n                  <div className=\"card h-100\">\n                    <div className=\"card-body\">\n                      <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">System </i>Allowed Payment Methods</h6>\n                      <div className=\"form-group\">\n                           <label for=\"inputAddress2\">PaymentMethods</label>\n                         <DynamicForm />\n                         </div>\n                     \n                    </div>\n                  </div>\n</div>*/}\n                <div className=\"col-sm-6 mb-3\">\n                  <div className=\"card h-100\">\n                    <div className=\"card-body\" style={{overflowY:\"auto\"}}>\n                      <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">System</i>Billing Sequence</h6>\n                      <div className=\"form-group\">\n                           <label for=\"inputAddress2\">Current Billing Sequence &nbsp;<span className=\"badge badge-warning\">1 week</span></label>\n                         <select onChange={(e)=>setBillingSequence(e.target.value)} className=\"form-control\">\n                             <option value=\"0\" selected>\n                                ....select Billing sequence...\n                             </option>\n                             <option value=\"3\">\n                                  3 Days\n                             </option>\n                             <option value=\"7\">\n                                  1 week\n                             </option>\n                             <option value=\"14\">\n                                  2 Weeks\n                             </option>\n                             <option value=\"30\">\n                                  1 month\n                             </option>\n                         </select>\n                         </div>\n                  \n                     <button onClick={()=>HandleSubmitSequence()} style={{width:\"100%\",height:\"40px\"}} className=\"btn btn-info\">UPDATE BILLING SEQUENCE</button>\n                    </div>\n                    \n                  </div>\n                </div>\n                <div className=\"col-sm-6 mb-3\">\n                  <div className=\"card h-100\">\n                    <div className=\"card-body\" style={{overflowY:\"auto\"}}>\n                      <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">Writer</i>Number Of Task Allowed To Take Before Complition Of previous Task</h6>\n                       <div className=\"form-group\">\n                         <label>Current Allowed &nbsp;<span className=\"badge badge-warning\">1</span></label>\n                       <input value={allowedTask} onChange={(e)=>setAllowedTask(e.target.value)} type=\"number\" className=\"form-control\" placeholder=\"number of Task allowed\"/>\n                      </div>\n                     <button onClick={()=>HandleSubmitTask()} style={{width:\"100%\"}} className=\"btn btn-info\">UPDATE ALLOWED NUMBER OF TASK</button>\n                    </div>\n                    \n                  </div>\n                </div>\n               \n              </div>\n\n\n\n            </div>\n          </div>\n\n        </div>\n    </div>\n    </>\n}\n\nexport default AccountSeating;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/adminProfile.js",["453","454","455","456","457","458"],"import { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport ModalCard from \"src/views/modal/Modal\";\nimport swal from \"sweetalert\";\nimport CreateAdmin from \"./CreateAdmins\";\n\nconst AdminProfile=()=>{\n\n    const [show, setShow] = useState(false);\n    const [isShowLoader,setShowLoader] = useState(false);\n\n    const [email,setEmail] = useState('');\n    const [password,setPassword] = useState('');\n    const [ConfirmPassword,setConfirmPassword] = useState('');\n    const [country,setCountry] = useState('');\n    const [address,setAdress] = useState('');\n    const [phone,setPhone] = useState('');\n    const [category,setCategory] = useState([]);\n    const [username,setUsername] = useState('');\n    const [userId,setUserId]=useState('');\n    const [image,setImage] = useState('https://bootdey.com/img/Content/avatar/avatar7.png');\n    const [profile,setProfile] = useState('');\n\n  \n    //adminProfile\n\n    const Save =async ()=>{\n      \n      if(profile ===\"\"){\n        swal(\"Error\",\"Provide your new profile\",'error');\n\n        return\n      }else{\n           /*const result = await ApiRequest.UpdateProfile(profile);\n\n           if(result === \"success\"){\n            swal(\"Success\",\"Profile update succesfull\",'success');\n\n            getUserData();\n           }*/\n\n           const result = await ApiRequest.UpdateProfile2(profile); //ApiRequest.UpdateProfile(profile);\n\n           if(result !==false){\n            const results = await ApiRequest.UpdateProfile(result);\n            if(results === \"success\"){\n             \n              swal(\"Success\",\"Profile update succesfull\",'success');\n    \n             getUserData();\n             }\n  \n           }\n      }\n\n    \n  }\n\n\n  const UpdateDetails = async ()=>{\n        \n       if(password !==\"\" || ConfirmPassword !==\"\"){\n         if(password !== ConfirmPassword){\n              swal('Error','Your password cant be updated make sure they mach or leave them blank','error');\n           return\n         }\n       }\n\n       const data = \"email=\"+email+\"&password=\"+password+\"&country=\"+country+\"&address=\"+address+\"&phone=\"+phone+\"&username=\"+username;\n       \n       const result = await ApiRequest.UpdateData(data);\n\n       if(result.data === 'success'){\n        swal('successs','profile update success','success');\n       }else{\n        swal('Error',result.data,'error');\n       }\n\n  }\n\n    const getUserData = async ()=>{\n          const result = await ApiRequest.getAdminData();\n          \n          setEmail(result.data[0].user_email);\n          setUsername(result.data[0].user_username);\n          setCountry(result.data[0].user_country);\n          setAdress(result.data[0].address);\n          setPhone(result.data[0].user_phone);\n          setImage(result.data[0].user_profile);\n    }\n\n    useEffect(()=>{\n         getUserData();\n    },[])\n\n    const Close=()=>{\n      setShow(false)\n    }\n    const OpenModal=()=>{\n      setShow(true);\n    }\n\n    const Content=()=>{\n      \n\n      const HandleImage =async  (event)=>{\n\n        //  unction  FileRead(event) {\n              var file = event.target.files[0];\n              var reader = new FileReader();\n              reader.onload = function(event) {\n              \n               const resul= event.target.result;\n          \n               setImage(resul);\n              // setImage(file);\n\n              setProfile(file);\n  \n                  \n               \n              };\n              reader.readAsDataURL(file);\n    \n      }\n\n      return <>\n               <form>\n    <div class=\"form-group\">\n        <label for=\"exampleFormControlFile1\">Click To Select Your Profile</label>\n         <input type=\"file\" onChange={(e)=>HandleImage(e)} class=\"form-control-file\" id=\"exampleFormControlFile1\"/>\n     </div>\n      </form>\n            </>\n    }\n\n  \n     return<>   \n         <div style={{marginTop:\"20px\"}} className=\"container\">\n     <div className=\"main-body\">\n   \n      \n           \n     \n           <div className=\"row gutters-sm\">\n             <div className=\"col-md-4 mb-3\">\n               <div className=\"card\">\n                 <div className=\"card-body\">\n                   <div className=\"d-flex flex-column align-items-center text-center\">\n                     <img src={image} alt=\"Admin\" className=\"rounded-circle\" width=\"150\"/>\n                     <div className=\"mt-3\">\n                       <h4>{username}</h4>\n                       <p className=\"text-secondary mb-1\">Super Admin</p>\n                       <p className=\"text-muted font-size-sm\">{address}</p>\n                      \n                      <div>\n                         <button onClick={()=>OpenModal()} className=\"btn btn-info\">UPDATE PROFILE IMAGE</button>\n                      </div>\n                     </div>\n                   </div>\n                 </div>\n               </div>\n\n\n\n            \n\n             \n \n              \n \n             </div>\n\n\n\n\n\n             \n             <div className=\"col-md-8\">\n               <div className=\"card mb-3\">\n                 <div className=\"card-body\">\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Full Name</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                       {username}\n                     </div>\n                   </div>\n                  <hr/>\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Email</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                       {email}\n                     </div>\n                   </div>\n                  <hr/>\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Phone</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                       {phone}\n                     </div>\n                   </div>\n                  <hr/>\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Mobile</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                       {phone}\n                     </div>\n                   </div>\n                  <hr/>\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Address</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                        \n                       {address}\n                     </div>\n                   </div>\n\n\n                  <hr/>\n                  <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">COUNTRY</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                        \n                       {country}\n                     </div>\n                   </div>\n                  \n                 </div>\n               </div>\n\n\n\n \n               <div className=\"row gutters-sm\">\n                 <div className=\"col-sm-12 mb-3\">\n                   <div className=\"card h-100\">\n                     <div className=\"card-body\">\n                       <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">UPDATE</i>ACCOUNT</h6>\n                        <CreateAdmin\n                          isShowLoader={isShowLoader}\n                          email={email}\n                          setEmail={setEmail}\n                          password={password}\n                          setPassword={setPassword}\n                          ConfirmPassword={ConfirmPassword}\n                          setConfirmPassword={setConfirmPassword}\n                          country={country}\n                          setCountry={setCountry}\n                          address={address}\n                          setAdress={setAdress}\n                          phone={phone}\n                          setPhone={setPhone}\n                          username={username}\n                          setUsername={setUsername}\n                          isShowButton={true}\n                          Save={UpdateDetails}\n                        />\n                      \n                     </div>\n                   </div>\n                 </div>\n                \n                \n               </div>\n\n             \n \n \n \n             </div>\n\n     \n           </div>\n \n         </div>\n     </div>\n     <ModalCard\n       Show={show}\n       Close={Close}\n       isShowLoader={isShowLoader}\n       ButtonName={\"upload profile\"}\n       content={<Content/>}\n       Save={Save}\n     /> \n     </>\n}\nexport default AdminProfile;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/editCategory.js",["459"],"\nimport { MultiSelect } from \"react-multi-select-component\";\nimport { useState } from 'react';\nconst CategoryEdit=({data,selected,setSelected})=>{\n    \n    \n   \n    return <>\n        <MultiSelect\n        options={data}\n        defaultValue={[\"value\"]}\n        value={selected}\n        onChange={setSelected}\n        labelledBy=\"Select\"\n      />\n      </>\n}\n\nexport default CategoryEdit;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/TaskDetails/SingleTaskDetails.js",["460","461","462","463","464"],"import { useEffect, useState } from \"react\";\nimport DownloadLink from \"react-download-link\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport Urls from \"src/Api/urls\";\n\nconst SingeleTask=({id,closeTask,isAccept=true,invoiceId=null})=>{\n\n    \n\n    const [details,setDetails] = useState([]);\n    const [view,setView] = useState(false);\n\n    const getDetails=async()=>{\n      const result = await ApiRequest.getSingleTaskFullDetails(id);\n\n      setDetails(result.data);\n      //console.log(result.data); \n      setView(true);\n     // await ApiRequest.fileDownload(\"http://localhost:4000/files/Task367960GRADUATION LIST- DEC 2021 FOR NOTICE BOARD.pdf\");\n    }\n\n    function downloadFile(filename) {\n    ApiRequest.apihelperdownload().then(\n          (res) => {\n              const url = window.URL.createObjectURL(new Blob([res.data]));\n              const link = document.createElement('a');\n              link.href = url;\n              if (typeof window.navigator.msSaveBlob === 'function') {\n                  window.navigator.msSaveBlob(\n                      res.data,\n                      filename\n                  );\n              } else {\n                  link.setAttribute('download', filename);\n                  document.body.appendChild(link);\n                  link.click();\n              }\n          },\n          (error) => {\n              alert(\"Something went wrong\");\n          }\n      )\n      \n    }\n\n    const Download = async ()=>{\n             await ApiRequest.fileDownload();\n             \n    }\n\n    const statusMode=(status)=>{\n          if(status === \"new\"){\n           return <span className=\"badge badge-info\">{status}</span>\n          }\n          if(status === \"cancelled\"){\n           return <span className=\"badge badge-warning\">{status}</span>\n          }\n        if(status === \"completed\"){\n          return <span className=\"badge badge-success\">{status}</span>\n        }\n        if(status === \"in-progress\"){\n          return <span className=\"badge badge-primary\">{status}</span>\n        }\n    }\n\n    useEffect(()=>{\n        // downloadFile(\"new.pdf\");\n        getDetails();\n    },[]);\n\n\n  \n     \n    return <>\n     {view && <section>\n     <div style={{height:'60px',display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n          <div style={{marginTop:\"20px\",marginLeft:\"10px\"}}><h5>ORDER DETAILS &nbsp;({details.result[0].task_title})</h5></div>\n         <div>\n             click here to go back {\"->\"}&nbsp;\n             <button onClick={()=>closeTask(invoiceId)} className=\"fa fa-history\"  style={style.button}>\n        \n             </button></div>\n      </div>\n     <hr/>\n <div className=\"jumbotron jumbotron-fluid card\">\n         <div className=\"container\">\n         <div style={{height:'60px',display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n          <div style={{marginTop:\"20px\",marginLeft:\"10px\"}}>\n          <div>\n             <th>\n            \n                    Order Status\n                </th>\n                <td>&nbsp;&nbsp;{statusMode(details.result[0].task_status)}</td>\n             </div>\n          </div>\n         \n          </div>\n            \n            \n \n         <div className=\"container\">\n      \n                <div className=\"row\">\n                             <div className=\"col-md-4\">\n                             <strong>Order Name</strong> <p>{details.result[0].task_title}</p>\n                             <strong>Order ID</strong> <p>{details.result[0].task_id}</p>\n                             <strong>Order Title</strong> <p>{details.result[0].task_title}</p>\n                             <strong>Work Type</strong> <p>{details.result[0].task_work_type}</p>\n                             </div>\n                             <div className=\"col-md-4\">\n                             <strong>Service</strong> <p>{details.result[0].task_service}</p>\n                             <strong>Discipline</strong> <p>{details.result[0].task_Descipline}</p>\n                             <strong>Created date</strong> <p>{details.result[0].task_created_date}</p>\n                             <strong style={{color:\"brown\"}}><h3>DEADLINE</h3></strong> <p className=\"badge badge-info\">{details.result[0].task_deadline}</p>\n                             </div>\n                             <div className=\"col-md-3\">\n                                 <div className=\"btn-group-vertical btn-block\">\n                                   \n                                 </div>\n                             </div>\n                 </div>\n        </div>\n \n \n      </div>\n </div>\n \n \n   <div  className=\"box box-solid card\">\n                     <div style={{marginLeft:\"10px\"}} className=\"box-header with-border\">\n \n                       <h3 className=\"box-title\">Order details</h3>\n                     </div>\n                     \n                       <div  style={{marginLeft:\"10px\"}}className=\"dl-horizontal row\">\n                           <div className=\"col-md-11\" dangerouslySetInnerHTML={{ __html: details.result[0].task_description }} >\n                           \n                           </div>\n                           \n                       </div>\n     </div>\n     <div  className=\"box box-solid card\">\n                     <div style={{marginLeft:\"10px\"}} className=\"box-header with-border\">\n \n                       <h3 className=\"box-title\">Other Information</h3>\n                     </div>\n                     \n                       <div  style={{marginLeft:\"10px\"}}className=\"dl-horizontal row\">\n                           <div className=\"col-md-4\">\n                             <dt>Price per page:</dt>\n                             <dd>{details.result[0].price_per_page}</dd>\n                               <dt>Price:</dt>\n                               <dd>{details.result[0].price}</dd>\n                           </div>\n                           <div className=\"col-md-4\">\n \n                            \n                             <dt>Pages Number:</dt>\n                             <dd>{details.result[0].pages}</dd>\n                           </div>\n \n                          \n                       </div>\n     </div>\n \n \n     <div className=\"box box-solid card\">\n                     <div style={{marginLeft:\"10px\"}} className=\"box-header with-border\">\n \n                         <h3 className=\"box-title\">Writer Details</h3>\n                     </div>\n                     \n                     <div style={{marginLeft:\"10px\"}} className=\"box-body\">\n                   \n                    <div className=\"row\">\n                             <div className=\"col-md-4\">\n                                 <h4>Name:  <span className=\"text-info\">{Object.keys(details.writerDetails[0]).length!==0?details.writerDetails[0].name:\"\"}</span> </h4>\n                             </div>\n                             <div className=\"col-md-4\">\n                                 <h4>Phone:  <span className=\"text-info\">{Object.keys(details.writerDetails[0]).length !==0?details.writerDetails[0].phone.replace(\"254\",'0'):\"\"}</span> </h4>\n                             </div>\n                             <div className=\"col-md-4\">\n                                 <h4>Email:  <span className=\"text-info\">{Object.keys(details.writerDetails[0]).length!==0?details.writerDetails[0].email:\"\"}</span> </h4>\n                             </div>\n                         </div>\n                     </div>\n                    \n                 </div>\n \n \n                 <div className=\"box box-solid card\">\n                     <div style={{marginLeft:\"10px\"}} className=\"box-header\">\n                       <h3 className=\"box-title\">Order Files</h3>\n                     </div>\n                    \n                     <div className=\"box-body\">\n                         <table className=\"table\">\n                                 <tbody><tr>\n                                   <th style={{width:\"10px\"}}>#</th>\n                                   <th>File Name</th>\n                                   <th>Action</th>\n                                 </tr>\n                                 {details.orderFiles.map((item,index)=>{\n                                    return    <tr>\n                                        <td>{index +1}</td>\n                                        <td>{item.filename}</td>\n                                        <td>\n                                      <a   href={Urls.fileDownloadUrl+item.path}>Download</a></td>\n                              </tr>\n                                 })}\n                              \n                                  \n                                     \n                               </tbody>\n                           </table>\n                     </div>\n                   \n                   </div>  \n \n                   <div className=\"box box-solid card\">\n                     <div style={{marginLeft:\"10px\"}} className=\"box-header\">\n                       <h3 className=\"box-title\">Writer submited Files</h3>\n                     </div>\n                    \n                     <div className=\"box-body\">\n                         <table className=\"table\">\n                                 <tbody><tr>\n                                   <th style={{width:\"10px\"}}>#</th>\n                                   <th>File Name</th>\n                                   <th>Action</th>\n                                 </tr>\n \n                                 <tr>\n                                 {details.witerSubmitedFiles.map((item,index)=>{\n                                    return    <tr>\n                                        <td>{index +1}</td>\n                                        <td>{item.filename}</td>\n                                        <td>\n                                      <a   href={Urls.fileDownloadUrl+item.path}>Download</a></td>\n                              </tr>\n                                 })}\n                                 </tr>\n                                  \n                                     \n                               </tbody>\n                           </table>\n                     </div>\n                   \n                   </div>  \n \n                 \n     <div style={{backgroundColor:\"#000\"}}  className=\"box box-solid card\">\n                    \n                     \n                     \n                       <div  style={{marginLeft:\"10px\"}}className=\"dl-horizontal row\">\n                          \n \n                       {isAccept &&  <div className=\"col-md-10\">\n                               <dt style={{\n                                     marginTop:\"10px\",\n                                     marginBottom:\"10px\",\n                                     marginLeft:\"40%\",\n                                     width:\"50%\",\n                                     margin:\"10x 10px auto\"\n                               }}>\n                                    <button style={{width:'80%'}} className=\"btn btn-primary\">\n                                        Accept Task\n                                    </button>\n                               </dt>\n                                \n                           </div>}\n                       </div>\n                    \n                    \n     </div>\n\n \n </section>}\n    </>\n }\n \n const style={\n      button:{\n         marginTop:\"10px\",\n         marginRight:'10px',\n         border:\"0px\",\n         outline:\"0px\",\n         height:\"40px\",\n         width:\"40px\",\n         borderRadius:\"20px\",\n         border:\"1px solid #ecff\"\n      }\n }\n \n export default SingeleTask;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/newWriter.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Invoice/Invoice.js",["465","466","467","468","469"],"import { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport TableCard from \"src/views/table/TableCard\";\n\nconst Invoice = ({showSingleTask,closeInvoice,InvoiceId})=>{\n      const [InvoiceData,setInvoiceData] = useState([]);\n      const [show,setShow]= useState(false);\n\n\n      const getInvoiceDetails = async ()=>{\n           const data = await ApiRequest.LoadInvoiceDetails(InvoiceId);\n\n           console.log(data.data)\n            var organisedData = [];\n           data.data.forEach(element => {\n                var dat ={\n                    taskId:element.task_id,\n                     name:element.task_name,\n                     title:element.task_title,\n                     status:element.task_status,\n                     dCompleted:element.task_deadline,\n                     pPage:element.price_per_page,\n                     pages:element.pages,\n                     amount:element.payment_expected_amount,\n                     pStatus:element.payment_status,\n                     action:<button onClick={()=>showSingleTask(element.task_id)} className=\"btn btn-primary\">Details</button>\n                }\n\n                organisedData.push(dat);\n           });\n\n           setInvoiceData(organisedData);\n      }\n\n      useEffect(()=>{\n        getInvoiceDetails();\n      },[])\n    \n      //<td><button onClick={()=>showSingleTask()} className=\"btn btn-primary\">Details</button></td>\n      const columns =[\n          {\n            dataField: \"taskId\",\n            text: \"Order\",\n          },\n          {\n            dataField: \"name\",\n            text: \"Order Name\",\n          },\n          {\n            dataField: \"title\",\n            text: \"Order Title\",\n           \n          },\n          {\n            dataField: \"status\",\n            text: \"Order Status\",\n           \n          },\n          {\n            dataField: \"dCompleted\",\n            text: \"Date Completed\",\n           \n          },\n          {\n            dataField: \"pPage\",\n            text: \"Pay per page\",\n           \n          },\n          {\n            dataField: \"pages\",\n            text: \"Pages\",\n           \n          },\n          {\n            dataField: \"amount\",\n            text: \"Amount\",\n           \n          },\n          {\n             dataField:'pStatus',\n             text:'Payment Status'\n          },\n          {\n              dataField:'action',\n              text:''\n          }\n          \n        \n      ];\n\n      const Products=[\n           {\n               taskId:'',\n                name:'',\n                title:'',\n                status:\"\",\n                dCompleted:'',\n                pPage:'',\n                pages:'',\n                amount:\"\",\n                pStatus:\"\",\n                action:''\n           }\n      ]\n\n    return <>\n    <div style={{height:'60px',display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n          <div style={{marginTop:\"20px\",marginLeft:\"10px\"}}><h5>INVOICE DETAILS &nbsp;(title)</h5></div>\n         <div>\n             click here to go back {\"->\"}&nbsp;\n             <button onClick={()=>closeInvoice(InvoiceId)} className=\"fa fa-history\" style={style.button}>\n        \n             </button></div>\n      </div>\n     <hr/>\n     <div className=\"container card\">\n         <section className=\"invoice\">\n            \n            <div className=\"row\">\n                <div className=\"col-xs-12\">\n                    <h2 className=\"page-header\">\n                        Invoice\n                        <span className=\"pull-right\"></span>\n                    </h2>\n                </div>\n               \n            </div>\n\n            \n            <div className=\"row invoice-info\">\n                <div className=\"col-sm-4 invoice-col\">\n                    From\n                    <address>\n                        <strong>peakwriter@peakwriter.com</strong><br/>\n                    </address>\n                </div>\n               \n                <div className=\"col-sm-4 invoice-col\">\n                    To\n                    <address>\n                        <strong>Peakwriters</strong><br/>\n                         peakwriters\n                    </address>\n                </div>\n               \n                <div className=\"col-sm-4 invoice-col\">\n\n                    <b>Date:</b> October 16, 2021<br/>\n                </div>\n               \n            </div>\n\n            <div className=\"row\">\n                <div className=\"col-xs-12\">\n                    <p className=\"lead\">Invoice Details:</p>\n                </div>\n            </div>\n          \n                <TableCard\n                   columns={columns}\n                   products={InvoiceData}\n                   title={'General Invoices'}\n                />\n\n              \n            <div className=\"row\">\n               \n                <div className=\"col-xs-7\">\n\n                </div>\n               \n                <div className=\"col-xs-5\">\n\n                    <div className=\"table-responsive\">\n                        <table className=\"table\">\n                            <tbody>\n                            <tr>\n                                <th>Total:</th>\n                                <td>0 Ksh</td>\n                            </tr>\n                            </tbody></table>\n                    </div>\n                </div>\n               \n            </div>\n            \n\n          \n                    </section>\n                    </div>\n     </>\n\n\n}\nconst style={\n    button:{\n       marginTop:\"10px\",\n       marginRight:'10px',\n       border:\"0px\",\n       outline:\"0px\",\n       height:\"40px\",\n       width:\"40px\",\n       borderRadius:\"20px\",\n       border:\"1px solid #ecff\"\n    }\n}\n\nexport default Invoice;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/profile/profile.js",["470","471","472","473","474","475"],"import { useEffect, useState } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport ChatBox from \"src/views/ChatBox/ChatBox\";\nimport ModalCard from \"src/views/modal/Modal\";\nimport TableCard from \"src/views/table/TableCard\";\nimport swal from \"sweetalert\";\nimport './_.css';\nconst Profile = ({category,existingCategories,back,id,DisableUser,BlockUserPermanet,username,checkeds,email,socket})=>{\n    const [Details,setDetails]=useState([]);\n    const [status,setStatus] = useState();\n    const [save,setSave] = useState(true);\n    const [open,setOpen]=useState(false);\n    const [show, setShow] = useState(false);\n    const [isShowLoader,setShowLoader] = useState(true);\n    const [data,setData]=useState([]);\n    const [categor,setCategory] = useState('');\n   \n    const [taskid,setTaskid] =useState('');\n\n\n    const Open=(mail,taskid)=>{\n      setTaskid(taskid);\n    //  setEmail(mail);\n       setOpen(!open);\n    }\n\n    const UpdateWriterCategory =async ()=>{\n      if(categor === \"0\" || categor === \"\"){\n        swal(\"ERROR\",\"select category\",\"error\");\n        return;\n      }else{\n          const result = await ApiRequest.updateCategory(categor,id);\n          var data = result.data;\n         if(data == true){\n          swal('success',\"Category updated\",\"success\");\n         }\n      }\n\n    }\n\n    const assignTask=async (user_id,task_id)=>{\n      const result = await ApiRequest.asignTaskToUser(user_id,task_id);\n\n      var response =result.data;\n      if(response == true){\n        swal(\"task assigned\",\"succesfully\",\"success\");\n      }else{\n        swal(\"ERROR\",response,\"error\");\n      }\n     //alert(task_id);\n    }\n\n    const Close=()=>{\n      setShow(false)\n    }\n    const OpenModal=(id)=>{\n      setShow(true);\n      LoadUnassignedTask();\n    }\n\n    \nconst  Btns =(task_id)=>{\n     return <button onClick={()=>assignTask(id,task_id)} className=\"btn btn-primary\">assign task</button>;\n}\n    const AssignContent=()=>{\n      const columns = [\n        {\n          dataField: \"taskid\",\n          text: \"#id\",\n         \n        },\n        {\n          dataField: \"status\",\n          text: \"Task status\",\n        \n          sort: true\n        },\n        {\n          dataField: \"start\",\n          text: \"start date\",\n        \n          sort: true\n        },\n        {\n          dataField: \"deadline\",\n          text: \"Deadline\",\n        \n          sort: true\n        },\n       \n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n\n     \n       return <TableCard\n                 columns={columns}\n                 products={data}\n                 title={\"Assign \"+username+\" Task\"}\n              />\n    }\n  \n\n\n    const LoadUserData=async (id)=>{\n      setSave(true);\n         const result = await ApiRequest.getUserDetails(id);\n       //  console.log(result);\n\n         setDetails(result);\n        // console.log(result)\n         setSave(false);\n    }\n\n    const LoadUnassignedTask=async ()=>{\n      const filteredData=[];\n      const result = await ApiRequest.getUnAssignedTask();\n      result.data.forEach(element => {\n      var dat=  {\n          taskid:element.task_id,\n          status:element.task_status,\n          start:element.task_created_date,\n          deadline:element.task_deadline,\n           Action:Btns(element.task_id)\n        }\n\n        filteredData.push(dat);\n      });\n      setShowLoader(false);\n      setData(filteredData)\n\n    }\n\n    useEffect(()=>{\n        LoadUserData(id);\n    },[]);\n\n\n  \n    return <>\n    \n      {!save && <div className=\"container\">\n    <div className=\"main-body\">\n    <div style={{height:\"60px\",display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n            <h4 style={{marginTop:\"10px\",marginLeft:\"20px\"}}><i>Go Back</i></h4>\n             <button onClick={()=>back()}  style={{width:\"40px\",height:\"40px\",marginRight:\"10px\",marginTop:\"7px\",borderRadius:\"20px\"}} className=\"btn btn-primary fa fa-history\"></button>\n        </div>\n        \n          \n    \n          <div className=\"row gutters-sm\">\n            <div className=\"col-md-4 mb-3\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <div className=\"d-flex flex-column align-items-center text-center\">\n                    <img src={Details['result'][0].writer_profile} alt=\"Admin\" className=\"rounded-circle\" width=\"150\"/>\n                    <div className=\"mt-3\">\n                      <h4>{Details['result'][0].writer_name}</h4>\n                      <p className=\"text-secondary mb-1\">{Details['result'][0].address}</p>\n                      <p className=\"text-muted font-size-sm\">{Details['result'][0].country}</p>\n                     \n                      <button  onClick={()=>checkeds==true?BlockUserPermanet(id,username):DisableUser(id,username)} className={checkeds?\"fa fa-unlock btn btn-info\":\"fa fa-lock btn btn-warning\"}></button> \n           \n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card mt-3\">\n                <ul className=\"list-group list-group-flush\">\n                 \n                  <li className=\"list-group-item d-flex justify-content-between align-items-center flex-wrap\">\n                    <h6 className=\"mb-0\">\n                        SET CATEGORY\n                        </h6>\n                    <span className=\"text-secondary\">\n                        CATEGORY\n                    </span>\n                  </li>\n                  <li className=\"list-group-item d-flex justify-content-between align-items-center flex-wrap\">\n                      <div style={{width:\"100%\"}}>\n                      <select onChange={(e)=>setCategory(e.target.value)}  className=\"form-control\">\n         <option value=\"0\" selected>..select category..</option>\n         {category.map((item)=>{\n           return <option>{item.category_name}</option>\n         })}\n        </select>\n                      </div>\n                    \n                   \n                  </li>\n                  <li className=\"list-group-item d-flex justify-content-between align-items-center flex-wrap\">\n                    <h6 className=\"mb-0\">\n                        <button onClick={()=>UpdateWriterCategory()} style={{border:\"1px solid blue\",outline:\"none\"}} className=\"btn\">UPDATE WRITER CATEGORY</button>\n                    </h6>\n                    \n                  </li>\n                </ul>\n              </div>\n\n\n              <div className=\"card mt-3\">\n                <ul className=\"list-group list-group-flush\">\n                 \n                  <li className=\"list-group-item d-flex justify-content-between align-items-center flex-wrap\">\n                    <h6 className=\"mb-0\">\n                      CURRENT ASSIGNED TASK\n                        </h6>\n                    <span className=\"text-secondary\">\n                      TASK\n                    </span>\n                  </li>\n                  <li className=\"list-group-item d-flex justify-content-between align-items-center flex-wrap\">\n                      <div style={{width:\"100%\"}}>\n                      {Details['state']['currentAssigneTask'][0].length < 1?\"NO TASK ASSIGNED\":Details['state']['currentAssigneTask'][0].map((item,index)=>{\n                       // console.log(item);\n                        return  <div className=\"card\">\n                        <span style={{marginLeft:\"5px\"}}>name</span>\n                        <div>\n                          <button style={{outline:\"none\",border:\"0px\",marginRight:\"10px\",marginBottom:\"5px\",marginLeft:\"5px\"}} className=\"badge badge-info\">{item.task_title}</button>\n                          <button style={{outline:\"none\",border:\"0px\",marginRight:\"10px\",marginBottom:\"5px\"}} onClick={()=>Open(Details['result'][0].writer_email,item.task_id)} className=\"badge badge-info\">Chat</button>\n                       \n                        </div>\n                        \n\n                    </div>\n                      })}\n                     \n\n                         <button style={{width:\"100%\"}}  onClick={()=>OpenModal(id)} className=\"btn btn-info\">Assign New Task</button>\n                    \n                        \n                      </div>\n                    \n                   \n                  </li>\n                 \n                </ul>\n              </div>\n\n\n\n            </div>\n            <div className=\"col-md-8\">\n              <div className=\"card mb-3\">\n                <div className=\"card-body\">\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <h6 className=\"mb-0\">Full Name</h6>\n                    </div>\n                    <div className=\"col-sm-9 text-secondary\">\n                      {Details['result'][0].writer_name}\n                    </div>\n                  </div>\n                 <hr/>\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <h6 className=\"mb-0\">Email</h6>\n                    </div>\n                    <div className=\"col-sm-9 text-secondary\">\n                    {Details['result'][0].writer_email}\n                    </div>\n                  </div>\n                 <hr/>\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <h6 className=\"mb-0\">Phone</h6>\n                    </div>\n                    <div className=\"col-sm-9 text-secondary\">\n                    {Details['result'][0].phone}\n                    </div>\n                  </div>\n                 <hr/>\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <h6 className=\"mb-0\">Mobile</h6>\n                    </div>\n                    <div className=\"col-sm-9 text-secondary\">\n                    {Details['result'][0].phone}\n                    </div>\n                  </div>\n                 <hr/>\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <h6 className=\"mb-0\">Address</h6>\n                    </div>\n                    <div className=\"col-sm-9 text-secondary\">\n                       \n                    {Details['result'][0].address}\n                    </div>\n                  </div>\n                 <hr/>\n                 \n                </div>\n              </div>\n\n              <div className=\"row gutters-sm\">\n                <div className=\"col-sm-6 mb-3\">\n                  <div className=\"card h-100\">\n                    <div className=\"card-body\">\n                      <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">Writer</i>Account Status</h6>\n                      <small>CompletedTask({Details['state']['completedTask'][0].count} of {Details['state']['completedTask'][0].of})</small>\n                      <div className=\"progress mb-3\" style={{height:\"5px\"}}>\n                        <div className=\"progress-bar bg-primary\" role=\"progressbar\" style={{width:Details['state']['completedTask'][0].value+\"%\"}} aria-valuenow=\"80\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                      <small>Payment Progress</small>\n                      <div className=\"progress mb-3\" style={{height:\"5px\"}}>\n                        <div className=\"progress-bar bg-primary\" role=\"progressbar\" style={{width:Details['state']['paymentProgress'][0].value+\"%\"}} aria-valuenow=\"72\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                      <small>Assigned Task({Details['state']['assignedTask'][0].count} of {Details['state']['assignedTask'][0].of})</small>\n                      <div className=\"progress mb-3\" style={{height:\"5px\"}}>\n                        <div className=\"progress-bar bg-primary\" role=\"progressbar\" style={{width:Details['state']['assignedTask'][0].value+\"%\"}} aria-valuenow=\"89\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                      <small>Attempted Task({Details['state']['attemptedTask'][0].count} of {Details['state']['attemptedTask'][0].of})</small>\n                      <div className=\"progress mb-3\" style={{height:\"5px\"}}>\n                        <div className=\"progress-bar bg-primary\" role=\"progressbar\" style={{width:Details['state']['attemptedTask'][0].value+\"%\"}}aria-valuenow=\"55\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                     \n                    </div>\n                  </div>\n                </div>\n                <div className=\"col-sm-6 mb-3\">\n                  <div className=\"card h-100\">\n                    <div className=\"card-body\" style={{overflowY:\"auto\"}}>\n                      <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">Writer</i>Existing Categories</h6>\n                     \n                      \n                     <button style={{width:\"100%\"}} className=\"btn btn-info\">{Details['result'][0].writer_category}</button>\n                    \n                     <hr/>\n\n                     <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">Writer</i>Total Earned</h6>\n                      <h2> <small>$ {Details['state'].totalCashEarned[0]}</small></h2>\n                    </div>\n                    \n                  </div>\n                </div>\n               \n              </div>\n\n\n\n            </div>\n          </div>\n\n        </div>\n    </div>}\n\n    { save && <div className=\"spinner\">\n    \n  \n    <Loader\n  type=\"Circles\"\n  color=\"#00BFFF\"\n  height={100}\n  width={100}\n  //3 secs\n  />\n  </div>} \n\n  {open && <ChatBox\n    open={open}\n    SetOpen={Open}\n    email={email}\n    socket={socket}\n    taskid={taskid}\n   />}\n\n<ModalCard\n       Show={show}\n       Close={Close}\n       isShowLoader={isShowLoader}\n       ButtonName={username}\n       content={<AssignContent/>}\n      \n     /> \n          </>\n}\n\nexport default Profile;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/submited/submited.js",["476"],"//import { cilSortNumericDown } from \"@coreui/icons\";\nimport { useEffect, useState } from \"react\";\nimport ModalCard from \"src/views/modal/Modal\";\nimport TableCard from \"src/views/table/TableCard\";\nimport swal from \"sweetalert\";\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport SingeleTask from \"../../TaskDetails/SingleTaskDetails\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport Urls from \"src/Api/urls\";\n\n\nconst NewTaskSubmited = ()=>{\n\n  const [Show,setShow]=useState(false);\n  const [showRedoneModal,setRedoneModal]= useState(false);\n  const [showSingleTask,setShowSingleTask]= useState(false);\n  const [newSubmited,setNewSubmited] = useState([]);\n  const [taskId,setTaskId] = useState('');\n  const [revisionContent,setRevision]=useState('');\n \n\n  const [task,setTask]=useState([]);\n\n  const OpenModal =(id,invoice)=>{\n       setTaskId(id);\n      setTask({taskid:id,invoice:invoice});\n      setShow(true);\n\n    //  console.log(task);\n      \n      \n  }\n\n  const Close=()=>{\n      setShow(false);\n      setTask([]);\n  }\n  const CloseRedone=()=>{\n      setRedoneModal(false);\n      setShow(true)\n  }\n\n  const SubmitRevisionDetails=async ()=>{\n       \n    if(revisionContent === \"\"){\n    \n      swal(`Error`, \"provide revision details\", \"error\");\n      return;\n    }\n \n    var result = await ApiRequest.sendRevisionRequest(taskId,revisionContent);\n\n    if(result.data === \"done\"){\n      swal(`REVISION REQUEST`, \"Sent Succesfully\", \"success\")\n    \n      setShow(false);\n      setRedoneModal(false);\n      setTask([]);\n      LoadNewSubmitedTask();\n      return\n    }\n    else{\n      swal(`Error`, \"process failed\", \"error\");\n    }\n\n   \n   \n   \n  }\n  //{`/* <span style={{cursor:\"pointer\"}} className=\"badge badge-primary badge-pill\">Download</span>*/'}\n  const Content =()=>{\n\n    const [submitedFiles,setSubmitedFiles] = useState([]);\n\n      const loadFiles = async ()=>{\n            const result = await ApiRequest.getSubmitedFiles(taskId);\n            setSubmitedFiles(result.data);\n      }\n     \n      if(Show){\n        loadFiles();\n      }\n  \n      return <>\n <ul className=\"list-group\">\n    {submitedFiles.map((item)=>{\n      \n     // tbl_task_submited_url\n     return <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n           {item.tbl_task_submited_url.split('uploads/')[1]}\n           <a style={{cursor:\"pointer\"}}  href={Urls.fileDownloadUrl+item.tbl_task_submited_url.split('uploads/')[1]} className=\"badge badge-primary badge-pill\">Download</a>\n  \n          </li>\n      \n    })}\n \n</ul>\n       </>\n  }\n\n  const RevisionContenT=()=>{\n\n    \n\n      return <>\n               {<h6>REVISION REQUEST FOR ORDER {task['taskid']}</h6>}\n               <br/>\n                 <label>Revision Details</label>\n               <CKEditor\n       \n       editor={ ClassicEditor }\n      // data={message}\n    \n       onReady={ editor => {\n           // You can store the \"editor\" and use when it is needed.\n           //console.log( 'Editor is ready to use!', editor );\n           editor.editing.view.change((writer) => {\n            writer.setStyle(\n                \"height\",\n                \"300px\",\n                editor.editing.view.document.getRoot()\n            );\n            });\n       } }\n       onChange={ ( event, editor ) => {\n           const data = editor.getData();\n                 \n          setRevision(data);\n       } }\n      \n   />\n            </>\n  }\n\n  const RequestRedone=()=>{\n      setShow(false);\n      setRedoneModal(true);\n\n  }\n\n  const OpenSingleTaskDetails=(id,invoice)=>{\n    setTask({taskid:id,invoice:invoice});\n      setTaskId(id);\n      setShowSingleTask(!showSingleTask);\n     \n  }\n\n    const OpenMoreModal=(id,invoice)=>{\n      swal(`INVOICE +${invoice}`,{\n            buttons:{\n                file:{\n                    text:\"SUBMITED FILES\",\n                    value:\"file\",\n                    className:\"btn btn-outline-info\"\n                },\n               \n                details:{\n                    text:\"ORDER DETAILS\",\n                    value:\"details\",\n                    className:\"btn btn-info\"\n                },\n            }\n      })\n      .then((value)=>{\n          switch (value) {\n              case \"file\":\n                  OpenModal(id,invoice);\n                  break;\n               \n                    case \"details\":\n                          OpenSingleTaskDetails(id,invoice);\n                        break;  \n          \n              default:\n                  break;\n          }\n      })\n    }\n    const Buttons=(id,invoice)=>{\n        return <button onClick={()=>OpenMoreModal(id,invoice)} className=\"btn btn-primary\">More</button>\n     }\n\n     const MarkTaskcomplete = async ()=>{\n         const result = await ApiRequest.markTaskCompleted(taskId);\n       \n\n         if(result.data === \"done\"){\n           swal(`Task Completed`, \" Succesfully\", \"success\")\n         \n           setShow(false);\n           setRedoneModal(false);\n           setTask([]);\n           LoadNewSubmitedTask();\n           return\n         }else{\n          swal(`Error`,result.data, \"error\")\n         }\n\n     }\n\n   const AcceptOrder=()=>{\n       swal(`You Are About To Mark Order ${task['taskid']} As Complete`,{\n           buttons:{\n               cancel:\"Cancel !\",\n               complete:{\n                   text:\"COMPLETED?\",\n                    value:\"complete\",\n                    className:\"btn btn-success\"\n               }\n           }\n       })\n       .then((value)=>{\n           switch (value) {\n               case 'complete':\n                MarkTaskcomplete();\n                     ///swal(\"ORDER COMPLETED\",\"succesfully\",\"success\");\n                setShow(false);\n                setRedoneModal(false);\n                   break;\n           \n               default:\n                   swal(\"Process Cancelled \",\"succesfully\",\"success\");\n                   break;\n           }\n       })\n   }  \n\n     const Btns=()=>{\n        return <> \n                  <button onClick={()=>RequestRedone()} className=\"btn btn-info\">REQUEST REDONE</button>\n                  <button onClick={()=>AcceptOrder()}  className=\"btn btn-success\">ACCEPT ORDER</button>\n                 \n              </>\n     }\n  \n\n const LoadNewSubmitedTask =async ()=>{\n   const result = await ApiRequest.getNewSubmitedFiles();\n\n   var organisedData=[];\n       result.data.forEach(element => {\n              var dat ={\n                \"#taskId\":element.task_id,\n                username:element.writer_display_name,\n                email:element.writer_email,\n                taskTitle:element.task_title,\n                status:<span className=\"badge badge-info\">{element.task_status}</span>,\n                edate:element.taskl_accepted_date,\n                action:Buttons(element.task_id,element.task_id)\n              }\n\n              organisedData.push(dat);\n       });\n\n       setNewSubmited(organisedData);\n\n\n }   \n \n useEffect(()=>{\n   LoadNewSubmitedTask();\n },[]);\n\n\n\n\n    const columns=[\n        {\n            dataField: \"#taskId\",\n            text: \"#taskId\",\n           \n          },\n          {\n            dataField: \"username\",\n            text: \"writername\",\n           \n          },\n          {\n            dataField: \"email\",\n            text: \"writer email\",\n           \n          },\n          {\n            dataField: \"taskTitle\",\n            text: \"Task Title\",\n           \n          },\n          {\n            dataField: \"status\",\n            text: \"status\",\n           \n          },\n          {\n            dataField: \"edate\",\n            text: \"DeadLine\",\n           \n          },\n          {\n            dataField: \"action\",\n            text: \"Actions\",\n           \n          },\n    ]\n  \n\n    return <>\n          {showSingleTask && <SingeleTask id={task['taskid']} isAccept={false} closeTask={OpenSingleTaskDetails}/>}\n           <ModalCard\n            Show={Show} Close={Close}\n            showBtn={false}\n            Buttons={Btns}\n            content={Content()}\n             />\n\n             <ModalCard\n              Show={showRedoneModal}\n               ButtonName={\"SEND REVISION REQUEST\"}\n               content={RevisionContenT()}\n               Save={SubmitRevisionDetails}\n               Close={CloseRedone}\n\n             />\n        {!showSingleTask &&  <TableCard products={newSubmited} columns={columns} title={\"NEW SUBMITED TASK\"}/>}\n     </>\n  \n\n}\n\nexport default NewTaskSubmited;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/Redones/redones.js",["477","478"],"import { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport ChatBox from \"src/views/ChatBox/ChatBox\";\nimport TableCard from \"src/views/table/TableCard\";\nimport SingeleTask from \"../../TaskDetails/SingleTaskDetails\";\n\nconst TaskBeingRedone = ({socket})=>{\n  const [open,setOpen]=useState(false);\n  const [taskDetails,setTaskDetails] = useState(false);\n  const [taskId,setTaskId]=useState('');\n  const [Redone,setRedone]=useState([]);\n  const [show,setShow] = useState(false);\n  const [email,setEmail] = useState('');\n  const [taskid,setTaskid] =useState('');\n\n  const Open=(mail,taskid)=>{\n    setEmail(mail);\n    setTaskid(taskid);\n    setOpen(!open);\n }\n\n const CloseTask=()=>{\n  setTaskDetails(false);\n}\n\nconst getOrdersBeingRevised = async ()=>{\n  const result = await ApiRequest.getOrdersBeingRevised();\n   const organisedData=[];\n   result.data.forEach(element => {\n         var dat={\n          \"#taskId\":element.task_id,\n          title:element.task_title,\n          writerName:element.writer_display_name,\n          email:element.writer_email,\n          status:element.task_status,\n          category:element.writer_category,\n          sdate:element.taskl_accepted_date,\n          ddate:element.task_deadline,\n          Action:<>\n          <button onClick={()=>TaskDetails(element.task_id)} className=\"btn btn-info\">Task Details</button>\n           <button onClick={()=>Open(element.writer_email,element.task_id)} style={{marginLeft:\"2px\"}}  className=\"btn btn-success fa fa-comment\"></button>\n            </>\n         }\n        setShow(true);\n         organisedData.push(dat);\n   });\n\nsetRedone(organisedData);\n // console.log(result.data);\n}\n\nuseEffect(()=>{\n   getOrdersBeingRevised();\n},[])\n\nconst TaskDetails=(taskId)=>{\n  setTaskId(taskId);\n   setTaskDetails(true);\n}\n \n    const columns = [\n        {\n          dataField: \"#taskId\",\n          text: \"#taskId\",\n         \n        },\n        {\n          dataField: \"title\",\n          text: \"Title\",\n        \n          sort: true\n        },\n        {\n          dataField: \"writerName\",\n          text: \"Writer Username\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n        {\n          \n            dataField: \"category\",\n            text: \"Category\",\n          \n          \n        },\n        {\n          \n          dataField: \"sdate\",\n          text: \"Submited-Date\",\n        \n        \n      },\n      {\n          \n        dataField: \"ddate\",\n        text: \"Deadline\",\n      \n      \n      },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n      const products=[\n          {\n            \"#taskId\":\"7888888\",\n            title:\"Lorem ipsume\",\n            writerName:\"John \",\n            email:\"airotony8@gmail.com\",\n            status:\"Revision\",\n            category:\"Lorem\",\n            sdate:\"2018-9-10\",\n            ddate:\"2019-10-10\",\n            Action:<><button onClick={()=>TaskDetails(2)} className=\"btn btn-info\">Task Details</button>\n                      <button onClick={()=>Open()} style={{marginLeft:\"2px\"}}  className=\"btn btn-success fa fa-comment\"></button>\n              </>\n\n          }\n      ]\n    return <>\n            {!taskDetails && show && <> <TableCard \n             products={Redone}\n             columns={columns}\n              title={\"TASK BEING REVISED\"}\n             />\n             \n             {open && <ChatBox\n    open={open}\n    SetOpen={Open}\n    email={email}\n    socket={socket}\n    taskid={taskid}\n   />}\n             </>\n            }\n            \n            {taskDetails &&<SingeleTask id={taskId} closeTask={CloseTask} isAccept={false}/>}\n          </>\n          \n}\n\nexport default TaskBeingRedone;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/post/dropzone/Dropzone.js",["479","480"],"import React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './Dropzone.css';\n\nconst Dropzone = ({validFiles,setValidFiles}) => {\n    const fileInputRef = useRef();\n    const modalImageRef = useRef();\n    const modalRef = useRef();\n    const progressRef = useRef();\n    const uploadRef = useRef();\n    const uploadModalRef = useRef();\n    const [selectedFiles, setSelectedFiles] = useState([]);\n    //const [validFiles, setValidFiles] = useState([]);\n\n    const [unsupportedFiles, setUnsupportedFiles] = useState([]);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        let filteredArr = selectedFiles.reduce((acc, current) => {\n            const x = acc.find(item => item.name === current.name);\n            if (!x) {\n              return acc.concat([current]);\n            } else {\n              return acc;\n            }\n        }, []);\n        setValidFiles([...filteredArr]);\n        \n    }, [selectedFiles]);\n\n    const preventDefault = (e) => {\n        e.preventDefault();\n        // e.stopPropagation();\n    }\n\n    const dragOver = (e) => {\n        preventDefault(e);\n    }\n\n    const dragEnter = (e) => {\n        preventDefault(e);\n    }\n\n    const dragLeave = (e) => {\n        preventDefault(e);\n    }\n\n    const fileDrop = (e) => {\n        preventDefault(e);\n        const files = e.dataTransfer.files;\n        if (files.length) {\n            handleFiles(files);\n        }\n    }\n\n    const filesSelected = () => {\n        if (fileInputRef.current.files.length) {\n            handleFiles(fileInputRef.current.files);\n        }\n    }\n\n    const fileInputClicked = () => {\n        fileInputRef.current.click();\n    }\n\n    const handleFiles = (files) => {\n        for(let i = 0; i < files.length; i++) {\n            if (validateFile(files[i])) {\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n            } else {\n                files[i]['invalid'] = true;\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n                setErrorMessage('File type not permitted');\n                setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n            }\n        }\n    }\n\n    const validateFile = (file) => {\n  \n        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/x-icon','application/pdf','application/doc','application/docx',\n           'application/msword',\n           'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n           'application/zip'\n    ];\n   \n        if (validTypes.indexOf(file.type) === -1) {\n            return false;\n        }\n\n        return true;\n    }\n\n    const fileSize = (size) => {\n        if (size === 0) {\n          return '0 Bytes';\n        }\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        const i = Math.floor(Math.log(size) / Math.log(k));\n        return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    const fileType = (fileName) => {\n        return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n    }\n\n    const removeFile = (name) => {\n        const index = validFiles.findIndex(e => e.name === name);\n        const index2 = selectedFiles.findIndex(e => e.name === name);\n        const index3 = unsupportedFiles.findIndex(e => e.name === name);\n        validFiles.splice(index, 1);\n        selectedFiles.splice(index2, 1);\n        setValidFiles([...validFiles]);\n        setSelectedFiles([...selectedFiles]);\n        if (index3 !== -1) {\n            unsupportedFiles.splice(index3, 1);\n            setUnsupportedFiles([...unsupportedFiles]);\n        }\n    }\n\n    const openImageModal = (file) => {\n        const reader = new FileReader();\n        modalRef.current.style.display = \"block\";\n        reader.readAsDataURL(file);\n        reader.onload = function(e) {\n            modalImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n        }\n    }\n\n    const closeModal = () => {\n        modalRef.current.style.display = \"none\";\n        modalImageRef.current.style.backgroundImage = 'none';\n    }\n\n    const uploadFiles = async () => {\n        uploadModalRef.current.style.display = 'block';\n        uploadRef.current.innerHTML = 'File(s) Uploading...';\n        for (let i = 0; i < validFiles.length; i++) {\n            const formData = new FormData();\n            formData.append('image', validFiles[i]);\n            formData.append('key', '');\n\n            axios.post('https://api.imgbb.com/1/upload', formData, {\n                onUploadProgress: (progressEvent) => {\n                    const uploadPercentage = Math.floor((progressEvent.loaded / progressEvent.total) * 100);\n                    progressRef.current.innerHTML = `${uploadPercentage}%`;\n                    progressRef.current.style.width = `${uploadPercentage}%`;\n\n                    if (uploadPercentage === 100) {\n                        uploadRef.current.innerHTML = 'File(s) Uploaded';\n                        validFiles.length = 0;\n                        setValidFiles([...validFiles]);\n                        setSelectedFiles([...validFiles]);\n                        setUnsupportedFiles([...validFiles]);\n                    }\n                },\n            })\n            .catch(() => {\n                uploadRef.current.innerHTML = `<span class=\"error\">Error Uploading File(s)</span>`;\n                progressRef.current.style.backgroundColor = 'red';\n            })\n        }\n    }\n\n    const closeUploadModal = () => {\n        uploadModalRef.current.style.display = 'none';\n    }\n\n\n    return (\n        <>\n            <div className=\"containers\">\n              \n                {unsupportedFiles.length ? <p>Please remove all unsupported files.</p> : ''}\n                <div className=\"drop-container\"\n                    onDragOver={dragOver}\n                    onDragEnter={dragEnter}\n                    onDragLeave={dragLeave}\n                    onDrop={fileDrop}\n                    onClick={fileInputClicked}\n                >\n                    <div className=\"drop-message\">\n                        <div className=\"upload-icon\"></div>\n                        Drag & Drop files here or click to select file(s)\n                    </div>\n                    <input\n                        ref={fileInputRef}\n                        className=\"file-input\"\n                        type=\"file\"\n                        multiple\n                        onChange={filesSelected}\n                    />\n                </div>\n                <div className=\"file-display-container\">\n                    {\n                        validFiles.map((data, i) => \n                            <div className=\"file-status-bar\" key={i}>\n                                <div onClick={!data.invalid ? () => openImageModal(data) : () => removeFile(data.name)}>\n                                    <div className=\"file-type-logo\"></div>\n                                    <div className=\"file-type\">{fileType(data.name)}</div>\n                                    <span className={`file-name ${data.invalid ? 'file-error' : ''}`}>{data.name}</span>\n                                    <span className=\"file-size\">({fileSize(data.size)})</span> {data.invalid && <span className='file-error-message'>({errorMessage})</span>}\n                                </div>\n                                <div className=\"file-remove\" onClick={() => removeFile(data.name)}>X</div>\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n            <div className=\"modal\" ref={modalRef}>\n                <div className=\"overlay\"></div>\n                <span className=\"close\" onClick={(() => closeModal())}>X</span>\n                <div className=\"modal-image\" ref={modalImageRef}></div>\n            </div>\n\n            <div style={{display:\"none\"}} className=\"upload-modal\" ref={uploadModalRef}>\n                <div className=\"overlay\"></div>\n                <div className=\"close\" onClick={(() => closeUploadModal())}>X</div>\n                <div className=\"progress-container\">\n                    <span ref={uploadRef}></span>\n                    <div className=\"progress\">\n                        <div className=\"progress-bar\" ref={progressRef}></div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Dropzone;\n","/Users/tony/Documents/Projects/react/Writer/admin/src/reusable/index.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/CreateAdmins.js",["481"],"import Loader from \"react-loader-spinner\";\n\n\nconst CreateAdmin = ({isShowLoader,\n    email,\n    setEmail,\n    password,\n    setPassword,\n    ConfirmPassword,\n    setConfirmPassword,\n    country,\n    setCountry,\n    address,\n    setAdress,\n    phone,\n    setPhone,\n    category,\n    setCategory,\n    username,\n    setUsername,\n    isShowButton=false,\n    Save\n    })=>{\n    \n    return <>\n         <form>\n             \n             <div style={{\n                  display:\"block\",\n                  cursor:\"pointer\",\n                   zIndex:99,\n                  position:\"absolute\",\n                  top:\"40%\",\n                  left:'40%',\n                  right:\"40%\",\n                  \n             }}>\n                 \n                {isShowLoader &&  <Loader\n                   type=\"Circles\"\n                   color=\"#00BFFF\"\n                    height={100}\n                    width={100}\n      \n                  />}\n               \n             </div>\n        \n  <div className=\"form-row\">\n    <div className=\"form-group col-md-6\">\n      <label for=\"inputEmail4\">Email</label>\n      <input type=\"email\" className=\"form-control\" id=\"inputEmail4\" value={email} onChange={(e)=>setEmail(e.target.value)} placeholder=\"Email\"/>\n    </div>\n    <div className=\"form-group col-md-6\">\n      <label for=\"inputPassword4\">Username</label>\n      <input type=\"text\" className=\"form-control\" value={username} onChange={(e)=>setUsername(e.target.value)} id=\"inputPassword4\" placeholder=\"Username\"/>\n    </div>\n  </div>\n  <div className=\"form-row\">\n    <div className=\"form-group col-md-6\">\n      <label for=\"inputEmail4\">Password</label>\n      <input type=\"password\" value={password} onChange={(e)=>setPassword(e.target.value)} className=\"form-control\" id=\"inputEmail4\" placeholder=\"password\"/>\n    </div>\n    <div className=\"form-group col-md-6\">\n      <label for=\"inputPassword5\">Confirm Password</label>\n      <input type=\"password\" className=\"form-control\" value={ConfirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)} id=\"inputPassword5\" placeholder=\"ConfirmPassword\"/>\n    </div>\n  </div>\n  <div className=\"form-group\">\n    <label for=\"inputAddress\">COUNTRY</label>\n   \n    <input  value={country} type=\"text\" className=\"form-control\"   onChange={(e)=>setCountry(e.target.value)} style={{height:\"50px\"}}   list=\"country\" name=\"country\" placeholder=\"Country\" className=\"form-control me-2\" />\n   <datalist id=\"country\">\n        <option value=\"Afghanistan\" />\n        <option value=\"Albania\" />\n        <option value=\"Algeria\" />\n        <option value=\"American Samoa\" />\n        <option value=\"Andorra\" />\n        <option value=\"Angola\" />\n        <option value=\"Anguilla\" />\n        <option value=\"Antarctica\" />\n        <option value=\"Antigua and Barbuda\" />\n        <option value=\"Argentina\" />\n        <option value=\"Armenia\" />\n        <option value=\"Aruba\" />\n        <option value=\"Australia\" />\n        <option value=\"Austria\" />\n        <option value=\"Azerbaijan\" />\n        <option value=\"Bahamas\" />\n        <option value=\"Bahrain\" />\n        <option value=\"Bangladesh\" />\n        <option value=\"Barbados\" />\n        <option value=\"Belarus\" />\n        <option value=\"Belgium\" />\n        <option value=\"Belize\" />\n        <option value=\"Benin\" />\n        <option value=\"Bermuda\" />\n        <option value=\"Bhutan\" />\n        <option value=\"Bolivia\" />\n        <option value=\"Bosnia and Herzegovina\" />\n        <option value=\"Botswana\" />\n        <option value=\"Bouvet Island\" />\n        <option value=\"Brazil\" />\n        <option value=\"British Indian Ocean Territory\" />\n        <option value=\"Brunei Darussalam\" />\n        <option value=\"Bulgaria\" />\n        <option value=\"Burkina Faso\" />\n        <option value=\"Burundi\" />\n        <option value=\"Cambodia\" />\n        <option value=\"Cameroon\" />\n        <option value=\"Canada\" />\n        <option value=\"Cape Verde\" />\n        <option value=\"Cayman Islands\" />\n        <option value=\"Central African Republic\" />\n        <option value=\"Chad\" />\n        <option value=\"Chile\" />\n        <option value=\"China\" />\n        <option value=\"Christmas Island\" />\n        <option value=\"Cocos (Keeling) Islands\" />\n        <option value=\"Colombia\" />\n        <option value=\"Comoros\" />\n        <option value=\"Congo\" />\n        <option value=\"Congo, The Democratic Republic of The\" />\n        <option value=\"Cook Islands\" />\n        <option value=\"Costa Rica\" />\n        <option value=\"Cote D'ivoire\" />\n        <option value=\"Croatia\" />\n        <option value=\"Cuba\" />\n        <option value=\"Cyprus\" />\n        <option value=\"Czech Republic\" />\n        <option value=\"Denmark\" />\n        <option value=\"Djibouti\" />\n        <option value=\"Dominica\" />\n        <option value=\"Dominican Republic\" />\n        <option value=\"Ecuador\" />\n        <option value=\"Egypt\" />\n        <option value=\"El Salvador\" />\n        <option value=\"Equatorial Guinea\" />\n        <option value=\"Eritrea\" />\n        <option value=\"Estonia\" />\n        <option value=\"Ethiopia\" />\n        <option value=\"Falkland Islands (Malvinas)\" />\n        <option value=\"Faroe Islands\" />\n        <option value=\"Fiji\" />\n        <option value=\"Finland\" />\n        <option value=\"France\" />\n        <option value=\"French Guiana\" />\n        <option value=\"French Polynesia\" />\n        <option value=\"French Southern Territories\" />\n        <option value=\"Gabon\" />\n        <option value=\"Gambia\" />\n        <option value=\"Georgia\" />\n        <option value=\"Germany\" />\n        <option value=\"Ghana\" />\n        <option value=\"Gibraltar\" />\n        <option value=\"Greece\" />\n        <option value=\"Greenland\" />\n        <option value=\"Grenada\" />\n        <option value=\"Guadeloupe\" />\n        <option value=\"Guam\" />\n        <option value=\"Guatemala\" />\n        <option value=\"Guinea\" />\n        <option value=\"Guinea-bissau\" />\n        <option value=\"Guyana\" />\n        <option value=\"Haiti\" />\n        <option value=\"Heard Island and Mcdonald Islands\" />\n        <option value=\"Holy See (Vatican City State)\" />\n        <option value=\"Honduras\" />\n        <option value=\"Hong Kong\" />\n        <option value=\"Hungary\" />\n        <option value=\"Iceland\" />\n        <option value=\"India\" />\n        <option value=\"Indonesia\" />\n        <option value=\"Iran, Islamic Republic of\" />\n        <option value=\"Iraq\" />\n        <option value=\"Ireland\" />\n        <option value=\"Israel\" />\n        <option value=\"Italy\" />\n        <option value=\"Jamaica\" />\n        <option value=\"Japan\" />\n        <option value=\"Jordan\" />\n        <option value=\"Kazakhstan\" />\n        <option value=\"Kenya\" />\n        <option value=\"Kiribati\" />\n        <option value=\"Korea, Democratic People's Republic of\" />\n        <option value=\"Korea, Republic of\" />\n        <option value=\"Kuwait\" />\n        <option value=\"Kyrgyzstan\" />\n        <option value=\"Lao People's Democratic Republic\" />\n        <option value=\"Latvia\" />\n        <option value=\"Lebanon\" />\n        <option value=\"Lesotho\" />\n        <option value=\"Liberia\" />\n        <option value=\"Libyan Arab Jamahiriya\" />\n        <option value=\"Liechtenstein\" />\n        <option value=\"Lithuania\" />\n        <option value=\"Luxembourg\" />\n        <option value=\"Macao\" />\n        <option value=\"Macedonia, The Former Yugoslav Republic of\" />\n        <option value=\"Madagascar\" />\n        <option value=\"Malawi\" />\n        <option value=\"Malaysia\" />\n        <option value=\"Maldives\" />\n        <option value=\"Mali\" />\n        <option value=\"Malta\" />\n        <option value=\"Marshall Islands\" />\n        <option value=\"Martinique\" />\n        <option value=\"Mauritania\" />\n        <option value=\"Mauritius\" />\n        <option value=\"Mayotte\" />\n        <option value=\"Mexico\" />\n        <option value=\"Micronesia, Federated States of\" />\n        <option value=\"Moldova, Republic of\" />\n        <option value=\"Monaco\" />\n        <option value=\"Mongolia\" />\n        <option value=\"Montserrat\" />\n        <option value=\"Morocco\" />\n        <option value=\"Mozambique\" />\n        <option value=\"Myanmar\" />\n        <option value=\"Namibia\" />\n        <option value=\"Nauru\" />\n        <option value=\"Nepal\" />\n        <option value=\"Netherlands\" />\n        <option value=\"Netherlands Antilles\" />\n        <option value=\"New Caledonia\" />\n        <option value=\"New Zealand\" />\n        <option value=\"Nicaragua\" />\n        <option value=\"Niger\" />\n        <option value=\"Nigeria\" />\n        <option value=\"Niue\" />\n        <option value=\"Norfolk Island\" />\n        <option value=\"Northern Mariana Islands\" />\n        <option value=\"Norway\" />\n        <option value=\"Oman\" />\n        <option value=\"Pakistan\" />\n        <option value=\"Palau\" />\n        <option value=\"Palestinian Territory, Occupied\" />\n        <option value=\"Panama\" />\n        <option value=\"Papua New Guinea\" />\n        <option value=\"Paraguay\" />\n        <option value=\"Peru\" />\n        <option value=\"Philippines\" />\n        <option value=\"Pitcairn\" />\n        <option value=\"Poland\" />\n        <option value=\"Portugal\" />\n        <option value=\"Puerto Rico\" />\n        <option value=\"Qatar\" />\n        <option value=\"Reunion\" />\n        <option value=\"Romania\" />\n        <option value=\"Russian Federation\" />\n        <option value=\"Rwanda\" />\n        <option value=\"Saint Helena\" />\n        <option value=\"Saint Kitts and Nevis\" />\n        <option value=\"Saint Lucia\" />\n        <option value=\"Saint Pierre and Miquelon\" />\n        <option value=\"Saint Vincent and The Grenadines\" />\n        <option value=\"Samoa\" />\n        <option value=\"San Marino\" />\n        <option value=\"Sao Tome and Principe\" />\n        <option value=\"Saudi Arabia\" />\n        <option value=\"Senegal\" />\n        <option value=\"Serbia and Montenegro\" />\n        <option value=\"Seychelles\" />\n        <option value=\"Sierra Leone\" />\n        <option value=\"Singapore\" />\n        <option value=\"Slovakia\" />\n        <option value=\"Slovenia\" />\n        <option value=\"Solomon Islands\" />\n        <option value=\"Somalia\" />\n        <option value=\"South Africa\" />\n        <option value=\"South Georgia and The South Sandwich Islands\" />\n        <option value=\"Spain\" />\n        <option value=\"Sri Lanka\" />\n        <option value=\"Sudan\" />\n        <option value=\"Suriname\" />\n        <option value=\"Svalbard and Jan Mayen\" />\n        <option value=\"Swaziland\" />\n        <option value=\"Sweden\" />\n        <option value=\"Switzerland\" />\n        <option value=\"Syrian Arab Republic\" />\n        <option value=\"Taiwan, Province of China\" />\n        <option value=\"Tajikistan\" />\n        <option value=\"Tanzania, United Republic of\" />\n        <option value=\"Thailand\" />\n        <option value=\"Timor-leste\" />\n        <option value=\"Togo\" />\n        <option value=\"Tokelau\" />\n        <option value=\"Tonga\" />\n        <option value=\"Trinidad and Tobago\" />\n        <option value=\"Tunisia\" />\n        <option value=\"Turkey\" />\n        <option value=\"Turkmenistan\" />\n        <option value=\"Turks and Caicos Islands\" />\n        <option value=\"Tuvalu\" />\n        <option value=\"Uganda\" />\n        <option value=\"Ukraine\" />\n        <option value=\"United Arab Emirates\" />\n        <option value=\"United Kingdom\" />\n        <option value=\"United States\" />\n        <option value=\"United States Minor Outlying Islands\" />\n        <option value=\"Uruguay\" />\n        <option value=\"Uzbekistan\" />\n        <option value=\"Vanuatu\" />\n        <option value=\"Venezuela\" />\n        <option value=\"Viet Nam\" />\n        <option value=\"Virgin Islands, British\" />\n        <option value=\"Virgin Islands, U.S\" />\n        <option value=\"Wallis and Futuna\" />\n        <option value=\"Western Sahara\" />\n        <option value=\"Yemen\" />\n        <option value=\"Zambia\" />\n        <option value=\"Zimbabwe\" />\n    </datalist>\n                  \n\n\n  </div>\n  <div className=\"form-group\">\n    <label for=\"inputAddress2\">Address 2</label>\n    <input type=\"text\" className=\"form-control\" value={address} onChange={(e)=>setAdress(e.target.value)} id=\"inputAddress2\" placeholder=\"Apartment, studio, or floor\"/>\n  </div>\n  <div className=\"form-row\">\n    <div className=\"form-group col-md-12\">\n      <label for=\"inputCity\">Phone</label>\n      <input type=\"tel\" value={phone} onChange={(e)=>setPhone(e.target.value)} className=\"form-control\" placeholder=\"phone\" id=\"inputCity\"/>\n    </div>\n   \n   \n  </div>\n  {isShowButton && <button type=\"button\" onClick={()=>Save()} className=\"btn btn-info\">UPDATE DETAILS</button>}\n \n</form>\n    </>\n}\n\nexport default CreateAdmin;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/dynamicForm.js",["482","483"],"import React, { useState } from 'react'\n//import './styles.css'\nconst DynamicForm = ()=>{\n    \n\n\n\n\n    const [formValues, setFormValues] = useState([{ name: \"\"}])\n\n    let handleChange = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][e.target.name] = e.target.value;\n        setFormValues(newFormValues);\n      }\n    \n    let addFormFields = () => {\n        setFormValues([...formValues, { name: \"\"}])\n      }\n    \n    let removeFormFields = (i) => {\n        let newFormValues = [...formValues];\n        newFormValues.splice(i, 1);\n        setFormValues(newFormValues)\n    }\n    \n    let handleSubmit = (event) => {\n        event.preventDefault();\n        alert(JSON.stringify(formValues));\n    }\n\n    return (\n        <form   onSubmit={handleSubmit}>\n            <button style={{\n                  float:\"right\",\n                  border:'0px',\n                  outline:\"none\",\n                  border:\"1px solid blue\",\n                  height:\"30px\",\n                  width:\"30px\",\n                  borderRadius:\"15px\",\n                  color:\"white\"\n            }} className=\"fa fa-plus badge-info\" type=\"button\" onClick={() => addFormFields()}></button>\n          {formValues.map((element, index) => (\n            <div style={{width:\"100%\"}} className=\"form-group row\" key={index}>\n                 <div style={{width:\"80%\",display:\"flex\",flexDirection:\"row\",marginLeft:\"20px\"}} class=\"form-group\">\n                 \n               <input  type=\"text\" name=\"name\" value={element.name || \"\"} onChange={e => handleChange(index, e)} class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\"/>\n             \n             \n              {\n                index ? \n                  <button type=\"button\" style={{marginLeft:\"10px\",\n                  border:'0px',\n                  outline:\"none\",\n                  border:\"0px solid red\",\n                  height:\"30px\",\n                  width:\"30px\",\n                  borderRadius:\"15px\",\n                  color:\"red\",\n                  backgroundColor:\"white\"\n                     \n                   }}  className=\"fa fa-trash\" onClick={() => removeFormFields(index)}></button> \n                : null\n              }\n              </div>\n            </div>\n          ))}\n          <div className=\"button-section\">\n              \n              <button style={{width:\"100%\"}} className=\"btn btn-info\" type=\"submit\">Submit</button>\n          </div>\n      </form>\n    )\n}\nexport default DynamicForm;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/seatings/admins/registeredAdmins/registeredAdminsProfile.js",["484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501"],"import { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport ModalCard from \"src/views/modal/Modal\";\nimport swal from \"sweetalert\";\n//import ModalCard from \"src/views/modal/Modal\";\n//import CreateAdmin from \"./CreateAdmins\";\n\n\nconst RegisteredAdminProfile=({back,id})=>{\n\n    const [show, setShow] = useState(false);\n    const [isShowLoader,setShowLoader] = useState(false);\n\n    const [email,setEmail] = useState('');\n    const [password,setPassword] = useState('');\n    const [ConfirmPassword,setConfirmPassword] = useState('');\n    const [country,setCountry] = useState('');\n    const [address,setAdress] = useState('');\n    const [phone,setPhone] = useState('');\n    const [category,setCategory] = useState([]);\n    const [username,setUsername] = useState('');\n  //  const [userId,setUserId]=useState('');\n    const [image,setImage] = useState('');\n    const [profile,setProfile] = useState('');\n    const [total,setTotal] = useState('');\n    const [uploaded,setUploaded] = useState('');\n    const [percent,sePercent] = useState('');\n    const [status,setStatus] = useState('');\n\n\n   \n    const [userId,setUserId]=useState('');\n\n     \n    const getUserData = async ()=>{\n      const result = await ApiRequest.getRegAdminData(id);\n\n      //console.log(result.data[0][0].user_email);\n      //console.log(result.data)\n      setEmail(result.data[0][0].user_email);\n      setUsername(result.data[0][0].user_username);\n      setCountry(result.data[0][0].user_country);\n      setAdress(result.data[0][0].address);\n      setPhone(result.data[0][0].user_phone);\n      setImage(result.data[0][0].user_profile);\n      setCategory(result.data[0][0].user_type);\n      setUploaded(result.data[1].totalTaskUoloaded)\n      setTotal(result.data[2].task);\n      setStatus(result.data[0][0].user_status);\n\n      sePercent(result.data[3].range+\"%\");\n      \n}\n\nconst BlockUserPermanet=(id,username)=>{\n  swal(\"You Are About To Permanently Block \"+username+\"!?\", {\n      buttons: {\n        cancel: \"Dont Block!\",\n        delete: {\n          text: \"Block User\",\n          value: \"delete\",\n        },\n       \n      },\n    })\n    .then(async (value) => {\n      switch (value) {\n     \n       \n     \n        case \"delete\":\n            const result = await ApiRequest.BlockAdmin(id);\n            if(result.data == true){\n          swal(`${username}`, \"Deleted Succesfully\", \"success\");\n         getUserData();\n         // LoadWriters();\n            }\n          break;\n     \n        default:\n          swal(\"Process Canceled Succesfully!\");\n      }\n    });\n}\n\nconst DisableUser =(id,username)=>{\nswal(\"\",\"Unblock \"+username+\"!?\",\"warning\", {\n  buttons: {\n    cancel: \"Cancel!\",\n    delete: {\n      text: \"Unblock User\",\n      value: \"unblock\",\n    },\n   \n  },\n})\n.then(async (value) => {\n  switch (value) {\n \n   \n \n    case \"unblock\":\n      const result = await ApiRequest.unblockAdmin(id);\n      \n     if(result.data == true){\n      swal(`${username}`, \"unblocked Succesfully\", \"success\");\n      getUserData();\n     // LoadWriters();\n     }\n      break;\n \n    default:\n      swal(\"Process Canceled Succesfully!\");\n  }\n});\n}\n\n    const Checks = (s)=>{\n      if(s == 1){\n        return true;\n      }else{\n        return false;\n      }\n    }\n\n    const Buttons =(id,username,checkeds)=>{\n      return <> \n           \n         \n           <button style={{width:\"100%\"}}  onClick={()=>checkeds==true?BlockUserPermanet(id,username):DisableUser(id,username)} className={checkeds?\"fa fa-unlock btn btn-info\":\"fa fa-lock btn btn-warning\"}></button> \n           \n       </>\n         }\n\n  \n    useEffect(()=>{\n      getUserData();\n    },[]);\n\n   //let id=1;\n     return<>   \n         <div style={{marginTop:\"20px\"}} className=\"container\">\n     <div className=\"main-body\">\n     <div style={{height:\"60px\",display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n            <h4 style={{marginTop:\"10px\",marginLeft:\"20px\"}}><i>Go Back</i></h4>\n             <button onClick={()=>back()}  style={{width:\"40px\",height:\"40px\",marginRight:\"10px\",marginTop:\"7px\",borderRadius:\"20px\"}} className=\"btn btn-primary fa fa-history\"></button>\n        </div>\n      \n           \n     \n           <div className=\"row gutters-sm\">\n             <div className=\"col-md-4 mb-3\">\n               <div className=\"card\">\n                 <div className=\"card-body\">\n                   <div className=\"d-flex flex-column align-items-center text-center\">\n                     <img src={image} alt=\"Admin\" className=\"rounded-circle\" width=\"150\"/>\n                     <div className=\"mt-3\">\n                       <h4>{username}</h4>\n                       <p className=\"text-secondary mb-1\">{category}</p>\n                       <p className=\"text-muted font-size-sm\">{address}</p>\n                      \n                      <div>\n                        {Buttons(id,username,Checks(status))}\n                      </div>\n                     </div>\n                   </div>\n                 </div>\n               </div>\n              \n \n \n              \n \n             </div>\n             <div className=\"col-md-8\">\n               <div className=\"card mb-3\">\n                 <div className=\"card-body\">\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Full Name</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                       {username}\n                     </div>\n                   </div>\n                  <hr/>\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Email</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                       {email}\n                     </div>\n                   </div>\n                  <hr/>\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Phone</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                       {phone}\n                     </div>\n                   </div>\n                  <hr/>\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Mobile</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                       {phone}\n                     </div>\n                   </div>\n                  <hr/>\n                   <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">Address</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                        \n                      {address}\n                     </div>\n                   </div>\n\n\n                  <hr/>\n                  <div className=\"row\">\n                     <div className=\"col-sm-3\">\n                       <h6 className=\"mb-0\">COUNTRY</h6>\n                     </div>\n                     <div className=\"col-sm-9 text-secondary\">\n                        \n                      {country}\n                     </div>\n                   </div>\n                  \n                 </div>\n               </div>\n \n               <div className=\"row gutters-sm\">\n                 <div className=\"col-sm-12 mb-3\">\n                   <div className=\"card h-100\">\n                     <div className=\"card-body\">\n                       <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">SYSTEM</i>ACCTIVITIES FULL REPORT</h6>\n                       <div className=\"col-sm-12 mb-3\">\n                  <div className=\"card h-100\">\n                    <div className=\"card-body\">\n                      <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">Writer</i>Account Status</h6>\n                      <small>Total Task Uploaded( {uploaded} of {total})</small>\n                      <div className=\"progress mb-3\" style={{height:\"5px\"}}>\n                        <div className=\"progress-bar bg-primary\" role=\"progressbar\" style={{width:percent}} aria-valuenow=\"80\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                     \n                     \n                    </div>\n                  </div>\n                </div>\n                      \n                     </div>\n                   </div>\n                 </div>\n\n\n                 \n                \n                \n               </div>\n \n \n \n             </div>\n           </div>\n \n         </div>\n     </div>\n   \n     </>\n}\nexport default RegisteredAdminProfile;","/Users/tony/Documents/Projects/react/Writer/admin/src/reusable/DocsLink.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/charts/ChartBarSimple.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/charts/ChartLineSimple.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/dashboard/moreButton.js",["502"],"import React from 'react'\nimport {\n  CBadge,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CHeaderNav,\n \n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nconst MoreButton = ({writer,accept,Reject,task,taskid,writerId}) => {\n  return (\n      \n    <CHeaderNav className=\"px-3\">\n    <CDropdown\n      inNav\n      className=\"c-header-nav-items mx-2\"\n      direction=\"down\"\n    >\n      <CDropdownToggle className=\"c-header-nav-link\" caret={false}>\n        <div>\n           <button  className=\"btn btn-outline-primary fa fa-tasks\"></button>\n        </div>\n      </CDropdownToggle>\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n        \n       \n        <CDropdownItem onClick={()=>task(taskid)}>\n          <CIcon name=\"cil-task\" className=\"mfe-2\" />\n          Tasks Details\n          \n        </CDropdownItem>\n       \n      \n        <CDropdownItem onClick={()=>writer(writerId)}>\n          <CIcon name=\"cil-user\" className=\"mfe-2\" />Writer Requesting\n        </CDropdownItem>\n      \n        <CDropdownItem onClick={()=>accept(taskid)}>\n          <CIcon name=\"cil-credit-card\" className=\"mfe-2\" />\n           Accept Request\n          \n        </CDropdownItem>\n        <CDropdownItem onClick={()=>Reject(taskid)}>\n          <CIcon name=\"cil-file\" className=\"mfe-2\" />\n          Reject Request\n          \n        </CDropdownItem>\n       \n      </CDropdownMenu>\n    </CDropdown>\n    </CHeaderNav>\n  )\n}\n\nexport default MoreButton\n","/Users/tony/Documents/Projects/react/Writer/admin/src/views/icons/brands/Brands.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/in-progress/progress.js",["503","504"],"import { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport ChatBox from \"src/views/ChatBox/ChatBox\";\nimport TableCard from \"src/views/table/TableCard\";\nimport swal from \"sweetalert\";\nimport SingeleTask from \"../../TaskDetails/SingleTaskDetails\";\n\nconst TaskInProgress=({socket})=>{\n      \n  const [open,setOpen]=useState(false);\n  const [taskDetails,setTaskDetails] = useState(false);\n  const [taskId,setTaskId]=useState('');\n  const [Items,setItems]= useState([]);\n  const [checkSEnt,setSent] = useState(false);\n  const [email,setEmail] = useState('');\n  const [taskid,setTaskid] =useState('');\n\nconst GetTableData=async ()=>{\n  if(!checkSEnt){\n      const result = await ApiRequest.getOrdersInProgress();\n     // console.log(result);\n       \n      var sortedItems = [];\n    result.data.forEach(element => {\n          var data ={\n            \"#taskId\":element.task_id,\n            title:element.task_title,\n            writerName:element.writer_display_name,\n            email:element.writer_email,\n            status:element.task_status,\n            category:element.writer_category,\n            Adate:element.taskl_accepted_date,\n            ddate:element.task_deadline,\n            Action:Buttons(element.writer_email,element.task_id)\n          }\n          sortedItems.push(data);\n\n    });\n    setSent(true);\n    setItems(sortedItems);\n  }\n  \n}\n\n\n  useEffect(()=>{\n//console.log(socket);\n   // socket.emit('joins',{name:\"bb\",room:\"bbb\"}, () =>{\n    //});\n      GetTableData();\n  },[]);\n\n  const Open=(mail,taskid)=>{\n    setEmail(mail);\n    setTaskid(taskid);\n\n     setOpen(!open);\n  }\n  const CloseTask=()=>{\n    setTaskDetails(false);\n  }\n\n  const TaskDetails=(taskId)=>{\n    setTaskId(taskId);\n     setTaskDetails(true);\n  }\n\n  const Cancel =async (taskId)=>{\n    const result = await ApiRequest.CancellOrder(taskId);\n     //console.log(result.data)\n    if(result.data == \"done\"){\n      GetTableData();\n      swal(\"Order Cancelled\",\"succesfully\",\"success\");\n    }else{\n      swal(\"Error\",\"Cancelletion Failed\",\"error\");\n    }\n\n  }\n\n  const CancelOrder=(orderId)=>{\n    swal(\"YOU ARE ABOUT TO CANCEL ONGOING ORDER\",{\n       buttons:{\n         cancel:\"NO\",\n         yes:{\n           text:\"YES\",\n           value:\"yes\"\n         }\n       }\n    })\n    .then((value)=>{\n          switch (value) {\n            case 'yes':\n                Cancel(orderId);\n                ///  swal(\"Order Cancelled\",\"succesfully\",\"success\");\n              break;\n          \n            default:\n\n              break;\n          }\n    })\n  }\n\n     const columns = [\n        {\n          dataField: \"#taskId\",\n          text: \"#taskId\",\n         \n        },\n        {\n          dataField: \"title\",\n          text: \"Title\",\n        \n          sort: true\n        },\n        {\n          dataField: \"writerName\",\n          text: \"Writer Username\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n        {\n          \n            dataField: \"category\",\n            text: \"Category\",\n          \n          \n        },\n        {\n          \n          dataField: \"Adate\",\n          text: \"Accepted-Date\",\n        \n        \n      },\n      {\n          \n        dataField: \"ddate\",\n        text: \"Deadline\",\n      \n      \n      },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n\n      const Buttons = (mail,taskid)=>{\n             return <>\n                   <button onClick={()=>Open(mail,taskid)} style={{marginRight:\"3px\"}} className=\"btn btn-primary fa fa-comment\"></button>\n                   <button onClick={()=>CancelOrder(taskid)}  style={{marginRight:\"3px\"}} className=\"btn btn-warning\">Cancel</button>\n                   <button onClick={()=>TaskDetails(taskid)} className=\"btn btn-info\">Details</button>\n                   </>\n      }\n     \n    return <>\n            {!taskDetails && <> <TableCard \n             products={Items}\n             columns={columns}\n              title={\"ORDERS-IN-PROGRESS\"}\n             />\n             {open && <ChatBox\n    open={open}\n    SetOpen={Open}\n    email={email}\n    socket={socket}\n    taskid={taskid}\n   />}\n             </>\n             }\n             {taskDetails &&<SingeleTask id={taskId} closeTask={CloseTask} isAccept={false}/>}\n          </>\n          \n}\n\nexport default TaskInProgress;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/completed/completed.js",["505","506"],"import { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport TableCard from \"src/views/table/TableCard\";\nimport SingeleTask from \"../../TaskDetails/SingleTaskDetails\";\n\nconst Completed =()=>{\n  const [taskDetails,setTaskDetails] = useState(false);\n  const [taskId,setTaskId]=useState('');\n  const [Completed,setCompleted] = useState([]);\n\n  const CloseTask=()=>{\n    setTaskDetails(false);\n  }\n\n  const getCompletedOrders = async ()=>{\n    const result = await ApiRequest.getCompletedOrders();\n    var sortedItems = [];\n         result.data.forEach(element => {\n               var dat={\n                \"#taskId\":element.task_id,\n                title:element.task_title,\n                writerName:element.writer_display_name,\n                email:element.writer_email,\n                status:<span className=\"badge badge-success\">{element.task_status}</span>,\n               \n                sdate:element.taskl_accepted_date,\n                ddate:element.task_deadline,\n                Action:<button onClick={()=>TaskDetails(element.task_id)}  className=\"btn btn-info\">Details</button>\n               }\n\n               sortedItems.push(dat);\n         });\n\n         setCompleted(sortedItems);\n  }\n\n  useEffect(()=>{\n        getCompletedOrders();\n  },[])\n  const TaskDetails=(taskId)=>{\n    setTaskId(taskId);\n     setTaskDetails(true);\n  }\n    const columns = [\n        {\n          dataField: \"#taskId\",\n          text: \"#taskId\",\n         \n        },\n        {\n          dataField: \"title\",\n          text: \"Title\",\n        \n          sort: true\n        },\n        {\n          dataField: \"writerName\",\n          text: \"Writer Username\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n        {\n          \n            dataField: \"category\",\n            text: \"Category\",\n          \n          \n        },\n        {\n          \n          dataField: \"sdate\",\n          text: \"Submited-Date\",\n        \n        \n      },\n      {\n          \n        dataField: \"ddate\",\n        text: \"Deadline\",\n      \n      \n      },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n      const products=[\n        {\n          \"#taskId\":\"686787678\",\n          title:\"iuytfrdfgh\",\n          writerName:\"wilson\",\n          email:\"wilson@gmail.com\",\n          status:\"in-progress\",\n          category:\"Lorem\",\n          sdate:'2011-9-10',\n          ddate:\"2011-8-8\",\n          Action:<button onClick={()=>TaskDetails(2)}  className=\"btn btn-info\">Details</button>\n        }\n      ]\n    return <>\n            {!taskDetails && <TableCard \n             products={Completed}\n             columns={columns}\n              title={\"COMPLETED ORDERS\"}\n             />\n            }\n\n{taskDetails &&<SingeleTask id={taskId} closeTask={CloseTask} isAccept={false}/>}\n          </>\n          \n}\n\nexport default Completed;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/cancelled/cancelled.js",["507","508"],"import { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport TableCard from \"src/views/table/TableCard\";\nimport swal from \"sweetalert\";\nimport SingeleTask from \"../../TaskDetails/SingleTaskDetails\";\nimport ReasignUser from \"../assigned/re-assign/reasign\";\n\nconst CancelledTask = () =>{\n\n  const [taskDetails,setTaskDetails] = useState(false);\n  const [taskId,setTaskId]=useState('');\n  const [CancelledOrders,setCancelledOrders]=useState([]);\n  const [status,setStatus]=useState('');\n  const [createDate,setCreatedDate] = useState('');\n  const [enDate,setEndDate] = useState('');\n  const [description,setDateDescription] = useState('');\n  const [title,setTitle] = useState('');\n  const [reaAsign,setAssign]=useState(false);\n  const [bck,setBck] = useState(true);\n\n  const CloseTask=()=>{\n    setTaskDetails(false);\n  }\n\n  const Reasign=(taskId,taskName,statu,creatDate,endDat,description)=>{\n    setStatus(statu);\n    setCreatedDate(creatDate);\n    setEndDate(endDat);\n    setDateDescription(description);\n    setTaskId(taskId);\n    setTitle(taskName);\n\n  swal(`Are you sure to reasign`,`${taskName}`,\"warning\",{\n    buttons:{\n      cancel:\"cancel !\",\n      proceed:{\n        text:\"PROCEED\",\n        value:\"proceed\"\n      }\n    }\n  })\n  .then((value)=>{\n      switch (value) {\n        case 'proceed':\n           setAssign(true);\n           setBck(false)\n          break;\n      \n        default:\n          break;\n      }\n  })\n}\nconst back=()=>{\n setAssign(false);\n}\n\nconst Buttons=(taskId,title,status,createDate,endDate,description)=>{\n  return <>\n       \n       <div style={{display:\"flex\",flexDirection:\"column\"}}>\n       <button onClick={()=>TaskDetails(taskId)}  className=\"btn btn-primary\">Details</button>\n    <button onClick={()=>Reasign(taskId,title,status,createDate,endDate,description)}  className=\"btn btn-warning fa fa-repeat\"></button>\n\n  \n    </div>\n       </>\n}\n\n  const getCancelledOrders=async()=>{\n       const result = await ApiRequest.getCancelledOrders();\n         const organisedData=[];\n       result.data.forEach(element => {\n            var dat={\n              \"#taskId\":element.task_id,\n              title:element.task_title,\n              writerName:element.writer_display_name,\n              email:element.writer_email,\n              status:element.task_status,\n              category:element.writer_category,\n              \n              ddate:element.task_deadline,\n              Action:Buttons(element.task_id,element.task_title,element.task_status,element.task_created_date,element.task_deadline,element.task_description)\n            }\n            organisedData.push(dat);\n\n       });\n\n       setCancelledOrders(organisedData);\n\n      // console.log(result.data);\n  }\n\n  useEffect(()=>{\n     getCancelledOrders();\n  },[]);\n\n  const TaskDetails=(taskId)=>{\n    setTaskId(taskId);\n     setTaskDetails(true);\n  }\n\n    const columns = [\n        {\n          dataField: \"#taskId\",\n          text: \"#taskId\",\n         \n        },\n        {\n          dataField: \"title\",\n          text: \"Title\",\n        \n          sort: true\n        },\n        {\n          dataField: \"writerName\",\n          text: \"Writer Username\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n        {\n          \n            dataField: \"category\",\n            text: \"Category\",\n          \n          \n        },\n     \n      {\n          \n        dataField: \"ddate\",\n        text: \"Deadline\",\n      \n      \n      },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n      const products=[\n        {\n          \"#taskId\":\"686787678\",\n          title:\"iuytfrdfgh\",\n          writerName:\"wilson\",\n          email:\"wilson@gmail.com\",\n          status:\"in-progress\",\n          category:\"Lorem\",\n          Cdate:'2011-9-10',\n          ddate:\"2011-8-8\",\n          Action:<button onClick={()=>TaskDetails(1)} className=\"btn btn-primary\">Details</button>\n\n       }\n      ]\n    return <>\n            {!taskDetails && !reaAsign && <TableCard \n             products={CancelledOrders}\n             columns={columns}\n              title={\"CANCELLED TASK\"}\n             />}\n             \n\n{taskDetails && !reaAsign &&<SingeleTask id={taskId} closeTask={CloseTask} isAccept={false}/>}\n\n{reaAsign && !taskDetails && <> <br/>\n             {bck && <><div style={{height:\"60px\",display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n            <h4 style={{marginTop:\"10px\",marginLeft:\"20px\"}}><i>Go Back</i></h4>\n             <button  onClick={()=>back()}  style={{width:\"40px\",height:\"40px\",marginRight:\"10px\",marginTop:\"7px\",borderRadius:\"20px\"}} className=\"btn btn-primary fa fa-history\"></button>\n               </div></>}\n               \n             <ReasignUser\n              title={title}\n             status={status}\n             createDate={createDate}\n             endDate={enDate}\n             description={description}\n             taskId={taskId}\n             buttonName={\"RE-ASSIGN\"} setBack={setBck}/></>}\n          </>\n          \n}\n\nexport default CancelledTask;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/assigned/assigned.js",["509","510"],"//import { cilMediaStepBackward } from \"@coreui/icons\";\n//import { cilMediaStepBackward } from \"@coreui/icons\";\nimport { useEffect, useState } from \"react\";\nimport TableCard from \"src/views/table/TableCard\";\nimport swal from \"sweetalert\";\nimport ReasignUser from \"./re-assign/reasign\";\nimport SingleTask from '../../TaskDetails/SingleTaskDetails';\nimport ApiRequest from \"src/Api/Data/requestApi\";\n\n\nconst AssignedTask = ()=>{\n  \n  const [reaAsign,setAssign]=useState(false);\n  const [bck,setBck] = useState(true);\n  const [taskDetails,setTaskDetails] = useState(false);\n  const [taskId,setTaskId]=useState('');\n  const [status,setStatus]=useState('');\n  const [createDate,setCreatedDate] = useState('');\n  const [enDate,setEndDate] = useState('');\n  const [description,setDateDescription] = useState('');\n  const [title,setTitle] = useState('');\n  const [assignedTask,setAssignedTask] = useState([]);\n\n  const getAssignedTask=async ()=>{\n    const result = await ApiRequest.getAssignedTask();\n      const organisedData=[];\n      result.data.forEach(element => {\n          var data={\n            \"#taskId\":element.task_id,\n          title:element.task_title,\n          writerName:element.writer_display_name,\n          email:element.writer_email,\n          status:TaskStatus(element.task_status),\n          category:element.task_Descipline,\n          date:element.task_created_date,\n          \n          deadline:element.task_deadline,\n          Action:Buttons(element.task_id,element.task_title,element.task_status,element.task_created_date,element.task_deadline,element.task_description)\n          }\n\n          organisedData.push(data);\n      });\n\n    setAssignedTask(organisedData);\n    //console.log(result.data);\n  }\n\n  const TaskStatus =(state)=>{\n      if(state ===\"Rejected\"){\n           return <span className=\"badge badge-danger\">{state}</span>\n      }\n      else return <span className=\"badge badge-info\">{state}</span>\n  }\n\n\n  useEffect(()=>{\n    getAssignedTask();\n      setBck(true);\n  },[])\n  \n  const Reasign=(taskId,taskName,statu,creatDate,endDat,description)=>{\n    //alert(taskId)\n       setStatus(statu);\n       setCreatedDate(creatDate);\n       setEndDate(endDat);\n       setDateDescription(description);\n       setTaskId(taskId);\n       setTitle(taskName);\n\n     swal(`Are you sure to reasign`,`${taskName}`,\"warning\",{\n       buttons:{\n         cancel:\"cancel !\",\n         proceed:{\n           text:\"PROCEED\",\n           value:\"proceed\"\n         }\n       }\n     })\n     .then((value)=>{\n         switch (value) {\n           case 'proceed':\n              setAssign(true);\n              setBck(false)\n             break;\n         \n           default:\n             break;\n         }\n     })\n  }\n  const back=()=>{\n    setAssign(false);\n  }\n\n  const CloseTask=()=>{\n    setTaskDetails(false);\n  }\n  const TaskDetails=(taskId)=>{\n    setTaskId(taskId);\n     setTaskDetails(true);\n  }\n\n  const Buttons=(taskId,title,status,createDate,endDate,description)=>{\n        return <>\n             \n             <div style={{display:\"flex\",flexDirection:\"column\"}}>\n          <button onClick={()=>Reasign(taskId,title,status,createDate,endDate,description)} style={{marginBottom:\"4px\",width:'40px'}} className=\"btn btn-warning fa fa-repeat\"></button>\n          <button onClick={()=>TaskDetails(taskId)} style={{marginBottom:\"4px\",width:'40px'}} className=\"btn btn-info\">Task</button>\n        \n          </div>\n             </>\n  }\n\n  const WriterDeatails=(writerId)=>{\n\n  }\n    const columns = [\n        {\n          dataField: \"#taskId\",\n          text: \"#taskId\",\n         \n        },\n        {\n          dataField: \"title\",\n          text: \"Title\",\n        \n          sort: true\n        },\n        {\n          dataField: \"writerName\",\n          text: \"Writer Username\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n        {\n          \n            dataField: \"category\",\n            text: \"Category\",\n          \n          \n        },\n        {\n          \n            dataField: \"date\",\n            text: \"Assigned Date\",\n          \n          \n        },\n      \n        {\n          \n            dataField: \"deadline\",\n            text: \"Deadline\",\n          \n          \n        },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n   \n    return <>\n            {!reaAsign && !taskDetails &&  <TableCard \n             products={assignedTask}\n             columns={columns}\n              title={\"ASSIGNED TASK\"}\n             />}\n\n             {reaAsign && !taskDetails && <> <br/>\n             {bck && <><div style={{height:\"60px\",display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n            <h4 style={{marginTop:\"10px\",marginLeft:\"20px\"}}><i>Go Back</i></h4>\n             <button  onClick={()=>back()}  style={{width:\"40px\",height:\"40px\",marginRight:\"10px\",marginTop:\"7px\",borderRadius:\"20px\"}} className=\"btn btn-primary fa fa-history\"></button>\n               </div></>}\n             <ReasignUser\n              title={title}\n             status={status}\n             createDate={createDate}\n             endDate={enDate}\n             description={description}\n             buttonName={\"RE-ASSIGN\"} \n             taskId={taskId}\n             setBack={setBck}/></>}\n\n             {!reaAsign && taskDetails &&<SingleTask id={taskId} closeTask={CloseTask} isAccept={false}/>}\n          </>\n          \n}\n\nexport default AssignedTask;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/assigned/re-assign/reasign.js",["511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526"],"import { useEffect, useState } from \"react\";\nimport CategoryEdit from \"src/views/base/Users/writers/editCategory\";\nimport Profile from \"src/views/base/Users/writers/profile/profile\";\nimport TableCard from \"src/views/table/TableCard\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport swal from 'sweetalert';\nimport ApiRequest from \"src/Api/Data/requestApi\";\n\nconst ReasignUser = ({setBack,buttonName,title,status,createDate,endDate,description,taskId})=>{\n  \n       const [edit,setEdit] = useState(false);\n       const [category,setCategory] = useState([]);\n       const [userId,setUserId]=useState('');\n       const [username,setUsername]=useState('');\n       const [writer,setWriter] = useState([]);\n       const [state,setState] = useState();\n\n       const notify = (data) => toast(data);\n\n       const [initialSelected,setInititialSelected] = useState([\n        { label: \"Short Stories.\",value:\"short\"},\n        { label: \"Technically\",value:\"technical\"},\n        { label: \"Novellas\",value:\"novels\"},\n        { label: \"Scripts and Screenplays\",value:\"scripts\"},\n        { label: \"True Crime. ...\",value:\"true\"},\n        { label: \" Auto/Biography.\",value:\"auto\"},\n       ]);\n       const options = [\n        { label: \"Short Stories.\",value:\"short\"},\n        { label: \"Technically\",value:\"technical\"},\n        { label: \"Novellas\",value:\"novels\"},\n        { label: \"Scripts and Screenplays\",value:\"scripts\"},\n        { label: \"True Crime. ...\",value:\"true\"},\n        { label: \" Auto/Biography.\",value:\"auto\"},\n      \n        ];\n\n        useEffect(()=>{\n        setBack(true);\n        LoadWriters();\n        },[])\n        const ReAsignTask=(user_id,task_id)=>{\n            swal(`Are You Sure ${buttonName} This Task!?`, {\n                buttons: {\n                  cancel: \"Dont Proceed!\",\n                  delete: {\n                    text: buttonName,\n                    value: \"reasign\",\n                  },\n                 \n                },\n              })\n              .then((value) => {\n                switch (value) {\n               \n                 \n               \n                  case \"reasign\":\n                       assignTask(user_id,task_id)\n                    //swal(`task`, \"Re-assigned Successfully\", \"success\");\n                    break;\n               \n                  default:\n                    swal(\"Process Canceled Succesfully!\");\n                }\n              });\n        }\n\n\n    const assignTask=async (user_id,task_id)=>{\n      const result = await ApiRequest.asignTaskToUser(user_id,task_id);\n\n      var response =result.data;\n      if(response == true){\n        swal(title, \"Re-assigned Successfully\", \"success\");\n      }else{\n        swal(\"ERROR\",response,\"error\");\n      }\n     //alert(task_id);\n    }\n    \n      \n        const EditUser=(id,username,status)=>{\n\n          setState(status);\n            setUsername(username);\n            setUserId(id);\n            setEdit(true)\n            setBack(false);\n            \n       }\n\n        const Back=()=>{\n            setUserId('')\n            setEdit(false);\n            setBack(true);\n          }\n      \n    const ViewUser=(id)=>{\n\n    }\n\n    const SingleTask=(id)=>{\n\n    }\n    const statusMode=(status)=>{\n      if(status === \"new\"){\n       return <span className=\"badge badge-info\">{status}</span>\n      }\n      if(status === \"cancelled\"){\n       return <span className=\"badge badge-warning\">{status}</span>\n      }\n    if(status === \"completed\"){\n      return <span className=\"badge badge-success\">{status}</span>\n    }\n    if(status === \"in-progress\"){\n      return <span className=\"badge badge-primary\">{status}</span>\n    }\n}\n\nconst BlockUserPermanet=(id,username)=>{\n  swal(\"You Are About To Permanently Block \"+username+\"!?\", {\n      buttons: {\n        cancel: \"Dont Block!\",\n        delete: {\n          text: \"Block User\",\n          value: \"delete\",\n        },\n       \n      },\n    })\n    .then(async (value) => {\n      switch (value) {\n     \n       \n     \n        case \"delete\":\n            const result = await ApiRequest.BlockUser(id);\n            if(result.data == true){\n          swal(`${username}`, \"Deleted Succesfully\", \"success\");\n          LoadWriters();\n            }\n          break;\n     \n        default:\n          swal(\"Process Canceled Succesfully!\");\n      }\n    });\n}\n\nconst DisableUser =(id,username)=>{\nswal(\"\",\"Unblock \"+username+\"!?\",\"warning\", {\n  buttons: {\n    cancel: \"Cancel!\",\n    delete: {\n      text: \"Unblock User\",\n      value: \"unblock\",\n    },\n   \n  },\n})\n.then(async (value) => {\n  switch (value) {\n \n   \n \n    case \"unblock\":\n      const result = await ApiRequest.unblockUser(id);\n      \n     if(result.data == true){\n      swal(`${username}`, \"unblocked Succesfully\", \"success\");\n      LoadWriters();\n     }\n      break;\n \n    default:\n      swal(\"Process Canceled Succesfully!\");\n  }\n});\n}\n\nconst Buttons =(id,username,status)=>{\n  return <>\n  <button onClick={()=>ReAsignTask(id,taskId)} style={{marginRight:\"3px\"}} className=\"btn btn-success fa fa-check\"></button>\n  <button onClick={()=>EditUser(id,username,status)} className=\"btn btn-primary fa fa-user\"></button>\n</>\n}\n\nconst LoadWriters = async ()=>{\n  const result = await ApiRequest.getWriters();\n  const sortedItems=[];\n  // console.log(result);\n  if(result.data !==\"empty\" && result.data != false){\n  result.data.map((item)=>{\n   // =${`badge badge-primary`}\n       var data={\n       \n        username:item.writer_name,\n        email:item.writer_email,\n        \n        action:Buttons(item.witer_id,item.writer_name,checkes(item.writer_account_status))\n       }\n\n       sortedItems.push(data);\n  })\n}\n\n\nsetWriter(sortedItems);\n}\nconst checkes=(status)=>{\nreturn status == \"0\"?false:true;\n}\n    const columns=[\n        {\n            dataField: \"username\",\n            text: \"username\",\n           \n          },\n          {\n            dataField: \"email\",\n            text: \"email\",\n           \n          },\n          {\n            dataField: \"action\",\n            text: \"Action\",\n           \n          },\n    ]\n    const products=[\n        {\n            username: \"Wilson\",\n            email: \"wilson@gmail.com\",\n            action:<>\n                     <button onClick={()=>ReAsignTask(1)} style={{marginRight:\"3px\"}} className=\"btn btn-success fa fa-check\"></button>\n                     <button onClick={()=>EditUser(4,\"wilson\")} className=\"btn btn-primary fa fa-user\"></button>\n                   </>\n           \n          },\n    ]\n    return  <> {!edit && \n        \n     <div className=\"container\">\n    <div className=\"main-body\">\n \n        \n          \n    \n          <div className=\"row gutters-sm\">\n         \n            <div style={{marginTop:\"20px\"}} className=\"col-md-12\">\n            \n              <div className=\"row gutters-sm\">\n                <div className=\"col-sm-6 mb-3\">\n                  <div className=\"card h-100\">\n                    <div className=\"card-body\">\n                      <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">Orders </i>Details</h6>\n                      <div className=\"form-group\">\n                           <label for=\"inputAddress2\">Order Dtails</label>\n                           <div class=\"container\">\n\n                            <div class=\"row\">\n                                <div class=\"col\">\n                                     Order Title\n                                </div>\n                              <div  class=\"col badge badge-info\">\n                                  {title}\n                               </div>\n                                 </div>\n                            <div class=\"row\">\n                            <div class=\"col\">\n                                status\n                              </div>\n                             <div class=\"col \">\n                               {statusMode(status)}\n                             \n                           </div>\n\n                         </div>\n\n                         <div class=\"row\">\n                           <div class=\"col\">\n                                creted on\n                              </div>\n                             <div class=\"col badge\">\n                               {createDate}\n                             \n                           </div>\n                           </div>\n                           <div class=\"row\">\n                            <div class=\"col\">\n                                end Date\n                              </div>\n                             <div class=\"col\">\n                               {endDate}\n                             \n                           </div>\n                           </div>\n\n\n                         <br/>\n                         <div class=\"row\">\n                            <div class=\"col card\">\n                                <label>Description</label>\n                                <div className=\"col-md-11\" dangerouslySetInnerHTML={{ __html:description }} >\n                           \n                           </div>\n                              </div>\n                             \n                         </div>\n\n                         \n                       </div>\n                        \n                         </div>\n                     \n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"col-sm-6 mb-3\">\n                  <div className=\"card h-100\">\n                    <div className=\"card-body\" style={{overflowY:\"auto\"}}>\n                      <h6 className=\"d-flex align-items-center mb-3\"><i className=\"material-icons text-info mr-2\">System</i>Billing Sequence</h6>\n                     \n                     <TableCard title={\"AVAILABLE USERS\"} products={writer} columns={columns}/>\n                    \n                    </div>\n                    \n                  </div>\n                </div>\n             \n               \n              </div>\n\n\n\n            </div>\n          </div>\n\n        </div>\n    </div>}\n\n    {edit && <Profile\n       category={[]}\n       existingCategories={initialSelected}\n       back={Back}\n       DisableUser={DisableUser}\n       id={userId}\n       BlockUserPermanet={BlockUserPermanet}\n       username={username}\n       checkeds={state}\n    /> }\n    <ToastContainer/>\n    </>\n}\n\nexport default ReasignUser;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/assign/Asigne/Asign.js",["527"],"import { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport ReasignUser from \"../../management/assigned/re-assign/reasign\";\n\nconst AsignUser=({setBack,setAssign,isBck,taskId})=>{\n  const [details,setDetails] = useState([]);\n    const [view,setView] = useState(false);\n\n    const getDetails=async()=>{\n      const result = await ApiRequest.getSingleTaskFullDetails(taskId);\n\n      setDetails(result.data.result[0]);\n      //console.log(result.data.result[0]); \n      //console.log(details)\n      setView(true);\n     // await ApiRequest.fileDownload(\"http://localhost:4000/files/Task367960GRADUATION LIST- DEC 2021 FOR NOTICE BOARD.pdf\");\n    \n    }\n\n    useEffect(()=>{\n         getDetails();\n    },[]);\n\n  \n    return <>\n           {isBck && <div style={{height:\"60px\",display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\"}} className=\"card\">\n            <h4 style={{marginTop:\"10px\",marginLeft:\"20px\"}}><i>Go Back</i></h4>\n             <button  onClick={()=>setAssign(false)}  style={{width:\"40px\",height:\"40px\",marginRight:\"10px\",marginTop:\"7px\",borderRadius:\"20px\"}} className=\"btn btn-primary fa fa-history\"></button>\n               </div>\n          }\n          \n       {view &&   <ReasignUser \n          title={details.task_title} \n          setBack={setBack}\n          status={details.task_status}\n          createDate={details.task_created_date}\n          endDate={details.task_deadlin}\n          description={details.task_description}\n          taskId={details.task_id}\n           buttonName={\"ASSIGN USER\"}/>}\n           </>\n}\n\nexport default AsignUser;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/pages/login/Login.js",["528","529","530"],"import { useState } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport { Loginn } from \"src/Api/auth/auth\";\n\nimport swal from \"sweetalert\";\n//import { Button,Modal } from \"react-bootstrap\";\nimport './login.css';\nconst Login = ({Profile})=>{\n    const [email,setEmail] = useState('');\n    const [password,setPassword] = useState('');\n    const [err,setErr] = useState('');\n    const [Err,setEr] = useState(false);\n    const [save,SetSave] = useState(false);\n\n    function showError(data){\n     // alert(data);\n       // swal(\"LOGIN FAILED\",data,'error','1000');\n       swal({\n        title: \"LOGIN FAILED\",\n        text: data,\n        icon: \"error\",\n        timer: 3000\n     });\n    }\n\n    async function  handLogin(e){\n        SetSave(true)\n     e.preventDefault();\n     \n       const result = await Loginn(email,password,Profile);\n       //alert(result)\n       \n      if(result == true){\n        \n         setEmail('');\n         setPassword('');\n         SetSave(false)\n \n         \n \n     }else{\n         showError(result)\n         setErr(result);\n         setEr(true);\n         SetSave(false)\n       \n     }\n \n    }\n   \n  return <>\n      \n      <div  id=\"myModal\" class=\"show\">\n\t<div style={{backgroundColor:\"#f1f1\",marginTop:\"10%\"}} class=\"modal-dialog modal-login\">\n\t\t<div class=\"modal-content\">\n\t\t\t<div class=\"modal-header\">\n\t\t\t\t<div class=\"avatar\">\n\t\t\t\t\t<img src=\"https://www.tutorialrepublic.com/examples/images/avatar.png\" alt=\"Avatar\"/>\n\t\t\t\t</div>\t\t\t\t\n\t\t\t\t<h4 class=\"modal-title\">Admin Login</h4>\t\n                \n\t\t\t</div>\n\t\t\t<div class=\"modal-body\">\n\t\t\t\t<form action=\"\" method=\"post\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<input value={email} onChange={(e)=>setEmail(e.target.value)} type=\"email\" class=\"form-control\" name=\"email\" placeholder=\"email\" required=\"required\"/>\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<input value={password} onChange={(e)=>setPassword(e.target.value)} type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"Password\" required=\"required\"/>\t\n\t\t\t\t\t</div>        \n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<button style={{outline:\"none\"}} onClick={(e)=>handLogin(e)} type=\"submit\" class=\"btn btn-primary btn-lg btn-block login-btn\">Login</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t<div class=\"modal-footer\">\n           \n\t\t\t\t<a  href=\"/#/auth/ForgotPassWord\" >Forgot Password?</a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>  \n{ save && <div className=\"spinner\">\n    \n  \n    <Loader\n  type=\"Circles\"\n  color=\"#00BFFF\"\n  height={100}\n  width={100}\n  //3 secs\n  />\n  </div>}   \n    </>\n}\n\nexport default Login;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/pages/activate/activate.js",["531","532"],"import ApiRequest from 'src/Api/Data/requestApi';\nimport '../login/login.css';\nimport swal from \"sweetalert\";\nimport Loader from 'react-loader-spinner';\nimport { useEffect, useState } from 'react';\nimport { UrlParams } from 'src/Api/auth/UrlParams';\n\nconst Activate=()=>{\n\n    const [Key,setKey] = useState('');\n    const [btn,setBtn] = useState(false);\n    const [save,SetSave] = useState(false);\n\n\nfunction showError(data){\n   // alert(data);\n     // swal(\"LOGIN FAILED\",data,'error','1000');\n     swal({\n      title: \"Activation Failed\",\n      text: data,\n      icon: \"error\",\n      timer: 3000\n   });\n   setBtn(false);\n  }\n\n  const HandleFunc =async (Key)=>{\n    \n   try {\n       var result = await ApiRequest.ActivateAcount(Key);\n         SetSave(false);\n         setBtn(true);\n       if(result.data === 'done'){\n           swal('success','Account activated successfully','success');\n           SetSave(false);\n           setTimeout(() => {\n            window.location.href='/#/Login';\n          }, 2000);\n\n       } else{\n           showError(result.data);\n       }\n     } catch (error) {\n        console.log(error) \n     }\n  }\nconst ActivateAccount=(e)=>{\n   if(e !==undefined){\n       e.preventDefault();\n   };\n         SetSave(true);\n         setBtn(true);\n         setTimeout(() => {\n             //if(Key !==''){\n                HandleFunc(Key);\n               \n                \n                \n           //  }\n             //showError('wrong key')\n            // SetSave(false);\n         }, 2000);\n\n}\n\nconst Check=()=>{\n   const Key = UrlParams('Key');\n   \n   if(!Key==false){\n       setKey(Key);\n       setBtn(true);\nHandleFunc(Key);\n     //ActivateAccount(Key);\n   }\n}\n\nuseEffect(()=>{\n Check();\n  //alert(Key);\n},[])\n    return <>   \n    <div  id=\"myModal\" class=\"show\">\n  <div style={{backgroundColor:\"#f1f1\",marginTop:\"10%\"}} class=\"modal-dialog modal-login\">\n      <div class=\"modal-content\">\n          <div class=\"modal-header\">\n              <div class=\"avatar\">\n                  <img src=\"https://www.tutorialrepublic.com/examples/images/avatar.png\" alt=\"Avatar\"/>\n              </div>\t\t\t\t\n              <h4 class=\"modal-title\">Activate Account</h4>\t\n              \n              \n          </div>\n          <div class=\"modal-body\">\n              <form action=\"\" method=\"post\">\n                \n              <div class=\"form-group\">\n                      <input type=\"number\" value={Key} onChange={(e)=>setKey(e.target.value)} class=\"form-control\" name=\"key\" placeholder=\"Activation Key\" required=\"required\"/>\t\n                  </div>        \n                  <div class=\"form-group\">\n                      <button type=\"submit\" onClick={(e)=>ActivateAccount(e)} disabled={btn} class=\"btn btn-primary btn-lg btn-block login-btn\">Activate Account</button>\n                  </div>\n              </form>\n          </div>\n        \n      </div>\n  </div>\n</div>   \n{ save && <div className=\"spinner\">\n    \n  \n    <Loader\n  type=\"Circles\"\n  color=\"#00BFFF\"\n  height={100}\n  width={100}\n  //3 secs\n  />\n  </div>\n  } \n</>\n}\n\nexport default Activate;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/pages/activate/forgot.js",["533","534"],"import '../login/login.css';\nimport swal from \"sweetalert\";\nimport Loader from 'react-loader-spinner';\n\nimport { useEffect, useState } from 'react';\nimport ApiRequest from 'src/Api/Data/requestApi';\nconst Forgot=()=>{\n    const [Key,setKey] = useState('');\n    const [btn,setBtn] = useState(false);\n    const [save,SetSave] = useState(false);\n    function showError(data){\n        // alert(data);\n          // swal(\"LOGIN FAILED\",data,'error','1000');\n          swal({\n           title: \"password retrival Failed\",\n           text: data,\n           icon: \"error\",\n           timer: 3000\n        });\n        setBtn(false);\n       }\n\n       const HandleFunc =async (Key)=>{\n        try {\n            var result = await ApiRequest.ForgotPassword(Key);\n              SetSave(false);\n              setBtn(true);\n            if(result.data === 'done'){\n                swal('success','pasword reset success ..chehck email','success');\n                SetSave(false);\n                setTimeout(() => {\n                    window.location.href=\"/#/Login\"\n               }, 2000);\n\n            } else{\n                showError(result.data);\n            }\n          } catch (error) {\n             console.log(error) \n          }\n       }\n    const ActivateAccount=(e)=>{\n        if(e !==undefined){\n            e.preventDefault();\n        };\n              SetSave(true);\n              setBtn(true);\n              setTimeout(() => {\n                  //if(Key !==''){\n                     HandleFunc(Key);\n                    \n                     \n                     \n                //  }\n                  //showError('wrong key')\n                 // SetSave(false);\n              }, 2000);\n\n    }\n    return <>   \n    <div  id=\"myModal\" class=\"show\">\n  <div style={{backgroundColor:\"#f1f1\",marginTop:\"10%\"}} class=\"modal-dialog modal-login\">\n      <div class=\"modal-content\">\n          <div class=\"modal-header\">\n              <div class=\"avatar\">\n                  <img src=\"https://www.tutorialrepublic.com/examples/images/avatar.png\" alt=\"Avatar\"/>\n              </div>\t\t\t\t\n              <h4 class=\"modal-title\">Forgot Password</h4>\t\n              <button onClick={()=>window.location.href=\"/#/\"} type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n          </div>\n          <div class=\"modal-body\">\n              <form action=\"\" method=\"post\">\n                \n              <div class=\"form-group\">\n                      <input type=\"email\" class=\"form-control\" onChange={(e)=>setKey(e.target.value)} name=\"email\" placeholder=\"Email\" required=\"required\"/>\t\n                  </div>        \n                  <div class=\"form-group\">\n                      <button type=\"submit\" onClick={(e)=>ActivateAccount(e)}  class=\"btn btn-primary btn-lg btn-block login-btn\">Get password</button>\n                  </div>\n              </form>\n          </div>\n        \n      </div>\n  </div>\n</div>  \n{ save && <div className=\"spinner\">\n    \n  \n    <Loader\n  type=\"Circles\"\n  color=\"#00BFFF\"\n  height={100}\n  width={100}\n  //3 secs\n  />\n  </div>\n} \n</>\n}\n\nexport default Forgot;","/Users/tony/Documents/Projects/react/Writer/admin/src/Api/authThenticateToken.js",["535","536","537"],"import Axios from \"./config\";\nasync function UpdateToken(refreshToken){\n    try {\n        const endPoint ='refreshToken?refreshToken='+refreshToken;\n       \n        const result = await Axios.post(endPoint);\n        \n        if(result.data == false){\n          \n         window.location.href=\"/#/login\";\n        }else{\n           \n            if(result.data.type === \"super\" ){\n                \n                const { accessToken,refreshToken } = result.data.tokens;\n                \n                const ta=accessToken;\n                const tr=refreshToken;\n                \n                \n                localStorage.setItem('ta',ta);\n                localStorage.setItem('tr',tr);\n               \n                return true;\n            }\n            //console.log(result.data)\n            \n        }\n    } catch (error) {\n        //console.log(error);\n    } \n}\n\nasync function requestRefreshToken(refreshToken,Profile){\n    try {\n        const endPoint ='refreshToken?refreshToken='+refreshToken;\n       \n        const result = await Axios.post(endPoint);\n        \n        if(result.data == false){\n          \n         window.location.href=\"/#/login\";\n        }else{\n           \n            if(result.data.type === \"super\" ){\n                \n                const { accessToken,refreshToken } = result.data.tokens;\n                \n                const ta=accessToken;\n                const tr=refreshToken;\n                \n                \n                localStorage.setItem('ta',ta);\n                localStorage.setItem('tr',tr);\n               // localStorage.setItem('gh',tr);\n               \n                Profile(result.data.data);\n                return true;\n            }\n            //console.log(result.data)\n            \n        }\n    } catch (error) {\n       // console.log(error);\n    }\n   \n}\n/*async function verifyAccessToken(accessToken,Profile){\n\n   try {\n          \n           const endPoint ='veryAccessToken?accessToken='+accessToken;\n           const result = await Axios.post(endPoint);\n           console.log(result)\n\n           if(result.data.success !==undefined && result.data.success == true){\n            if(result.data.type === \"super\"){\n          \n              const { accessToken,refreshToken } = result.data.tokens;\n                \n              const ta=accessToken;\n              const tr=refreshToken;\n             // console.log(result.data.tokens);\n              \n              localStorage.setItem('ta',ta);\n              localStorage.setItem('tr',tr);\n  \n  \n              Profile(result.data.data);\n               return result.data.success;\n            }\n          }else{ return false;}\n\n\n          \n   } catch (error) {\n         console.log(error)\n  }\n\n}*/\n\nasync function veryAccessTokens(accessToken,Profile){\n    try {\n          \n        const endPoint ='veryAccessToken?accessToken='+accessToken;\n        const result = await Axios.post(endPoint);\n      //  console.log(result)\n\n        if(result.data.success !==undefined && result.data.success == true){\n         if(result.data.user.type === \"super\"){\n           \n           \n\n\n            Profile(result.data.user);\n            return result.data.user;\n         }\n       }else{ return false;}\n\n\n       \n} catch (error) {\n     // console.log(error)\n}\n}\n\n\n\nconst Tokens = function(){\n    const accessToken = localStorage.getItem('ta');\n    const refreshToken = localStorage.getItem('tr');\n\n    \n\n    return {accessToken,refreshToken};\n}\n\nexport {requestRefreshToken,Tokens,veryAccessTokens,UpdateToken}","/Users/tony/Documents/Projects/react/Writer/admin/src/Api/config.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/Api/auth/auth.js",["538","539","540","541"],"import Axios from \"../config\";\n\nfunction validateEmail(email){\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\nfunction validateLogin (email,password){\n    if(email !==\"\"){\n        if(validateEmail(email)){\n            if(password !==\"\"){\n                  return true;\n            }else{return \"password is required\"}\n        }else{ return \"wrong email format\"}\n    }else{ return \"email is required\"}\n }\n\n const Loginn = async (email,password,Profile)=>{\n    try {\n         var res = validateLogin(email,password);\n         if(res == true){\n            var data = \"password=\"+password+\"&email=\"+email\n        const endPoint =`Login/admin?${data}`;\n\n       // console.log(endPoint)\n       \n       const result = await Axios.post(endPoint);\n       \n       if(result.data.success !==undefined && result.data.success == true){\n          if(result.data.type === \"super\" || result.data.type ===\"manager\"){\n              \n            const { accessToken,refreshToken } = result.data.tokens;\n            \n            const ta=accessToken;\n            const tr=refreshToken;\n            \n            localStorage.setItem('ta',ta);\n            localStorage.setItem('tr',tr);\n            //localStorage.setItem('if',JSON.stringify(result.data.data));\n\n\n            Profile(result.data.data);\n            return(result.data.success);\n            //window.location.href=\"/#/home\";\n\n          }\n        }else{ return result.data;}\n      \n                  // return false;\n       // return result.data;\n        }else{\n            return res;\n        }\n   } catch (error) {\n         console.log(error)\n   }\n}\n\nconst Activate = async (Key)=>{\n    const key = parseInt(Key);\n   \n\n    const endPoint =`/admin/api/c2/activate/${key}`;\n\n    const result = await Axios.post(endPoint);\n   \n    return result.data;\n\n}\n\nconst Logout = async ()=>{\n    const accessToken = localStorage.getItem('ta');\n    const refreshToken = localStorage.getItem('tr');\n\n     const endPoint = `Logout/${refreshToken}`;\n\n     const result = await Axios.post(endPoint);\n      \n     if(result.data == true){\n        \n         localStorage.clear();\n         window.location.reload();\n     }\n  //  localStorage.setItem('ta',ta);\n   // localStorage.setItem('tr',tr);\n}\n\nexport {\n    Loginn,\n    Logout,\n    Activate\n}","/Users/tony/Documents/Projects/react/Writer/admin/src/Api/Data/requestApi.js",["542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641"],"import axios from 'axios';\nimport download from 'js-file-download';\n\nimport { Tokens, UpdateToken } from \"../authThenticateToken\";\nimport Axios from \"../config\";\nimport Urls from '../urls';\n\n\nconst body =()=>{\n     return{  \n        \"x-access-key\": Tokens().accessToken,\n        \"x-access-token\": Tokens().refreshToken\n      }\n    }\n\n  async function sendUpload(endPoint,formData){\n    try {\n      \n    \n      const result = await Axios.post(endPoint,formData);\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,formData);\n            return Result.data;\n          }\n      }\n      else{\n          return result.data;\n      }\n    } catch (error) {\n       //console.log(error)\n    }\n    }\n  /*  unblockAdmin\n    blockAdmin\n    user_id*/\n const ApiRequest={\n       DashBoardData:async()=>{\n        try {\n            const endPoint =`dashboard`;\n\n            const result = await Axios.post(endPoint,body());\n            if(result.data == false)\n            {\n                const data = await UpdateToken(Tokens().refreshToken);\n                if(data == true)\n                {\n                  const Result = await Axios.post(endPoint,body());\n                  return Result;\n                }\n            }\n            else{\n                return result;\n            }\n     } catch (error) {\n         //console.log(error)\n     }\n       },\n       getOrdersInProgress:async ()=>{\n        try {\n            const endPoint = `in-progress`;\n            const result = await Axios.post(endPoint,body());\n           \n            if(result.data == false){\n             const data = await UpdateToken(Tokens().refreshToken);\n             if(data == true){\n               const Result = await Axios.post(endPoint,body());\n                 \n               return Result;\n             }\n            }else{\n             \n                return result;\n            }\n      } catch (error) {\n            return[];\n          //console.log(error)\n      }\n       },\n\n       RegisterWriter:async (email,username,password,ConfirmPassword,country,address,phone,category)=>{\n\n        var data = 'email='+email+'&username='+username+'&password='+password+'&country='+country+'&address='+address+'&phone='+phone+'&category='+category;\n\n        try {\n          const endPoint =`register/writer?`+data;\n\n          const result = await Axios.post(endPoint,body());\n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n        //console.log(e)\n       }\n\n       },\n       getCategories:async ()=>{\n        try {\n          const endPoint =`category`;\n\n          const result = await Axios.post(endPoint,body());\n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n        //console.log(e)\n       }\n      },\n      getWriters:async()=>{\n        //writers\n        try {\n          const endPoint =`writers`//+data;\n\n          const result = await Axios.post(endPoint,body());\n         \n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n        //console.log(e)\n       }\n      },\n\n\n      BlockAdmin:async(id)=>{\n        try {\n          const endPoint =`blockAdmin?`+\"user_id=\"+id//+data;\n\n          const result = await Axios.post(endPoint,body());\n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n        //console.log(e)\n       }\n      },\n      unblockAdmin:async(id)=>{\n        try {\n          const endPoint =`unblockAdmin?`+\"user_id=\"+id//+data;\n\n          const result = await Axios.post(endPoint,body());\n          \n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n        //console.log(e)\n       }\n      },\n\n\n\n      BlockUser:async(id)=>{\n        try {\n          const endPoint =`block?`+\"user_id=\"+id//+data;\n\n          const result = await Axios.post(endPoint,body());\n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n        //console.log(e)\n       }\n      },\n      unblockUser:async(id)=>{\n        try {\n          const endPoint =`unblock?`+\"user_id=\"+id//+data;\n\n          const result = await Axios.post(endPoint,body());\n          \n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n        //console.log(e)\n       }\n      },\n\n      getUserDetails:async (id)=>{\n       // writer/details/2\n       \n       try {\n        const endPoint =`writer/details/${id}`//+data;\n\n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result.data;\n        }\n     }catch(e){\n      //console.log(e)\n     }\n\n       \n      },\n      getUnAssignedTask:async ()=>{\n         \n        try {\n          const endPoint =`unAssignedTask`//+data;\n  \n          const result = await Axios.post(endPoint,body());\n          \n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n        //console.log(e)\n       }\n        \n\n\n      },\n\n      asignTaskToUser:async(user_id,task_id)=>{\n       \n        try {\n          const endPoint =`AssignTask/${user_id}/${task_id}`;//user_id,task_id\n  \n          const result = await Axios.post(endPoint,body());\n          \n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n\n      },\n\n      postAllowedTaskNumber:async (number)=>{\n        //allowedTask\n        try {\n          const endPoint =`allowedTask/${number}`;//user_id,task_id\n  \n          const result = await Axios.post(endPoint,body());\n          \n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n      },\n\n      postSequence:async (sequence)=>{\n       // sequence\n       try {\n        const endPoint =`sequence/${sequence}`;//user_id,task_id\n\n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n     }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n      },\n\n      updateCategory:async (category,user_id)=>{\n        try {\n          const endPoint =`updateCategory/${category}/${user_id}`;//user_id,task_id\n  \n          const result = await Axios.post(endPoint,body());\n          \n          if(result.data == false)\n          {\n              const data = await UpdateToken(Tokens().refreshToken);\n              if(data == true)\n              {\n                const Result = await Axios.post(endPoint,body());\n                return Result;\n              }\n          }\n          else{\n              return result;\n          }\n       }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n      },\n\n\n      uploadFiles2:async (validFiles)=>{\n        var formData = new FormData();\n        formData.append('files', validFiles);\n        formData.append('control','uploadTaskFile');\n        //formData.append( \"x-access-key\", Tokens().accessToken)\n       // formData.append(\"x-access-token\",Tokens().refreshToken);\n          \n         const result = await axios.post(Urls.fileUploadUrl,formData);\n        \n    \n      if(result.data.status  === \"success\"){\n          var ImagePath = result.data.url;\n          return ImagePath;\n      }\n      else{\n        return false;\n      }\n      },\n\n     uploadFiles:async (task_id,validFiles) => {\n   \n\n           var data = \"?task_id=\"+task_id+\"&imagePath=\"+validFiles;\n            const endPoint =`FileUpload`+data;//user_id,task_id\n            try {\n      \n    \n              const result = await Axios.post(endPoint,body());\n             \n              \n              if(result.data == false)\n              {\n                  const data = await UpdateToken(Tokens().refreshToken);\n\n                  if(data == true)\n                  {\n                    const Result = await Axios.post(endPoint,body());\n                    \n                    //formData=\"\";\n                    return Result.data;\n                  }\n              }\n              else{\n               // formData=\"\";\n                    return result.data;\n                }\n                  \n              \n            } catch (error) {\n          \n            }\n         \n       \n        },\n\n     postTask:async(title,category,time,expectedDate,pages,pricePerpage,totalAmountTobePaid,description,work_type,service,selectedInvoice,selectedInvoiceEndDate,invoiceId)=>{\n      \n    \n      var data = \"title=\"+title+\"&category=\"+category+\"&time=\"+time+\"&expectedDate=\"+expectedDate+\"&pages=\"+pages+\"&pricePerpage=\"+pricePerpage+\"&totalAmountTobePaid=\"+totalAmountTobePaid+\"&description=\"+description+\"&work_type=\"+work_type+\"&service=\"+service+\"&invoiceState=\"+selectedInvoice.replace('#','')+\"&EndDate=\"+selectedInvoiceEndDate+\"&invoiceId=\"+invoiceId;\n      try {\n        const endPoint =`createTask?`+data;///user_id,task_id\n\n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n     }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n\n      },\n\n      getSingleTaskFullDetails:async(task_id)=>{\n      //  getSingleTaskDetails\n      \n      try {\n        const endPoint =`getSingleTaskDetails/${task_id}`;//user_id,task_id\n\n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n\n      }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n      },\n\n\n   \n      getDataFromURL:(url) => new Promise((resolve, reject) => {\n        let headers = new Headers();\n\n        headers.append('Content-Type', 'application/json');\n        headers.append('Accept', 'application/json');\n        //headers.append('Authorization', 'Basic ' + base64.encode(username + \":\" +  password));\n        headers.append('Origin','http://localhost:3000');\n        setTimeout(() => {\n            fetch(url, {\n              mode: 'cors',\n              credentials: 'include',\n              method: 'GET',\n              headers: headers\n          })\n                .then(response => response.text())\n                .then(data => {\n                    resolve(data)\n                });\n        },2000);\n    //}, 2000);\n      }),\n\n      apihelperdownload:async ()=> {\n        return await axios.post(\"http://localhost:4000/peakwriter/api/c1/admin/\"+\"downloadFile\",{responseType: 'blob' }).then(function (response) {\n            return response;\n        })\n    },\n\n    deleteTask:async (taskId)=>{\n      try {\n        const endPoint =`removeTask?id=${taskId}`;//user_id,task_id\n\n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n\n      }catch(e){\n         \n        ////console.log(e)\n        return [];\n       }\n    },\n\n\n    getAssignedTask:async ()=>{\n      try {\n        const endPoint =`getAssignedTask`;//user_id,task_id\n\n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n\n      }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n    },\n\n    CancellOrder:async (taskId)=>{\n      try {\n        const endPoint =`CancellTask?task_id=${taskId}`;//user_id,task_id\n\n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n\n      }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n    },\n\n    getCancelledOrders:async ()=>{\n    //  CancelledOrders\n    try {\n      const endPoint =`CancelledOrders`;//user_id,task_id\n\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n    },\n\n    getOrdersBeingRevised:async ()=>{\n      //Revisions\n      try {\n        const endPoint =`Revisions`;//user_id,task_id\n  \n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n  \n      }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n    },\n    getCompletedOrders:async ()=>{\n      try {\n        const endPoint =`CompletedOrders`;//user_id,task_id\n  \n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n  \n      }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n    },\n\n    getPendingPayments:async ()=>{\n      try {\n        const endPoint =`pendingPayments`;//user_id,task_id\n  \n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n  \n      }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n    },\n\n    markTaskPaid:async (invoice,task_id)=>{\n      \n      try {\n      \n        var data = '?invoice='+invoice.replace('#','')+'&task_id='+task_id;\n        const endPoint =`conFirmPayment`+data;//user_id,task_id\n        //?invoice=${invoice}&task_id=${task_id}\n  \n        const result = await Axios.post(endPoint,body());\n        \n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n  \n      }catch(e){\n         \n        //console.log(e)\n        return [];\n       }\n    },\n\n    LoadInvoices:async ()=>{\n      \n      \n      const endPoint =`LoadInvoices`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n\n    },\n\n    LoadInvoiceDetails:async (invoiceId)=>{\n      const endPoint =`LoadInvoicesDetails?invoiceId=${invoiceId}`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n    },\n\n    getAdminData:async ()=>{\n      //getAdminData\n\n      const endPoint =`getAdminData`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n\n    },\n\n    getRegAdminData:async(id)=>{\n      const endPoint =`getRegAdminData/${id}`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n    },\n\n\n    UpdateProfile2:async(profile)=>{\n      var formData = new FormData();\n      formData.append('files', profile);\n      formData.append('control','adminProfile');\n      //formData.append( \"x-access-key\", Tokens().accessToken)\n     // formData.append(\"x-access-token\",Tokens().refreshToken);\n        \n       const result = await axios.post(Urls.fileUploadUrl,formData);\n      \n  \n    if(result.data.status  === \"success\"){\n        var ImagePath = result.data.url;\n        return ImagePath;\n    }\n    else{\n      return false;\n    }\n  \n    },\n    \n    UpdateProfile:async (profile)=>{\n       var data = \"?imagePath=\"+profile;\n      const endPoint =`updateProfile`+data;//user_id,task_id\n     \n       \n           //await sendUpload(endPoint,formData);\n           try {\n    \n  \n            const result = await Axios.post(endPoint,body());\n           // console.log(result.data)\n            \n            if(result.data == false)\n            {\n                const data = await UpdateToken(Tokens().refreshToken);\n  \n                if(data == true)\n                {\n                  const Result = await Axios.post(endPoint,body());\n                  \n                 // formData=\"\";\n                  return Result.data;\n                }\n            }\n            else{\n             // formData=\"\";\n                return result.data;\n                \n            }\n          } catch (error) {\n            //ormData=\"\";\n            //  //console.log(error)\n          }\n    },\n/*\n    UpdateProfile:async (profile)=>{\n      const endPoint =`updateProfile`;//user_id,task_id\n     \n        var formData = new FormData();\n        formData.append('files', profile);\n        formData.append( \"x-access-key\", Tokens().accessToken)\n        formData.append(\"x-access-token\",Tokens().refreshToken)\n           //await sendUpload(endPoint,formData);\n           try {\n    \n  \n            const result = await Axios.post(endPoint,formData);\n           // console.log(result.data)\n            \n            if(result.data == false)\n            {\n                const data = await UpdateToken(Tokens().refreshToken);\n\n                if(data == true)\n                {\n                  const Result = await Axios.post(endPoint,formData);\n                  \n                  formData=\"\";\n                  return Result.data;\n                }\n            }\n            else{\n              formData=\"\";\n                return result.data;\n                \n            }\n          } catch (error) {\n            formData=\"\";\n            // //console.log(error)\n          }\n    },*/\n\n    UpdateData:async (data)=>{\n        \n      const endPoint =`UpdateProfileData?`+data;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n    },\n\n    getAllAdministrators:async ()=>{\n      const endPoint =`getAdministrators`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n    },\n\n    RegisterAdmins:async (email,username,password,ConfirmPassword,country,address,phone,category)=>{\n\n      var data = 'email='+email+'&username='+username+'&password='+password+'&country='+country+'&address='+address+'&phone='+phone+'&adminLevel='+category;\n\n      try {\n        const endPoint =`register/admin?`+data;\n\n        const result = await Axios.post(endPoint,body());\n        if(result.data == false)\n        {\n            const data = await UpdateToken(Tokens().refreshToken);\n            if(data == true)\n            {\n              const Result = await Axios.post(endPoint,body());\n              return Result;\n            }\n        }\n        else{\n            return result;\n        }\n     }catch(e){\n      //console.log(e)\n     }\n\n     },\n\n     getNewSubmitedFiles:async ()=>{\n     //  alert('ok')\n      const endPoint =`NewSubmitedTask`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n     },\n\n     getSubmitedFiles:async (taskId)=>{\n     if(taskId === \"\" || taskId == undefined){\n       return[];\n     }\n      const endPoint =`NewSubmitedFiles/${taskId}`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n     },\n\n     sendRevisionRequest:async(taskId,message)=>{\n        var data = 'task_id='+taskId+'&message='+message;\n       const endPoint =`requestRevision?`+data;//user_id,task_id\n       //?invoice=${invoice}&task_id=${task_id}\n      try{\n       const result = await Axios.post(endPoint,body());\n       \n       if(result.data == false)\n       {\n           const data = await UpdateToken(Tokens().refreshToken);\n           if(data == true)\n           {\n             const Result = await Axios.post(endPoint,body());\n             return Result;\n           }\n       }\n       else{\n           return result;\n       }\n \n     }catch(e){\n        \n       //console.log(e)\n       return [];\n      }\n     },\n\n     markTaskCompleted:async(task_id)=>{\n      const endPoint =`markComplete/${task_id}`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      //console.log(e)\n      return [];\n     }\n     },\n\n     clearReadNotification:async (notification_id)=>{\n      const endPoint =`clearReadNotification/${notification_id}`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      ////console.log(e)\n      return [];\n     }\n     },\n     loadChatUsers:async (sender,receiver,taskid)=>{\n      const endPoint =`chatUsers/${sender}/${receiver}/${taskid}`;//user_id,task_id\n      //?invoice=${invoice}&task_id=${task_id}\n     try{\n      const result = await Axios.post(endPoint,body());\n      \n      if(result.data == false)\n      {\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true)\n          {\n            const Result = await Axios.post(endPoint,body());\n            return Result;\n          }\n      }\n      else{\n          return result;\n      }\n\n    }catch(e){\n       \n      ////console.log(e)\n      return [];\n     }\n     },\n\n     getOpenTickets:async()=>{\n      try {\n        const endPoint = `Tickets`;\n        const result = await Axios.post(endPoint,body());\n       \n        if(result.data == false){\n         const data = await UpdateToken(Tokens().refreshToken);\n         if(data == true){\n           const Result = await Axios.post(endPoint,body());\n             \n           return Result;\n         }\n        }else{\n         \n            return result;\n        }\n  } catch (error) {\n        return[];\n      //console.log(error)\n  }\n     },\n     ActivateAcount:async(Key)=>{\n      try {\n       // alert(Key)\n        const endPoint = `activate/${Key}`;\n        const result = await Axios.post(endPoint,body());\n       \n        if(result.data == false){\n         const data = await UpdateToken(Tokens().refreshToken);\n         if(data == true){\n           const Result = await Axios.post(endPoint,body());\n             //\n           return Result;\n         }\n        }else{\n         \n            return result;\n        }\n  } catch (error) {\n        //return[];\n      //console.log(error)\n  }\n     },\n     ForgotPassword:async(email)=>{\n      try {\n        const endPoint = `Forgot/${email}`;\n        const result = await Axios.post(endPoint,body());\n        //\n       \n        if(result.data == false){\n         const data = await UpdateToken(Tokens().refreshToken);\n         if(data == true){\n           const Result = await Axios.post(endPoint,body());\n             //\n           return Result;\n         }\n        }else{\n         \n            return result;\n        }\n  } catch (error) {\n        return[];\n      //console.log(error)\n  }\n     },\n\n     fileDownload:async ()=>{\n        \n      try {\n             const endPoint = 'downloadFile';\n            axios.get('http://localhost/~tony/Download/index.php')\n             .then(resp => {\n                    download(resp.data, 'bb.pdf');\n             });\n             \n           \n      } catch (error) {\n        \n      }\n    \n\n\n\n  \n    },\n    \n    LoadOpenInvoices:async ()=>{\n      try {\n        // alert(Key)\n         const endPoint = `LoadOpenInvoices`;\n         const result = await Axios.post(endPoint,body());\n        \n         if(result.data == false){\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true){\n            const Result = await Axios.post(endPoint,body());\n              //\n            return Result;\n          }\n         }else{\n          \n             return result;\n         }\n   } catch (error) {\n         //return[];\n       //console.log(error)\n   }\n    },\n\n    CloseInvoice:async (invoice_id)=>{\n      try {\n        // alert(Key)\n         const endPoint = `CloseInvoice/${invoice_id}`;\n         const result = await Axios.post(endPoint,body());\n        \n         if(result.data == false){\n          const data = await UpdateToken(Tokens().refreshToken);\n          if(data == true){\n            const Result = await Axios.post(endPoint,body());\n              //\n            return Result;\n          }\n         }else{\n          \n             return result;\n         }\n   } catch (error) {\n         //return[];\n       //console.log(error)\n   }\n    }\n\n\n }   \n    \n\nexport  default ApiRequest;","/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Users/writers/formValidate.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/idleTimeDetection.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/sound.js",["642","643"],"/Users/tony/Documents/Projects/react/Writer/admin/src/Api/urls.js",[],"/Users/tony/Documents/Projects/react/Writer/admin/src/Api/auth/UrlParams.js",["644","645","646","647"],"function UrlParams(param){\n    var query = window.location.href;\n    \n    var vars = query.split(\"&\");\n   \n    for (var i=0;i<vars.length;i++) {\n  \n      if(i ==0){\n         var first = vars[i].split(\"?\");\n         if(first[1] == undefined){ return false;}\n         \n          var pair = first[1].split(\"=\");\n        }else{\n         var pair= vars[i].split(\"=\");\n        }\n        \n    if(pair[0] == param){\n      \n  \n      return pair[1]\n    }\n     }\n  }\n\n  export {\n      UrlParams\n  }",{"ruleId":"648","severity":1,"message":"649","line":4,"column":8,"nodeType":"650","messageId":"651","endLine":4,"endColumn":10},{"ruleId":"652","severity":1,"message":"653","line":73,"column":16,"nodeType":"654","messageId":"655","endLine":73,"endColumn":18},{"ruleId":"652","severity":1,"message":"653","line":75,"column":23,"nodeType":"654","messageId":"655","endLine":75,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":77,"column":25,"nodeType":"654","messageId":"655","endLine":77,"endColumn":27},{"ruleId":"648","severity":1,"message":"656","line":8,"column":3,"nodeType":"650","messageId":"651","endLine":8,"endColumn":12},{"ruleId":"648","severity":1,"message":"657","line":3,"column":3,"nodeType":"650","messageId":"651","endLine":3,"endColumn":9},{"ruleId":"648","severity":1,"message":"658","line":5,"column":3,"nodeType":"650","messageId":"651","endLine":5,"endColumn":16},{"ruleId":"648","severity":1,"message":"659","line":6,"column":3,"nodeType":"650","messageId":"651","endLine":6,"endColumn":16},{"ruleId":"648","severity":1,"message":"656","line":8,"column":3,"nodeType":"650","messageId":"651","endLine":8,"endColumn":12},{"ruleId":"648","severity":1,"message":"660","line":1,"column":17,"nodeType":"650","messageId":"651","endLine":1,"endColumn":26},{"ruleId":"652","severity":1,"message":"661","line":30,"column":24,"nodeType":"654","messageId":"655","endLine":30,"endColumn":26},{"ruleId":"648","severity":1,"message":"662","line":44,"column":7,"nodeType":"650","messageId":"651","endLine":44,"endColumn":12},{"ruleId":"648","severity":1,"message":"657","line":3,"column":3,"nodeType":"650","messageId":"651","endLine":3,"endColumn":9},{"ruleId":"663","severity":1,"message":"664","line":8,"column":9,"nodeType":"665","endLine":8,"endColumn":63},{"ruleId":"663","severity":1,"message":"664","line":13,"column":9,"nodeType":"665","endLine":13,"endColumn":63},{"ruleId":"648","severity":1,"message":"666","line":30,"column":10,"nodeType":"650","messageId":"651","endLine":30,"endColumn":15},{"ruleId":"667","severity":1,"message":"668","line":64,"column":5,"nodeType":"669","endLine":64,"endColumn":15,"suggestions":"670"},{"ruleId":"648","severity":1,"message":"671","line":1,"column":10,"nodeType":"650","messageId":"651","endLine":1,"endColumn":18},{"ruleId":"667","severity":1,"message":"672","line":43,"column":7,"nodeType":"669","endLine":43,"endColumn":9,"suggestions":"673"},{"ruleId":"663","severity":1,"message":"664","line":20,"column":5,"nodeType":"665","endLine":20,"endColumn":106},{"ruleId":"652","severity":1,"message":"653","line":20,"column":20,"nodeType":"654","messageId":"655","endLine":20,"endColumn":22},{"ruleId":"674","severity":1,"message":"675","line":20,"column":85,"nodeType":"676","messageId":"677","endLine":20,"endColumn":105},{"ruleId":"663","severity":1,"message":"664","line":25,"column":5,"nodeType":"665","endLine":27,"endColumn":32},{"ruleId":"652","severity":1,"message":"653","line":25,"column":20,"nodeType":"654","messageId":"655","endLine":25,"endColumn":22},{"ruleId":"674","severity":1,"message":"675","line":27,"column":11,"nodeType":"676","messageId":"677","endLine":27,"endColumn":31},{"ruleId":"663","severity":1,"message":"664","line":32,"column":5,"nodeType":"665","endLine":34,"endColumn":32},{"ruleId":"652","severity":1,"message":"653","line":32,"column":20,"nodeType":"654","messageId":"655","endLine":32,"endColumn":22},{"ruleId":"674","severity":1,"message":"675","line":34,"column":11,"nodeType":"676","messageId":"677","endLine":34,"endColumn":31},{"ruleId":"648","severity":1,"message":"678","line":13,"column":7,"nodeType":"650","messageId":"651","endLine":13,"endColumn":14},{"ruleId":"648","severity":1,"message":"679","line":49,"column":7,"nodeType":"650","messageId":"651","endLine":49,"endColumn":12},{"ruleId":"648","severity":1,"message":"680","line":100,"column":9,"nodeType":"650","messageId":"651","endLine":100,"endColumn":17},{"ruleId":"663","severity":1,"message":"664","line":23,"column":7,"nodeType":"665","endLine":23,"endColumn":108},{"ruleId":"652","severity":1,"message":"653","line":23,"column":22,"nodeType":"654","messageId":"655","endLine":23,"endColumn":24},{"ruleId":"674","severity":1,"message":"675","line":23,"column":87,"nodeType":"676","messageId":"677","endLine":23,"endColumn":107},{"ruleId":"663","severity":1,"message":"664","line":28,"column":7,"nodeType":"665","endLine":30,"endColumn":34},{"ruleId":"652","severity":1,"message":"653","line":28,"column":22,"nodeType":"654","messageId":"655","endLine":28,"endColumn":24},{"ruleId":"674","severity":1,"message":"675","line":30,"column":13,"nodeType":"676","messageId":"677","endLine":30,"endColumn":33},{"ruleId":"663","severity":1,"message":"664","line":35,"column":3,"nodeType":"665","endLine":37,"endColumn":29},{"ruleId":"652","severity":1,"message":"653","line":35,"column":18,"nodeType":"654","messageId":"655","endLine":35,"endColumn":20},{"ruleId":"674","severity":1,"message":"675","line":37,"column":8,"nodeType":"676","messageId":"677","endLine":37,"endColumn":28},{"ruleId":"663","severity":1,"message":"664","line":40,"column":5,"nodeType":"665","endLine":42,"endColumn":31},{"ruleId":"652","severity":1,"message":"653","line":40,"column":20,"nodeType":"654","messageId":"655","endLine":40,"endColumn":22},{"ruleId":"674","severity":1,"message":"675","line":42,"column":10,"nodeType":"676","messageId":"677","endLine":42,"endColumn":30},{"ruleId":"663","severity":1,"message":"664","line":45,"column":5,"nodeType":"665","endLine":47,"endColumn":31},{"ruleId":"652","severity":1,"message":"653","line":45,"column":20,"nodeType":"654","messageId":"655","endLine":45,"endColumn":22},{"ruleId":"674","severity":1,"message":"675","line":47,"column":10,"nodeType":"676","messageId":"677","endLine":47,"endColumn":30},{"ruleId":"663","severity":1,"message":"664","line":50,"column":5,"nodeType":"665","endLine":52,"endColumn":31},{"ruleId":"652","severity":1,"message":"653","line":50,"column":20,"nodeType":"654","messageId":"655","endLine":50,"endColumn":22},{"ruleId":"674","severity":1,"message":"675","line":52,"column":10,"nodeType":"676","messageId":"677","endLine":52,"endColumn":30},{"ruleId":"648","severity":1,"message":"681","line":6,"column":17,"nodeType":"650","messageId":"651","endLine":6,"endColumn":23},{"ruleId":"648","severity":1,"message":"682","line":36,"column":10,"nodeType":"650","messageId":"651","endLine":36,"endColumn":22},{"ruleId":"648","severity":1,"message":"683","line":36,"column":23,"nodeType":"650","messageId":"651","endLine":36,"endColumn":36},{"ruleId":"652","severity":1,"message":"653","line":215,"column":13,"nodeType":"654","messageId":"655","endLine":215,"endColumn":15},{"ruleId":"652","severity":1,"message":"653","line":220,"column":21,"nodeType":"654","messageId":"655","endLine":220,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":241,"column":19,"nodeType":"654","messageId":"655","endLine":241,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":248,"column":15,"nodeType":"654","messageId":"655","endLine":248,"endColumn":17},{"ruleId":"648","severity":1,"message":"684","line":1,"column":8,"nodeType":"650","messageId":"651","endLine":1,"endColumn":16},{"ruleId":"667","severity":1,"message":"685","line":61,"column":5,"nodeType":"669","endLine":61,"endColumn":7,"suggestions":"686"},{"ruleId":"648","severity":1,"message":"680","line":165,"column":13,"nodeType":"650","messageId":"651","endLine":165,"endColumn":21},{"ruleId":"648","severity":1,"message":"687","line":63,"column":9,"nodeType":"650","messageId":"651","endLine":63,"endColumn":23},{"ruleId":"667","severity":1,"message":"688","line":129,"column":4,"nodeType":"669","endLine":129,"endColumn":6,"suggestions":"689"},{"ruleId":"648","severity":1,"message":"690","line":10,"column":8,"nodeType":"650","messageId":"651","endLine":10,"endColumn":20},{"ruleId":"648","severity":1,"message":"691","line":11,"column":10,"nodeType":"650","messageId":"651","endLine":11,"endColumn":17},{"ruleId":"648","severity":1,"message":"692","line":40,"column":28,"nodeType":"650","messageId":"651","endLine":40,"endColumn":48},{"ruleId":"648","severity":1,"message":"693","line":48,"column":12,"nodeType":"650","messageId":"651","endLine":48,"endColumn":20},{"ruleId":"648","severity":1,"message":"694","line":49,"column":10,"nodeType":"650","messageId":"651","endLine":49,"endColumn":17},{"ruleId":"648","severity":1,"message":"695","line":59,"column":13,"nodeType":"650","messageId":"651","endLine":59,"endColumn":24},{"ruleId":"652","severity":1,"message":"661","line":86,"column":54,"nodeType":"654","messageId":"655","endLine":86,"endColumn":56},{"ruleId":"696","severity":1,"message":"697","line":87,"column":35,"nodeType":"698","messageId":"699","endLine":87,"endColumn":37},{"ruleId":"652","severity":1,"message":"653","line":94,"column":70,"nodeType":"654","messageId":"655","endLine":94,"endColumn":72},{"ruleId":"652","severity":1,"message":"653","line":94,"column":149,"nodeType":"654","messageId":"655","endLine":94,"endColumn":151},{"ruleId":"652","severity":1,"message":"653","line":107,"column":23,"nodeType":"654","messageId":"655","endLine":107,"endColumn":25},{"ruleId":"667","severity":1,"message":"700","line":115,"column":9,"nodeType":"669","endLine":115,"endColumn":11,"suggestions":"701"},{"ruleId":"652","severity":1,"message":"653","line":141,"column":34,"nodeType":"654","messageId":"655","endLine":141,"endColumn":36},{"ruleId":"652","severity":1,"message":"653","line":172,"column":27,"nodeType":"654","messageId":"655","endLine":172,"endColumn":29},{"ruleId":"652","severity":1,"message":"653","line":200,"column":21,"nodeType":"654","messageId":"655","endLine":200,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":202,"column":34,"nodeType":"654","messageId":"655","endLine":202,"endColumn":36},{"ruleId":"652","severity":1,"message":"653","line":248,"column":41,"nodeType":"654","messageId":"655","endLine":248,"endColumn":43},{"ruleId":"648","severity":1,"message":"680","line":296,"column":13,"nodeType":"650","messageId":"651","endLine":296,"endColumn":21},{"ruleId":"667","severity":1,"message":"702","line":56,"column":8,"nodeType":"669","endLine":56,"endColumn":10,"suggestions":"703"},{"ruleId":"648","severity":1,"message":"704","line":3,"column":10,"nodeType":"650","messageId":"651","endLine":3,"endColumn":15},{"ruleId":"648","severity":1,"message":"705","line":7,"column":7,"nodeType":"650","messageId":"651","endLine":7,"endColumn":15},{"ruleId":"648","severity":1,"message":"706","line":23,"column":12,"nodeType":"650","messageId":"651","endLine":23,"endColumn":18},{"ruleId":"652","severity":1,"message":"653","line":79,"column":17,"nodeType":"654","messageId":"655","endLine":79,"endColumn":19},{"ruleId":"667","severity":1,"message":"707","line":95,"column":7,"nodeType":"669","endLine":95,"endColumn":9,"suggestions":"708"},{"ruleId":"709","severity":1,"message":"710","line":136,"column":13,"nodeType":"665","endLine":136,"endColumn":117},{"ruleId":"696","severity":1,"message":"711","line":150,"column":24,"nodeType":"698","messageId":"712","endLine":150,"endColumn":26},{"ruleId":"709","severity":1,"message":"710","line":161,"column":92,"nodeType":"665","endLine":161,"endColumn":190},{"ruleId":"709","severity":1,"message":"710","line":168,"column":30,"nodeType":"665","endLine":168,"endColumn":134},{"ruleId":"709","severity":1,"message":"710","line":181,"column":29,"nodeType":"665","endLine":181,"endColumn":133},{"ruleId":"709","severity":1,"message":"710","line":200,"column":73,"nodeType":"665","endLine":200,"endColumn":171},{"ruleId":"652","severity":1,"message":"653","line":43,"column":19,"nodeType":"654","messageId":"655","endLine":43,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":45,"column":32,"nodeType":"654","messageId":"655","endLine":45,"endColumn":34},{"ruleId":"648","severity":1,"message":"713","line":89,"column":11,"nodeType":"650","messageId":"651","endLine":89,"endColumn":15},{"ruleId":"652","severity":1,"message":"653","line":94,"column":20,"nodeType":"654","messageId":"655","endLine":94,"endColumn":22},{"ruleId":"667","severity":1,"message":"714","line":144,"column":7,"nodeType":"669","endLine":144,"endColumn":9,"suggestions":"715"},{"ruleId":"652","severity":1,"message":"653","line":174,"column":30,"nodeType":"654","messageId":"655","endLine":174,"endColumn":32},{"ruleId":"652","severity":1,"message":"653","line":206,"column":23,"nodeType":"654","messageId":"655","endLine":206,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":220,"column":8,"nodeType":"654","messageId":"655","endLine":220,"endColumn":10},{"ruleId":"652","severity":1,"message":"653","line":231,"column":42,"nodeType":"654","messageId":"655","endLine":231,"endColumn":44},{"ruleId":"648","severity":1,"message":"680","line":279,"column":13,"nodeType":"650","messageId":"651","endLine":279,"endColumn":21},{"ruleId":"648","severity":1,"message":"716","line":1,"column":10,"nodeType":"650","messageId":"651","endLine":1,"endColumn":16},{"ruleId":"648","severity":1,"message":"717","line":5,"column":8,"nodeType":"650","messageId":"651","endLine":5,"endColumn":19},{"ruleId":"652","severity":1,"message":"653","line":16,"column":21,"nodeType":"654","messageId":"655","endLine":16,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":35,"column":17,"nodeType":"654","messageId":"655","endLine":35,"endColumn":19},{"ruleId":"648","severity":1,"message":"704","line":2,"column":10,"nodeType":"650","messageId":"651","endLine":2,"endColumn":15},{"ruleId":"648","severity":1,"message":"683","line":11,"column":25,"nodeType":"650","messageId":"651","endLine":11,"endColumn":38},{"ruleId":"648","severity":1,"message":"718","line":19,"column":12,"nodeType":"650","messageId":"651","endLine":19,"endColumn":20},{"ruleId":"648","severity":1,"message":"719","line":19,"column":21,"nodeType":"650","messageId":"651","endLine":19,"endColumn":32},{"ruleId":"648","severity":1,"message":"720","line":21,"column":12,"nodeType":"650","messageId":"651","endLine":21,"endColumn":18},{"ruleId":"648","severity":1,"message":"721","line":21,"column":19,"nodeType":"650","messageId":"651","endLine":21,"endColumn":28},{"ruleId":"648","severity":1,"message":"671","line":3,"column":10,"nodeType":"650","messageId":"651","endLine":3,"endColumn":18},{"ruleId":"648","severity":1,"message":"722","line":2,"column":8,"nodeType":"650","messageId":"651","endLine":2,"endColumn":20},{"ruleId":"648","severity":1,"message":"723","line":22,"column":14,"nodeType":"650","messageId":"651","endLine":22,"endColumn":26},{"ruleId":"648","severity":1,"message":"724","line":46,"column":11,"nodeType":"650","messageId":"651","endLine":46,"endColumn":19},{"ruleId":"667","severity":1,"message":"725","line":69,"column":7,"nodeType":"669","endLine":69,"endColumn":9,"suggestions":"726"},{"ruleId":"727","severity":1,"message":"728","line":293,"column":10,"nodeType":"729","messageId":"655","endLine":293,"endColumn":16},{"ruleId":"648","severity":1,"message":"730","line":7,"column":14,"nodeType":"650","messageId":"651","endLine":7,"endColumn":18},{"ruleId":"648","severity":1,"message":"731","line":7,"column":19,"nodeType":"650","messageId":"651","endLine":7,"endColumn":26},{"ruleId":"667","severity":1,"message":"732","line":37,"column":9,"nodeType":"669","endLine":37,"endColumn":11,"suggestions":"733"},{"ruleId":"648","severity":1,"message":"734","line":91,"column":13,"nodeType":"650","messageId":"651","endLine":91,"endColumn":21},{"ruleId":"727","severity":1,"message":"728","line":204,"column":8,"nodeType":"729","messageId":"655","endLine":204,"endColumn":14},{"ruleId":"648","severity":1,"message":"735","line":11,"column":12,"nodeType":"650","messageId":"651","endLine":11,"endColumn":18},{"ruleId":"648","severity":1,"message":"736","line":11,"column":19,"nodeType":"650","messageId":"651","endLine":11,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":35,"column":18,"nodeType":"654","messageId":"655","endLine":35,"endColumn":20},{"ruleId":"652","severity":1,"message":"653","line":46,"column":19,"nodeType":"654","messageId":"655","endLine":46,"endColumn":21},{"ruleId":"667","severity":1,"message":"737","line":140,"column":7,"nodeType":"669","endLine":140,"endColumn":9,"suggestions":"738"},{"ruleId":"652","severity":1,"message":"653","line":166,"column":53,"nodeType":"654","messageId":"655","endLine":166,"endColumn":55},{"ruleId":"667","severity":1,"message":"739","line":263,"column":4,"nodeType":"669","endLine":263,"endColumn":6,"suggestions":"740"},{"ruleId":"667","severity":1,"message":"741","line":54,"column":3,"nodeType":"669","endLine":54,"endColumn":5,"suggestions":"742"},{"ruleId":"648","severity":1,"message":"680","line":117,"column":13,"nodeType":"650","messageId":"651","endLine":117,"endColumn":21},{"ruleId":"667","severity":1,"message":"743","line":30,"column":8,"nodeType":"669","endLine":30,"endColumn":23,"suggestions":"744"},{"ruleId":"648","severity":1,"message":"745","line":137,"column":11,"nodeType":"650","messageId":"651","endLine":137,"endColumn":22},{"ruleId":"746","severity":1,"message":"747","line":72,"column":189,"nodeType":"748","messageId":"749","endLine":72,"endColumn":218},{"ruleId":"727","severity":1,"message":"728","line":38,"column":19,"nodeType":"729","messageId":"655","endLine":38,"endColumn":25},{"ruleId":"727","severity":1,"message":"728","line":56,"column":19,"nodeType":"729","messageId":"655","endLine":56,"endColumn":25},{"ruleId":"648","severity":1,"message":"750","line":3,"column":8,"nodeType":"650","messageId":"651","endLine":3,"endColumn":17},{"ruleId":"648","severity":1,"message":"730","line":11,"column":12,"nodeType":"650","messageId":"651","endLine":11,"endColumn":16},{"ruleId":"648","severity":1,"message":"731","line":11,"column":18,"nodeType":"650","messageId":"651","endLine":11,"endColumn":25},{"ruleId":"648","severity":1,"message":"682","line":12,"column":12,"nodeType":"650","messageId":"651","endLine":12,"endColumn":24},{"ruleId":"648","severity":1,"message":"683","line":12,"column":25,"nodeType":"650","messageId":"651","endLine":12,"endColumn":38},{"ruleId":"648","severity":1,"message":"751","line":15,"column":12,"nodeType":"650","messageId":"651","endLine":15,"endColumn":20},{"ruleId":"648","severity":1,"message":"752","line":15,"column":21,"nodeType":"650","messageId":"651","endLine":15,"endColumn":32},{"ruleId":"648","severity":1,"message":"753","line":16,"column":12,"nodeType":"650","messageId":"651","endLine":16,"endColumn":27},{"ruleId":"648","severity":1,"message":"754","line":16,"column":28,"nodeType":"650","messageId":"651","endLine":16,"endColumn":46},{"ruleId":"648","severity":1,"message":"755","line":24,"column":12,"nodeType":"650","messageId":"651","endLine":24,"endColumn":19},{"ruleId":"648","severity":1,"message":"756","line":24,"column":20,"nodeType":"650","messageId":"651","endLine":24,"endColumn":30},{"ruleId":"648","severity":1,"message":"720","line":32,"column":12,"nodeType":"650","messageId":"651","endLine":32,"endColumn":18},{"ruleId":"648","severity":1,"message":"721","line":32,"column":19,"nodeType":"650","messageId":"651","endLine":32,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":73,"column":28,"nodeType":"654","messageId":"655","endLine":73,"endColumn":30},{"ruleId":"652","severity":1,"message":"653","line":105,"column":21,"nodeType":"654","messageId":"655","endLine":105,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":119,"column":12,"nodeType":"654","messageId":"655","endLine":119,"endColumn":14},{"ruleId":"652","severity":1,"message":"653","line":130,"column":65,"nodeType":"654","messageId":"655","endLine":130,"endColumn":67},{"ruleId":"667","severity":1,"message":"757","line":138,"column":7,"nodeType":"669","endLine":138,"endColumn":9,"suggestions":"758"},{"ruleId":"648","severity":1,"message":"657","line":3,"column":3,"nodeType":"650","messageId":"651","endLine":3,"endColumn":9},{"ruleId":"667","severity":1,"message":"759","line":51,"column":5,"nodeType":"669","endLine":51,"endColumn":7,"suggestions":"760"},{"ruleId":"652","severity":1,"message":"653","line":71,"column":20,"nodeType":"654","messageId":"655","endLine":71,"endColumn":22},{"ruleId":"667","severity":1,"message":"761","line":39,"column":5,"nodeType":"669","endLine":39,"endColumn":7,"suggestions":"762"},{"ruleId":"648","severity":1,"message":"680","line":100,"column":13,"nodeType":"650","messageId":"651","endLine":100,"endColumn":21},{"ruleId":"667","severity":1,"message":"763","line":96,"column":5,"nodeType":"669","endLine":96,"endColumn":7,"suggestions":"764"},{"ruleId":"648","severity":1,"message":"680","line":153,"column":13,"nodeType":"650","messageId":"651","endLine":153,"endColumn":21},{"ruleId":"667","severity":1,"message":"765","line":59,"column":5,"nodeType":"669","endLine":59,"endColumn":7,"suggestions":"766"},{"ruleId":"648","severity":1,"message":"767","line":114,"column":9,"nodeType":"650","messageId":"651","endLine":114,"endColumn":23},{"ruleId":"648","severity":1,"message":"690","line":2,"column":8,"nodeType":"650","messageId":"651","endLine":2,"endColumn":20},{"ruleId":"648","severity":1,"message":"718","line":13,"column":15,"nodeType":"650","messageId":"651","endLine":13,"endColumn":23},{"ruleId":"648","severity":1,"message":"719","line":13,"column":24,"nodeType":"650","messageId":"651","endLine":13,"endColumn":35},{"ruleId":"648","severity":1,"message":"768","line":19,"column":14,"nodeType":"650","messageId":"651","endLine":19,"endColumn":20},{"ruleId":"648","severity":1,"message":"692","line":21,"column":31,"nodeType":"650","messageId":"651","endLine":21,"endColumn":51},{"ruleId":"648","severity":1,"message":"694","line":29,"column":14,"nodeType":"650","messageId":"651","endLine":29,"endColumn":21},{"ruleId":"667","severity":1,"message":"769","line":42,"column":11,"nodeType":"669","endLine":42,"endColumn":13,"suggestions":"770"},{"ruleId":"652","severity":1,"message":"653","line":75,"column":19,"nodeType":"654","messageId":"655","endLine":75,"endColumn":21},{"ruleId":"648","severity":1,"message":"771","line":100,"column":11,"nodeType":"650","messageId":"651","endLine":100,"endColumn":19},{"ruleId":"648","severity":1,"message":"772","line":104,"column":11,"nodeType":"650","messageId":"651","endLine":104,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":140,"column":28,"nodeType":"654","messageId":"655","endLine":140,"endColumn":30},{"ruleId":"652","severity":1,"message":"653","line":171,"column":21,"nodeType":"654","messageId":"655","endLine":171,"endColumn":23},{"ruleId":"652","severity":1,"message":"661","line":194,"column":44,"nodeType":"654","messageId":"655","endLine":194,"endColumn":46},{"ruleId":"696","severity":1,"message":"697","line":195,"column":25,"nodeType":"698","messageId":"699","endLine":195,"endColumn":27},{"ruleId":"652","severity":1,"message":"653","line":213,"column":15,"nodeType":"654","messageId":"655","endLine":213,"endColumn":17},{"ruleId":"648","severity":1,"message":"680","line":232,"column":11,"nodeType":"650","messageId":"651","endLine":232,"endColumn":19},{"ruleId":"667","severity":1,"message":"725","line":22,"column":7,"nodeType":"669","endLine":22,"endColumn":9,"suggestions":"773"},{"ruleId":"648","severity":1,"message":"774","line":11,"column":12,"nodeType":"650","messageId":"651","endLine":11,"endColumn":15},{"ruleId":"648","severity":1,"message":"775","line":12,"column":12,"nodeType":"650","messageId":"651","endLine":12,"endColumn":15},{"ruleId":"652","severity":1,"message":"653","line":33,"column":17,"nodeType":"654","messageId":"655","endLine":33,"endColumn":19},{"ruleId":"652","severity":1,"message":"653","line":69,"column":11,"nodeType":"654","messageId":"655","endLine":69,"endColumn":13},{"ruleId":"667","severity":1,"message":"776","line":80,"column":3,"nodeType":"669","endLine":80,"endColumn":5,"suggestions":"777"},{"ruleId":"648","severity":1,"message":"660","line":5,"column":10,"nodeType":"650","messageId":"651","endLine":5,"endColumn":19},{"ruleId":"648","severity":1,"message":"778","line":9,"column":12,"nodeType":"650","messageId":"651","endLine":9,"endColumn":15},{"ruleId":"652","severity":1,"message":"653","line":8,"column":24,"nodeType":"654","messageId":"655","endLine":8,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":40,"column":24,"nodeType":"654","messageId":"655","endLine":40,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":109,"column":68,"nodeType":"654","messageId":"655","endLine":109,"endColumn":70},{"ruleId":"652","severity":1,"message":"653","line":20,"column":17,"nodeType":"654","messageId":"655","endLine":20,"endColumn":19},{"ruleId":"652","severity":1,"message":"653","line":28,"column":67,"nodeType":"654","messageId":"655","endLine":28,"endColumn":69},{"ruleId":"648","severity":1,"message":"779","line":71,"column":11,"nodeType":"650","messageId":"651","endLine":71,"endColumn":22},{"ruleId":"652","severity":1,"message":"653","line":78,"column":21,"nodeType":"654","messageId":"655","endLine":78,"endColumn":23},{"ruleId":"648","severity":1,"message":"780","line":16,"column":18,"nodeType":"650","messageId":"651","endLine":16,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":22,"column":22,"nodeType":"654","messageId":"655","endLine":22,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":25,"column":19,"nodeType":"654","messageId":"655","endLine":25,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":47,"column":28,"nodeType":"654","messageId":"655","endLine":47,"endColumn":30},{"ruleId":"652","severity":1,"message":"653","line":50,"column":25,"nodeType":"654","messageId":"655","endLine":50,"endColumn":27},{"ruleId":"652","severity":1,"message":"653","line":68,"column":28,"nodeType":"654","messageId":"655","endLine":68,"endColumn":30},{"ruleId":"652","severity":1,"message":"653","line":70,"column":22,"nodeType":"654","messageId":"655","endLine":70,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":93,"column":26,"nodeType":"654","messageId":"655","endLine":93,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":96,"column":23,"nodeType":"654","messageId":"655","endLine":96,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":115,"column":26,"nodeType":"654","messageId":"655","endLine":115,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":118,"column":23,"nodeType":"654","messageId":"655","endLine":118,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":138,"column":26,"nodeType":"654","messageId":"655","endLine":138,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":141,"column":23,"nodeType":"654","messageId":"655","endLine":141,"endColumn":25},{"ruleId":"781","severity":1,"message":"782","line":158,"column":40,"nodeType":"654","messageId":"783","endLine":158,"endColumn":41},{"ruleId":"652","severity":1,"message":"653","line":161,"column":26,"nodeType":"654","messageId":"655","endLine":161,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":164,"column":23,"nodeType":"654","messageId":"655","endLine":164,"endColumn":25},{"ruleId":"781","severity":1,"message":"782","line":179,"column":42,"nodeType":"654","messageId":"783","endLine":179,"endColumn":43},{"ruleId":"652","severity":1,"message":"653","line":183,"column":26,"nodeType":"654","messageId":"655","endLine":183,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":186,"column":23,"nodeType":"654","messageId":"655","endLine":186,"endColumn":25},{"ruleId":"781","severity":1,"message":"782","line":204,"column":35,"nodeType":"654","messageId":"783","endLine":204,"endColumn":36},{"ruleId":"652","severity":1,"message":"653","line":207,"column":26,"nodeType":"654","messageId":"655","endLine":207,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":210,"column":23,"nodeType":"654","messageId":"655","endLine":210,"endColumn":25},{"ruleId":"781","severity":1,"message":"782","line":225,"column":37,"nodeType":"654","messageId":"783","endLine":225,"endColumn":38},{"ruleId":"652","severity":1,"message":"653","line":229,"column":26,"nodeType":"654","messageId":"655","endLine":229,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":232,"column":23,"nodeType":"654","messageId":"655","endLine":232,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":254,"column":24,"nodeType":"654","messageId":"655","endLine":254,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":257,"column":21,"nodeType":"654","messageId":"655","endLine":257,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":279,"column":26,"nodeType":"654","messageId":"655","endLine":279,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":282,"column":23,"nodeType":"654","messageId":"655","endLine":282,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":306,"column":26,"nodeType":"654","messageId":"655","endLine":306,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":309,"column":23,"nodeType":"654","messageId":"655","endLine":309,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":333,"column":26,"nodeType":"654","messageId":"655","endLine":333,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":336,"column":23,"nodeType":"654","messageId":"655","endLine":336,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":359,"column":24,"nodeType":"654","messageId":"655","endLine":359,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":362,"column":21,"nodeType":"654","messageId":"655","endLine":362,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":384,"column":26,"nodeType":"654","messageId":"655","endLine":384,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":387,"column":23,"nodeType":"654","messageId":"655","endLine":387,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":434,"column":30,"nodeType":"654","messageId":"655","endLine":434,"endColumn":32},{"ruleId":"652","severity":1,"message":"653","line":438,"column":27,"nodeType":"654","messageId":"655","endLine":438,"endColumn":29},{"ruleId":"652","severity":1,"message":"653","line":468,"column":24,"nodeType":"654","messageId":"655","endLine":468,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":471,"column":21,"nodeType":"654","messageId":"655","endLine":471,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":496,"column":24,"nodeType":"654","messageId":"655","endLine":496,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":499,"column":21,"nodeType":"654","messageId":"655","endLine":499,"endColumn":23},{"ruleId":"781","severity":1,"message":"782","line":541,"column":81,"nodeType":"654","messageId":"783","endLine":541,"endColumn":82},{"ruleId":"652","severity":1,"message":"653","line":552,"column":24,"nodeType":"654","messageId":"655","endLine":552,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":555,"column":21,"nodeType":"654","messageId":"655","endLine":555,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":579,"column":24,"nodeType":"654","messageId":"655","endLine":579,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":582,"column":21,"nodeType":"654","messageId":"655","endLine":582,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":605,"column":24,"nodeType":"654","messageId":"655","endLine":605,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":608,"column":21,"nodeType":"654","messageId":"655","endLine":608,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":632,"column":22,"nodeType":"654","messageId":"655","endLine":632,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":635,"column":19,"nodeType":"654","messageId":"655","endLine":635,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":659,"column":24,"nodeType":"654","messageId":"655","endLine":659,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":662,"column":21,"nodeType":"654","messageId":"655","endLine":662,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":684,"column":24,"nodeType":"654","messageId":"655","endLine":684,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":687,"column":21,"nodeType":"654","messageId":"655","endLine":687,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":710,"column":24,"nodeType":"654","messageId":"655","endLine":710,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":713,"column":21,"nodeType":"654","messageId":"655","endLine":713,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":740,"column":24,"nodeType":"654","messageId":"655","endLine":740,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":743,"column":21,"nodeType":"654","messageId":"655","endLine":743,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":768,"column":22,"nodeType":"654","messageId":"655","endLine":768,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":771,"column":19,"nodeType":"654","messageId":"655","endLine":771,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":795,"column":22,"nodeType":"654","messageId":"655","endLine":795,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":798,"column":19,"nodeType":"654","messageId":"655","endLine":798,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":823,"column":22,"nodeType":"654","messageId":"655","endLine":823,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":826,"column":19,"nodeType":"654","messageId":"655","endLine":826,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":850,"column":22,"nodeType":"654","messageId":"655","endLine":850,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":853,"column":19,"nodeType":"654","messageId":"655","endLine":853,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":903,"column":28,"nodeType":"654","messageId":"655","endLine":903,"endColumn":30},{"ruleId":"652","severity":1,"message":"653","line":907,"column":25,"nodeType":"654","messageId":"655","endLine":907,"endColumn":27},{"ruleId":"652","severity":1,"message":"653","line":970,"column":22,"nodeType":"654","messageId":"655","endLine":970,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":973,"column":19,"nodeType":"654","messageId":"655","endLine":973,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":996,"column":22,"nodeType":"654","messageId":"655","endLine":996,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":999,"column":19,"nodeType":"654","messageId":"655","endLine":999,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":1024,"column":24,"nodeType":"654","messageId":"655","endLine":1024,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":1027,"column":21,"nodeType":"654","messageId":"655","endLine":1027,"endColumn":23},{"ruleId":"652","severity":1,"message":"653","line":1049,"column":22,"nodeType":"654","messageId":"655","endLine":1049,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":1052,"column":19,"nodeType":"654","messageId":"655","endLine":1052,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":1070,"column":33,"nodeType":"654","messageId":"655","endLine":1070,"endColumn":35},{"ruleId":"652","severity":1,"message":"653","line":1078,"column":22,"nodeType":"654","messageId":"655","endLine":1078,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":1081,"column":19,"nodeType":"654","messageId":"655","endLine":1081,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":1105,"column":23,"nodeType":"654","messageId":"655","endLine":1105,"endColumn":25},{"ruleId":"652","severity":1,"message":"653","line":1108,"column":20,"nodeType":"654","messageId":"655","endLine":1108,"endColumn":22},{"ruleId":"652","severity":1,"message":"653","line":1131,"column":22,"nodeType":"654","messageId":"655","endLine":1131,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":1134,"column":19,"nodeType":"654","messageId":"655","endLine":1134,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":1157,"column":22,"nodeType":"654","messageId":"655","endLine":1157,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":1160,"column":19,"nodeType":"654","messageId":"655","endLine":1160,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":1182,"column":22,"nodeType":"654","messageId":"655","endLine":1182,"endColumn":24},{"ruleId":"652","severity":1,"message":"653","line":1185,"column":19,"nodeType":"654","messageId":"655","endLine":1185,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":1207,"column":24,"nodeType":"654","messageId":"655","endLine":1207,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":1209,"column":18,"nodeType":"654","messageId":"655","endLine":1209,"endColumn":20},{"ruleId":"652","severity":1,"message":"653","line":1229,"column":24,"nodeType":"654","messageId":"655","endLine":1229,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":1231,"column":18,"nodeType":"654","messageId":"655","endLine":1231,"endColumn":20},{"ruleId":"652","severity":1,"message":"653","line":1251,"column":24,"nodeType":"654","messageId":"655","endLine":1251,"endColumn":26},{"ruleId":"652","severity":1,"message":"653","line":1253,"column":18,"nodeType":"654","messageId":"655","endLine":1253,"endColumn":20},{"ruleId":"648","severity":1,"message":"784","line":1271,"column":20,"nodeType":"650","messageId":"651","endLine":1271,"endColumn":28},{"ruleId":"652","severity":1,"message":"653","line":1294,"column":25,"nodeType":"654","messageId":"655","endLine":1294,"endColumn":27},{"ruleId":"652","severity":1,"message":"653","line":1296,"column":19,"nodeType":"654","messageId":"655","endLine":1296,"endColumn":21},{"ruleId":"652","severity":1,"message":"653","line":1317,"column":25,"nodeType":"654","messageId":"655","endLine":1317,"endColumn":27},{"ruleId":"652","severity":1,"message":"653","line":1319,"column":19,"nodeType":"654","messageId":"655","endLine":1319,"endColumn":21},{"ruleId":"667","severity":1,"message":"785","line":15,"column":5,"nodeType":"669","endLine":15,"endColumn":14,"suggestions":"786"},{"ruleId":"667","severity":1,"message":"785","line":23,"column":6,"nodeType":"669","endLine":23,"endColumn":8,"suggestions":"787"},{"ruleId":"652","severity":1,"message":"653","line":8,"column":12,"nodeType":"654","messageId":"655","endLine":8,"endColumn":14},{"ruleId":"652","severity":1,"message":"653","line":10,"column":22,"nodeType":"654","messageId":"655","endLine":10,"endColumn":24},{"ruleId":"788","severity":1,"message":"789","line":14,"column":14,"nodeType":"650","messageId":"790","endLine":14,"endColumn":18},{"ruleId":"652","severity":1,"message":"653","line":17,"column":16,"nodeType":"654","messageId":"655","endLine":17,"endColumn":18},"no-unused-vars","'io' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CProgress' is defined but never used.","'CBadge' is defined but never used.","'CDropdownItem' is defined but never used.","'CDropdownMenu' is defined but never used.","'useEffect' is defined but never used.","Expected '!==' and instead saw '!='.","'Alert' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'click' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Messages', 'email', 'name', 'notificationCount', and 'setSocket'. Either include them or remove the dependency array. If 'setSocket' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["791"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getOpentickets'. Either include it or remove the dependency array.",["792"],"no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'columns' is assigned a value but never used.","'style' is assigned a value but never used.","'products' is assigned a value but never used.","'Button' is defined but never used.","'isShowLoader' is assigned a value but never used.","'setShowLoader' is assigned a value but never used.","'download' is defined but never used.","React Hook useEffect has a missing dependency: 'getUnAssignedTask'. Either include it or remove the dependency array.",["793"],"'HandleSelected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUnpaidTask'. Either include it or remove the dependency array.",["794"],"'CategoryEdit' is defined but never used.","'element' is defined but never used.","'setInititialSelected' is assigned a value but never used.","'selected' is assigned a value but never used.","'options' is assigned a value but never used.","'setSelected' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'LoadWriters'. Either include it or remove the dependency array.",["795"],"React Hook useEffect has a missing dependency: 'LoadInvoices'. Either include it or remove the dependency array.",["796"],"'toast' is defined but never used.","'ROOT_CSS' is assigned a value but never used.","'Taskid' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'HandleSocket', 'email', 'loadChatClient', 'open', 'set', and 'taskid'. Either include them or remove the dependency array. If 'setReceiver' needs the current value of 'email', you can also switch to useReducer instead of useState and read 'email' in the reducer.",["797"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Save' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'LoadAdministrators'. Either include it or remove the dependency array.",["798"],"'number' is defined but never used.","'DynamicForm' is defined but never used.","'category' is assigned a value but never used.","'setCategory' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'DownloadLink' is defined but never used.","'downloadFile' is defined but never used.","'Download' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDetails'. Either include it or remove the dependency array.",["799"],"no-dupe-keys","Duplicate key 'border'.","ObjectExpression","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getInvoiceDetails'. Either include it or remove the dependency array.",["800"],"'Products' is assigned a value but never used.","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["801"],"React Hook useEffect has a missing dependency: 'LoadNewSubmitedTask'. Either include it or remove the dependency array.",["802"],"React Hook useEffect has a missing dependency: 'getOrdersBeingRevised'. Either include it or remove the dependency array.",["803"],"React Hook useEffect has a missing dependency: 'setValidFiles'. Either include it or remove the dependency array. If 'setValidFiles' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["804"],"'uploadFiles' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'ModalCard' is defined but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'ConfirmPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'profile' is assigned a value but never used.","'setProfile' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.",["805"],"React Hook useEffect has a missing dependency: 'GetTableData'. Either include it or remove the dependency array.",["806"],"React Hook useEffect has a missing dependency: 'getCompletedOrders'. Either include it or remove the dependency array.",["807"],"React Hook useEffect has a missing dependency: 'getCancelledOrders'. Either include it or remove the dependency array.",["808"],"React Hook useEffect has a missing dependency: 'getAssignedTask'. Either include it or remove the dependency array.",["809"],"'WriterDeatails' is assigned a value but never used.","'notify' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'LoadWriters' and 'setBack'. Either include them or remove the dependency array. If 'setBack' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["810"],"'ViewUser' is assigned a value but never used.","'SingleTask' is assigned a value but never used.",["811"],"'err' is assigned a value but never used.","'Err' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'Check'. Either include it or remove the dependency array.",["812"],"'btn' is assigned a value but never used.","'accessToken' is assigned a value but never used.","'sendUpload' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'endPoint' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'audio'. Either include it or remove the dependency array.",["813"],["814"],"no-redeclare","'pair' is already defined.","redeclared",{"desc":"815","fix":"816"},{"desc":"817","fix":"818"},{"desc":"819","fix":"820"},{"desc":"821","fix":"822"},{"desc":"823","fix":"824"},{"desc":"825","fix":"826"},{"desc":"827","fix":"828"},{"desc":"829","fix":"830"},{"desc":"831","fix":"832"},{"desc":"833","fix":"834"},{"desc":"835","fix":"836"},{"desc":"837","fix":"838"},{"desc":"839","fix":"840"},{"desc":"841","fix":"842"},{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},{"desc":"847","fix":"848"},{"desc":"849","fix":"850"},{"desc":"851","fix":"852"},{"desc":"853","fix":"854"},{"desc":"831","fix":"855"},{"desc":"856","fix":"857"},{"desc":"858","fix":"859"},{"desc":"860","fix":"861"},"Update the dependencies array to be: [ENDPOINT, Messages, email, name, notificationCount, setSocket]",{"range":"862","text":"863"},"Update the dependencies array to be: [getOpentickets]",{"range":"864","text":"865"},"Update the dependencies array to be: [getUnAssignedTask]",{"range":"866","text":"867"},"Update the dependencies array to be: [getUnpaidTask]",{"range":"868","text":"869"},"Update the dependencies array to be: [LoadWriters]",{"range":"870","text":"871"},"Update the dependencies array to be: [LoadInvoices]",{"range":"872","text":"873"},"Update the dependencies array to be: [HandleSocket, email, loadChatClient, open, set, taskid]",{"range":"874","text":"875"},"Update the dependencies array to be: [LoadAdministrators]",{"range":"876","text":"877"},"Update the dependencies array to be: [getDetails]",{"range":"878","text":"879"},"Update the dependencies array to be: [getInvoiceDetails]",{"range":"880","text":"881"},"Update the dependencies array to be: [id]",{"range":"882","text":"883"},"Update the dependencies array to be: [LoadNewSubmitedTask]",{"range":"884","text":"885"},"Update the dependencies array to be: [getOrdersBeingRevised]",{"range":"886","text":"887"},"Update the dependencies array to be: [selectedFiles, setValidFiles]",{"range":"888","text":"889"},"Update the dependencies array to be: [getUserData]",{"range":"890","text":"891"},"Update the dependencies array to be: [GetTableData]",{"range":"892","text":"893"},"Update the dependencies array to be: [getCompletedOrders]",{"range":"894","text":"895"},"Update the dependencies array to be: [getCancelledOrders]",{"range":"896","text":"897"},"Update the dependencies array to be: [getAssignedTask]",{"range":"898","text":"899"},"Update the dependencies array to be: [LoadWriters, setBack]",{"range":"900","text":"901"},{"range":"902","text":"879"},"Update the dependencies array to be: [Check]",{"range":"903","text":"904"},"Update the dependencies array to be: [audio, playing]",{"range":"905","text":"906"},"Update the dependencies array to be: [audio]",{"range":"907","text":"908"},[1510,1520],"[ENDPOINT, Messages, email, name, notificationCount, setSocket]",[1200,1202],"[getOpentickets]",[1944,1946],"[getUnAssignedTask]",[4007,4009],"[getUnpaidTask]",[3871,3873],"[LoadWriters]",[1586,1588],"[LoadInvoices]",[2361,2363],"[HandleSocket, email, loadChatClient, open, set, taskid]",[4611,4613],"[LoadAdministrators]",[2121,2123],"[getDetails]",[1328,1330],"[getInvoiceDetails]",[3520,3522],"[id]",[7015,7017],"[LoadNewSubmitedTask]",[1740,1742],"[getOrdersBeingRevised]",[969,984],"[selectedFiles, setValidFiles]",[3643,3645],"[getUserData]",[1528,1530],"[GetTableData]",[1296,1298],"[getCompletedOrders]",[2793,2795],"[getCancelledOrders]",[2002,2004],"[getAssignedTask]",[1670,1672],"[LoadWriters, setBack]",[740,742],[1729,1731],"[Check]",[388,397],"[audio, playing]",[584,586],"[audio]"]