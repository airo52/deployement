{"ast":null,"code":"import _slicedToArray from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { injectStyles } from \"../lib/inject-style\";\nvar defaultStrings = {\n  allItemsAreSelected: \"All items are selected.\",\n  clearSearch: \"Clear Search\",\n  clearSelected: \"Clear Selected\",\n  noOptions: \"No options\",\n  search: \"Search\",\n  selectAll: \"Select All\",\n  selectAllFiltered: \"Select All (Filtered)\",\n  selectSomeItems: \"Select...\",\n  create: \"Create\"\n};\nvar defaultProps = {\n  value: [],\n  hasSelectAll: true,\n  className: \"multi-select\",\n  debounceDuration: 200,\n  options: []\n};\nvar MultiSelectContext = /*#__PURE__*/React.createContext({});\nexport var MultiSelectProvider = function MultiSelectProvider(_ref) {\n  var props = _ref.props,\n      children = _ref.children;\n\n  var _useState = useState(props.options),\n      _useState2 = _slicedToArray(_useState, 2),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var t = function t(key) {\n    var _props$overrideString;\n\n    return ((_props$overrideString = props.overrideStrings) == null ? void 0 : _props$overrideString[key]) || defaultStrings[key];\n  };\n\n  useMemo(function () {\n    return injectStyles();\n  }, []);\n  useEffect(function () {\n    setOptions(props.options);\n  }, [props.options]);\n  return /*#__PURE__*/React.createElement(MultiSelectContext.Provider, {\n    value: _extends({\n      t: t\n    }, defaultProps, props, {\n      options: options,\n      setOptions: setOptions\n    })\n  }, children);\n};\nexport var useMultiSelect = function useMultiSelect() {\n  return React.useContext(MultiSelectContext);\n};","map":{"version":3,"sources":["../../../src/hooks/use-multi-select.tsx"],"names":["defaultStrings","allItemsAreSelected","clearSearch","clearSelected","noOptions","search","selectAll","selectAllFiltered","selectSomeItems","create","defaultProps","value","hasSelectAll","className","debounceDuration","options","MultiSelectContext","React","MultiSelectProvider","children","useState","props","t","key","useMemo","injectStyles","useEffect","setOptions","useMultiSelect"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,OAAA,EAAA,QAAA,QAAA,OAAA;AAEA,SAAA,YAAA,QAAA,qBAAA;AAGA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,mBAAmB,EADE,yBAAA;AAErBC,EAAAA,WAAW,EAFU,cAAA;AAGrBC,EAAAA,aAAa,EAHQ,gBAAA;AAIrBC,EAAAA,SAAS,EAJY,YAAA;AAKrBC,EAAAA,MAAM,EALe,QAAA;AAMrBC,EAAAA,SAAS,EANY,YAAA;AAOrBC,EAAAA,iBAAiB,EAPI,uBAAA;AAQrBC,EAAAA,eAAe,EARM,WAAA;AASrBC,EAAAA,MAAM,EAAE;AATa,CAAvB;AAYA,IAAMC,YAAmC,GAAG;AAC1CC,EAAAA,KAAK,EADqC,EAAA;AAE1CC,EAAAA,YAAY,EAF8B,IAAA;AAG1CC,EAAAA,SAAS,EAHiC,cAAA;AAI1CC,EAAAA,gBAAgB,EAJ0B,GAAA;AAK1CC,EAAAA,OAAO,EAAE;AALiC,CAA5C;AAkBA,IAAMC,kBAAkB,GAAA,aAAGC,KAAK,CAALA,aAAAA,CAA3B,EAA2BA,CAA3B;AAIA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,IAAA,EAGH;AAHI,MAAA,KAAA,GAGJ,IAHI,CAAA,KAAA;AAAA,MAElCC,QAFkC,GAGJ,IAHI,CAElCA,QAFkC;;AAIlC,kBAA8BC,QAAQ,CAACC,KAAK,CAA5C,OAAsC,CAAtC;AAAA;AAAA,MAAM,OAAN;AAAA,MAAM,UAAN;;AACA,MAAMC,CAAC,GAAIC,SAALD,CAAKC,CAAAA,GAAD,EAAA;AAAA,QAAA,qBAAA;;AAAA,WAAS,CAAA,CAAA,qBAAA,GAAA,KAAK,CAAL,eAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,GAAA,CAAA,KAAgCvB,cAAc,CAAvD,GAAuD,CAAvD;AAAV,GAAA;;AAEAwB,EAAAA,OAAO,CAAC;AAAA,WAAMC,YAAP,EAAC;AAAA,GAAD,EAAPD,EAAO,CAAPA;AAEAE,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,UAAU,CAACN,KAAK,CAAhBM,OAAU,CAAVA;AADO,GAAA,EAEN,CAACN,KAAK,CAFTK,OAEG,CAFM,CAATA;AAIA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;AACE,IAAA,KAAK,EAAA,QAAA,CAAA;AAAIJ,MAAAA,CAAAA,EAAAA;AAAJ,KAAA,EAAA,YAAA,EAAA,KAAA,EAAA;AAAkCP,MAAAA,OAAlC,EAAkCA,OAAlC;AAA2CY,MAAAA,UAAAA,EAAAA;AAA3C,KAAA;AADP,GAAA,EADF,QACE,CADF;AAbK,CAAA;AAsBP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAMX,KAAK,CAALA,UAAAA,CAA7B,kBAA6BA,CAAN;AAAA,CAAvB","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\n\nimport { injectStyles } from \"../lib/inject-style\";\nimport { ISelectProps, Option } from \"../lib/interfaces\";\n\nconst defaultStrings = {\n  allItemsAreSelected: \"All items are selected.\",\n  clearSearch: \"Clear Search\",\n  clearSelected: \"Clear Selected\",\n  noOptions: \"No options\",\n  search: \"Search\",\n  selectAll: \"Select All\",\n  selectAllFiltered: \"Select All (Filtered)\",\n  selectSomeItems: \"Select...\",\n  create: \"Create\",\n};\n\nconst defaultProps: Partial<ISelectProps> = {\n  value: [],\n  hasSelectAll: true,\n  className: \"multi-select\",\n  debounceDuration: 200,\n  options: [] as Option[],\n};\n\ninterface MultiSelectContextProps extends ISelectProps {\n  t: (key: string) => string;\n  setOptions?;\n}\n\ninterface MultiSelectProviderProps {\n  props: ISelectProps;\n  children;\n}\n\nconst MultiSelectContext = React.createContext<MultiSelectContextProps>(\n  {} as MultiSelectContextProps\n);\n\nexport const MultiSelectProvider = ({\n  props,\n  children,\n}: MultiSelectProviderProps) => {\n  const [options, setOptions] = useState(props.options);\n  const t = (key) => props.overrideStrings?.[key] || defaultStrings[key];\n\n  useMemo(() => injectStyles(), []);\n\n  useEffect(() => {\n    setOptions(props.options);\n  }, [props.options]);\n\n  return (\n    <MultiSelectContext.Provider\n      value={{ t, ...defaultProps, ...props, options, setOptions }}\n    >\n      {children}\n    </MultiSelectContext.Provider>\n  );\n};\n\nexport const useMultiSelect = () => React.useContext(MultiSelectContext);\n"]},"metadata":{},"sourceType":"module"}