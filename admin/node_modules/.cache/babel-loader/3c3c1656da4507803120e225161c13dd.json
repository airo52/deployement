{"ast":null,"code":"import _slicedToArray from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar url = require('./mixkit-software-interface-back-2575.wav');\n\nvar Sound = function Sound() {\n  _s();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      audio = _useState2[0],\n      setAudion = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      play = _useState4[0],\n      setPlay = _useState4[1];\n\n  useEffect(function () {\n    setAudion(new Audio(url));\n    setPlay(true); // audio.play();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: play ? audio.play() : \"\"\n  }, void 0, false);\n};\n\n_s(Sound, \"vLqoapps1dXQvElxHhuvRiq8ox4=\");\n\n_c = Sound;\nexport default Sound;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sound\");","map":{"version":3,"sources":["/Users/tony/Documents/Projects/react/Writer/admin/src/sound.js"],"names":["useEffect","useState","url","require","Sound","audio","setAudion","play","setPlay","Audio"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAAC,2CAAD,CAAnB;;AACA,IAAMC,KAAK,GAAE,SAAPA,KAAO,GAAI;AAAA;;AACV,kBAAwBH,QAAQ,EAAhC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAaC,SAAb;;AACC,mBAAqBL,QAAQ,CAAC,KAAD,CAA7B;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAYC,OAAZ;;AAGLR,EAAAA,SAAS,CAAC,YAAI;AACVM,IAAAA,SAAS,CAAC,IAAIG,KAAJ,CAAUP,GAAV,CAAD,CAAT;AACAM,IAAAA,OAAO,CAAC,IAAD,CAAP,CAFU,CAGd;AACC,GAJQ,CAAT;AAMA,sBAAO;AAAA,cACED,IAAI,GAACF,KAAK,CAACE,IAAN,EAAD,GAAc;AADpB,mBAAP;AAIF,CAfD;;GAAMH,K;;KAAAA,K;AAgBN,eAAeA,KAAf","sourcesContent":["import { useEffect, useState } from 'react';\nconst url = require('./mixkit-software-interface-back-2575.wav');\nconst Sound =()=>{\n       const [audio,setAudion]=useState();\n        const [play,setPlay]=useState(false);\n   \n\n   useEffect(()=>{\n       setAudion(new Audio(url));\n       setPlay(true);\n   // audio.play();\n   })\n\n   return <>\n           {play?audio.play():\"\"}\n   </>\n  \n}\nexport default Sound;"]},"metadata":{},"sourceType":"module"}