{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/pending/pendingPayments.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport TableCard from \"src/views/table/TableCard\";\nimport SingeleTask from \"../../Task/TaskDetails/SingleTaskDetails\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar PendingPayments = function PendingPayments() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isShowSingleTask = _useState2[0],\n      setIsShowSingleTask = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskId = _useState4[0],\n      setTaskId = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      markedOrders = _useState6[0],\n      setMarkedOrders = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      unpaidTask = _useState8[0],\n      setUnpaidTask = _useState8[1];\n\n  var ShowSingleTasks = function ShowSingleTasks(taskid) {\n    setTaskId(taskid);\n    setIsShowSingleTask(true);\n  };\n\n  var CloseSingleTask = function CloseSingleTask() {\n    setTaskId(''); // setIsShowInvoice(false);\n\n    setIsShowSingleTask(false);\n  };\n\n  var SubmitMultipleMarked = function SubmitMultipleMarked() {\n    console.log(markedOrders);\n  };\n\n  var SubmitSingle = function SubmitSingle(id, invoice) {\n    var data = {\n      invoice: invoice,\n      taskId: id\n    };\n  };\n\n  var HandleSelected = function HandleSelected(id, invoice, event) {\n    if (event.target.checked) {\n      var newMarked = _toConsumableArray(markedOrders);\n\n      newMarked.push({\n        invoice: invoice,\n        taskId: id\n      }); //[i][e.target.name] = e.target.value;\n\n      setMarkedOrders(newMarked);\n    } else {\n      var _newMarked = _toConsumableArray(markedOrders);\n\n      _newMarked = _newMarked.filter(function (item) {\n        return item.taskId !== id;\n      }); // newMarked.push({invoice:invoice,taskId:id})\n\n      setMarkedOrders(_newMarked);\n    }\n\n    ;\n  };\n\n  var Button = function Button(id, invoice) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginRight: \"5px\"\n        },\n        onClick: function onClick() {\n          return SubmitSingle(id, invoice);\n        },\n        className: \"btn btn-info\",\n        children: \"Mark Paid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          color: \"#000\"\n        },\n        onClick: function onClick() {\n          return ShowSingleTasks(id);\n        },\n        className: \"btn btn-success fa fa-history\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, _this)]\n    }, void 0, true);\n  };\n\n  var getUnpaidTask = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result, organisedData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return ApiRequest.getPendingPayments();\n\n            case 2:\n              result = _context.sent;\n              organisedData = [];\n              result.data.forEach(function (element) {\n                var data = {\n                  check: /*#__PURE__*/_jsxDEV(\"input\", {\n                    onChange: function onChange(e) {\n                      return HandleSelected(element.task_id, element.Invoice, e);\n                    },\n                    type: \"checkbox\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 66,\n                    columnNumber: 21\n                  }, _this),\n                  \"#taskId\": element.task_id,\n                  invoiceId: element.Invoice,\n                  email: element.writer_email,\n                  status: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"badge badge-warning\",\n                    children: element.payment_status\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 22\n                  }, _this),\n                  pdate: element.end_date,\n                  amount: \"Ksh \" + element.payment_expected_amount,\n                  Action: Button(element.task_id, element.Invoice)\n                };\n                organisedData.push(data);\n              });\n              setUnpaidTask(organisedData); //  organisedData=[];\n              // console.log(result);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getUnpaidTask() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getUnpaidTask();\n  }, []);\n  var columns = [{\n    dataField: \"check\",\n    text: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"fa fa-check badge badge-success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }, _this)\n  }, {\n    dataField: \"#taskId\",\n    text: \"#taskId\"\n  }, {\n    dataField: \"invoiceId\",\n    text: \"#Invoice Id\"\n  }, {\n    dataField: \"email\",\n    text: \"Writer email\"\n  }, {\n    dataField: \"status\",\n    text: \"status\"\n  }, {\n    dataField: \"pdate\",\n    text: \"Expected-Day-Pay\"\n  }, {\n    dataField: \"amount\",\n    text: \"Amount to be paid\"\n  }, {\n    dataField: \"Action\",\n    text: \"Action\"\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isShowSingleTask && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return SubmitMultipleMarked();\n        },\n        style: {\n          float: \"right\",\n          marginBottom: \"5px\"\n        },\n        className: \"btn btn-warning\",\n        children: \"Submit All Selected As Paid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container card\",\n        children: /*#__PURE__*/_jsxDEV(TableCard, {\n          products: unpaidTask,\n          columns: columns,\n          title: \"PENDING PAYMENTS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 14\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 14\n      }, _this)]\n    }, void 0, true), isShowSingleTask && /*#__PURE__*/_jsxDEV(SingeleTask, {\n      id: taskId,\n      closeTask: CloseSingleTask,\n      isAccept: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 34\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(PendingPayments, \"fOwKq50V2yW/972o64WL3oQ+l7A=\");\n\n_c = PendingPayments;\nexport default PendingPayments;\n\nvar _c;\n\n$RefreshReg$(_c, \"PendingPayments\");","map":{"version":3,"sources":["/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/pending/pendingPayments.js"],"names":["useEffect","useState","ApiRequest","TableCard","SingeleTask","PendingPayments","isShowSingleTask","setIsShowSingleTask","taskId","setTaskId","markedOrders","setMarkedOrders","unpaidTask","setUnpaidTask","ShowSingleTasks","taskid","CloseSingleTask","SubmitMultipleMarked","console","log","SubmitSingle","id","invoice","data","HandleSelected","event","target","checked","newMarked","push","filter","item","Button","marginRight","color","getUnpaidTask","getPendingPayments","result","organisedData","forEach","element","check","e","task_id","Invoice","invoiceId","email","writer_email","status","payment_status","pdate","end_date","amount","payment_expected_amount","Action","columns","dataField","text","float","marginBottom"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport TableCard from \"src/views/table/TableCard\";\nimport SingeleTask from \"../../Task/TaskDetails/SingleTaskDetails\";\n\nconst PendingPayments= ()=>{\n\n  const [isShowSingleTask,setIsShowSingleTask]=useState(false);\n  const [taskId,setTaskId]=useState('');\n  const [markedOrders,setMarkedOrders] = useState([]);\n  const [unpaidTask,setUnpaidTask] = useState([]);\n\n  const ShowSingleTasks =taskid=>{\n    setTaskId(taskid);\n  \n   setIsShowSingleTask(true);\n  }\n  const CloseSingleTask=()=>{\n    setTaskId('');\n    // setIsShowInvoice(false);\n     setIsShowSingleTask(false);\n  }\n  const SubmitMultipleMarked = ()=>{\n    console.log(markedOrders)\n  }\n\n  const SubmitSingle=(id,invoice)=>{\n      let data = {\n         invoice:invoice,\n         taskId:id\n      }\n  }\n  const HandleSelected =(id,invoice,event)=>{\n      if(event.target.checked){\n        let newMarked = [...markedOrders];\n        newMarked.push({invoice:invoice,taskId:id})\n        //[i][e.target.name] = e.target.value;\n       setMarkedOrders(newMarked);\n\n       \n      }else {\n        let newMarked = [...markedOrders];\n       newMarked= newMarked.filter((item)=>item.taskId !== id);\n       // newMarked.push({invoice:invoice,taskId:id})\n       setMarkedOrders(newMarked);\n        \n      };\n  }\n\n  const Button=(id,invoice)=>{\n    return <>\n        <button style={{marginRight:\"5px\"}} onClick={()=>SubmitSingle(id,invoice)} className=\"btn btn-info\">Mark Paid</button>\n    <button style={{\n             \n              color:\"#000\",\n            \n  }} onClick={()=>ShowSingleTasks(id)} className=\"btn btn-success fa fa-history\"></button>\n  </>\n  }\n\n const getUnpaidTask = async ()=>{\n        const result = await ApiRequest.getPendingPayments();\n        const organisedData=[];\n        result.data.forEach(element => {\n            var data={\n              check:<input onChange={(e)=>HandleSelected(element.task_id,element.Invoice,e)} type=\"checkbox\"/>,\n              \"#taskId\":element.task_id,\n              invoiceId:element.Invoice,\n              email:element.writer_email,\n              status:<span className=\"badge badge-warning\">{element.payment_status}</span>,\n              pdate:element.end_date,\n              amount:\"Ksh \"+element.payment_expected_amount,\n              Action:Button(element.task_id,element.Invoice)\n             }\n\n             organisedData.push(data);\n             \n        });\n\n        setUnpaidTask(organisedData);\n\n      //  organisedData=[];\n       // console.log(result);\n } \n\n useEffect(()=>{\n     getUnpaidTask();\n },[]);\n    const columns = [\n      {\n        dataField: \"check\",\n        text: <span className=\"fa fa-check badge badge-success\"></span>,\n       \n      },\n        {\n          dataField: \"#taskId\",\n          text: \"#taskId\",\n         \n        },\n      \n        {\n          dataField: \"invoiceId\",\n          text: \"#Invoice Id\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"Writer email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n       \n        {\n          \n          dataField: \"pdate\",\n          text: \"Expected-Day-Pay\",\n        },\n        {\n          \n          dataField: \"amount\",\n          text: \"Amount to be paid\",\n        },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n  \n    return <>\n            {!isShowSingleTask &&<>\n            <button onClick={()=>SubmitMultipleMarked()} style={{float:\"right\",marginBottom:\"5px\"}} className=\"btn btn-warning\">Submit All Selected As Paid</button>\n             <div className=\"container card\">\n              \n             <TableCard \n             products={unpaidTask}\n             columns={columns}\n              title={\"PENDING PAYMENTS\"}\n             />\n             </div></>}\n\n            {isShowSingleTask && <SingeleTask id={taskId} closeTask={CloseSingleTask} isAccept={false}/>}\n          </>\n          \n}\nexport default PendingPayments;"]},"metadata":{},"sourceType":"module"}