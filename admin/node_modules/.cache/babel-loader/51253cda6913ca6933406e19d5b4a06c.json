{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/submited/submited.js\",\n    _this = this,\n    _s2 = $RefreshSig$();\n\n//import { cilSortNumericDown } from \"@coreui/icons\";\nimport { useEffect, useState } from \"react\";\nimport ModalCard from \"src/views/modal/Modal\";\nimport TableCard from \"src/views/table/TableCard\";\nimport swal from \"sweetalert\";\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport SingeleTask from \"../../TaskDetails/SingleTaskDetails\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar NewTaskSubmited = function NewTaskSubmited() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      Show = _useState2[0],\n      setShow = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showRedoneModal = _useState4[0],\n      setRedoneModal = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showSingleTask = _useState6[0],\n      setShowSingleTask = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      newSubmited = _useState8[0],\n      setNewSubmited = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      taskId = _useState10[0],\n      setTaskId = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      revisionContent = _useState12[0],\n      setRevision = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      task = _useState14[0],\n      setTask = _useState14[1];\n\n  var OpenModal = function OpenModal(id, invoice) {\n    setTaskId(id);\n    setTask({\n      taskid: id,\n      invoice: invoice\n    });\n    setShow(true); //  console.log(task);\n  };\n\n  var Close = function Close() {\n    setShow(false);\n    setTask([]);\n  };\n\n  var CloseRedone = function CloseRedone() {\n    setRedoneModal(false);\n    setShow(true);\n  };\n\n  var SubmitRevisionDetails = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(revisionContent === \"\")) {\n                _context.next = 3;\n                break;\n              }\n\n              swal(\"Error\", \"provide revision details\", \"error\");\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return ApiRequest.sendRevisionRequest(taskId, revisionContent);\n\n            case 5:\n              result = _context.sent;\n\n              if (!(result.data === \"done\")) {\n                _context.next = 15;\n                break;\n              }\n\n              swal(\"REVISION REQUEST\", \"Sent Succesfully\", \"success\");\n              setShow(false);\n              setRedoneModal(false);\n              setTask([]);\n              LoadNewSubmitedTask();\n              return _context.abrupt(\"return\");\n\n            case 15:\n              swal(\"Error\", \"process failed\", \"error\");\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function SubmitRevisionDetails() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var Content = function Content() {\n    _s();\n\n    var _useState15 = useState([]),\n        _useState16 = _slicedToArray(_useState15, 2),\n        submitedFiles = _useState16[0],\n        setSubmitedFiles = _useState16[1];\n\n    var loadFiles = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return ApiRequest.getSubmitedFiles(taskId);\n\n              case 2:\n                result = _context2.sent;\n                setSubmitedFiles(result.data);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function loadFiles() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (Show) {\n      loadFiles();\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: submitedFiles.map(function (item) {\n          // tbl_task_submited_url\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-group-item d-flex justify-content-between align-items-center\",\n            children: [item.tbl_task_submited_url.split('files/')[1], /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: \"pointer\"\n              },\n              className: \"badge badge-primary badge-pill\",\n              children: \"Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 6\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 2\n      }, _this)\n    }, void 0, false);\n  };\n\n  _s(Content, \"GX+SeE9XWp+DNYWnjGaYmmy7MaQ=\");\n\n  var RevisionContenT = function RevisionContenT() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        children: [\"REVISION REQUEST FOR ORDER \", task['taskid']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 16\n      }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Revision Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 18\n      }, _this), /*#__PURE__*/_jsxDEV(CKEditor, {\n        editor: ClassicEditor // data={message}\n        ,\n        onReady: function onReady(editor) {\n          // You can store the \"editor\" and use when it is needed.\n          //console.log( 'Editor is ready to use!', editor );\n          editor.editing.view.change(function (writer) {\n            writer.setStyle(\"height\", \"300px\", editor.editing.view.document.getRoot());\n          });\n        },\n        onChange: function onChange(event, editor) {\n          var data = editor.getData();\n          setRevision(data);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 16\n      }, _this)]\n    }, void 0, true);\n  };\n\n  var RequestRedone = function RequestRedone() {\n    setShow(false);\n    setRedoneModal(true);\n  };\n\n  var OpenSingleTaskDetails = function OpenSingleTaskDetails(id, invoice) {\n    setTask({\n      taskid: id,\n      invoice: invoice\n    });\n    setTaskId(id);\n    setShowSingleTask(!showSingleTask);\n  };\n\n  var OpenMoreModal = function OpenMoreModal(id, invoice) {\n    swal(\"INVOICE +\".concat(invoice), {\n      buttons: {\n        file: {\n          text: \"SUBMITED FILES\",\n          value: \"file\",\n          className: \"btn btn-outline-info\"\n        },\n        details: {\n          text: \"ORDER DETAILS\",\n          value: \"details\",\n          className: \"btn btn-info\"\n        }\n      }\n    }).then(function (value) {\n      switch (value) {\n        case \"file\":\n          OpenModal(id, invoice);\n          break;\n\n        case \"details\":\n          OpenSingleTaskDetails(id, invoice);\n          break;\n\n        default:\n          break;\n      }\n    });\n  };\n\n  var Buttons = function Buttons(id, invoice) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return OpenMoreModal(id, invoice);\n      },\n      className: \"btn btn-primary\",\n      children: \"More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 16\n    }, _this);\n  };\n\n  var MarkTaskcomplete = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return ApiRequest.markTaskCompleted(taskId);\n\n            case 2:\n              result = _context3.sent;\n\n              if (!(result.data === \"done\")) {\n                _context3.next = 10;\n                break;\n              }\n\n              swal(\"Task Completed\", \" Succesfully\", \"success\");\n              setShow(false);\n              setRedoneModal(false);\n              setTask([]);\n              LoadNewSubmitedTask();\n              return _context3.abrupt(\"return\");\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function MarkTaskcomplete() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var AcceptOrder = function AcceptOrder() {\n    swal(\"You Are About To Mark Order \".concat(task['taskid'], \" As Complete\"), {\n      buttons: {\n        cancel: \"Cancel !\",\n        complete: {\n          text: \"COMPLETED?\",\n          value: \"complete\",\n          className: \"btn btn-success\"\n        }\n      }\n    }).then(function (value) {\n      switch (value) {\n        case 'complete':\n          swal(\"ORDER COMPLETED\", \"succesfully\", \"success\");\n          setShow(false);\n          setRedoneModal(false);\n          break;\n\n        default:\n          swal(\"Process Cancelled \", \"succesfully\", \"success\");\n          break;\n      }\n    });\n  };\n\n  var Btns = function Btns() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return RequestRedone();\n        },\n        className: \"btn btn-info\",\n        children: \"REQUEST REDONE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 19\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return AcceptOrder();\n        },\n        className: \"btn btn-success\",\n        children: \"ACCEPT ORDER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 19\n      }, _this)]\n    }, void 0, true);\n  };\n\n  var LoadNewSubmitedTask = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var result, organisedData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return ApiRequest.getNewSubmitedFiles();\n\n            case 2:\n              result = _context4.sent;\n              organisedData = [];\n              result.data.forEach(function (element) {\n                var dat = {\n                  \"#taskId\": element.task_id,\n                  username: element.writer_display_name,\n                  email: element.writer_email,\n                  taskTitle: element.task_title,\n                  status: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"badge badge-info\",\n                    children: element.task_status\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 24\n                  }, _this),\n                  edate: element.taskl_accepted_date,\n                  action: Buttons(element.task_id, element.task_id)\n                };\n                organisedData.push(dat);\n              });\n              setNewSubmited(organisedData);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function LoadNewSubmitedTask() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    LoadNewSubmitedTask();\n  }, []);\n  var columns = [{\n    dataField: \"#taskId\",\n    text: \"#taskId\"\n  }, {\n    dataField: \"username\",\n    text: \"writername\"\n  }, {\n    dataField: \"email\",\n    text: \"writer email\"\n  }, {\n    dataField: \"taskTitle\",\n    text: \"Task Title\"\n  }, {\n    dataField: \"status\",\n    text: \"status\"\n  }, {\n    dataField: \"edate\",\n    text: \"DeadLine\"\n  }, {\n    dataField: \"action\",\n    text: \"Actions\"\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showSingleTask && /*#__PURE__*/_jsxDEV(SingeleTask, {\n      id: task['taskid'],\n      isAccept: false,\n      closeTask: OpenSingleTaskDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 30\n    }, _this), /*#__PURE__*/_jsxDEV(ModalCard, {\n      Show: Show,\n      Close: Close,\n      showBtn: false,\n      Buttons: Btns,\n      content: Content()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 12\n    }, _this), /*#__PURE__*/_jsxDEV(ModalCard, {\n      Show: showRedoneModal,\n      ButtonName: \"SEND REVISION REQUEST\",\n      content: RevisionContenT(),\n      Save: SubmitRevisionDetails,\n      Close: CloseRedone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 14\n    }, _this), !showSingleTask && /*#__PURE__*/_jsxDEV(TableCard, {\n      products: newSubmited,\n      columns: columns,\n      title: \"NEW SUBMITED TASK\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 30\n    }, _this)]\n  }, void 0, true);\n};\n\n_s2(NewTaskSubmited, \"YqQlwiBCXwA0jRMwznmtHYKfvBY=\");\n\n_c = NewTaskSubmited;\nexport default NewTaskSubmited;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTaskSubmited\");","map":{"version":3,"sources":["/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Task/management/submited/submited.js"],"names":["useEffect","useState","ModalCard","TableCard","swal","CKEditor","ClassicEditor","SingeleTask","ApiRequest","NewTaskSubmited","Show","setShow","showRedoneModal","setRedoneModal","showSingleTask","setShowSingleTask","newSubmited","setNewSubmited","taskId","setTaskId","revisionContent","setRevision","task","setTask","OpenModal","id","invoice","taskid","Close","CloseRedone","SubmitRevisionDetails","sendRevisionRequest","result","data","LoadNewSubmitedTask","Content","submitedFiles","setSubmitedFiles","loadFiles","getSubmitedFiles","map","item","tbl_task_submited_url","split","cursor","RevisionContenT","editor","editing","view","change","writer","setStyle","document","getRoot","event","getData","RequestRedone","OpenSingleTaskDetails","OpenMoreModal","buttons","file","text","value","className","details","then","Buttons","MarkTaskcomplete","markTaskCompleted","AcceptOrder","cancel","complete","Btns","getNewSubmitedFiles","organisedData","forEach","element","dat","task_id","username","writer_display_name","email","writer_email","taskTitle","task_title","status","task_status","edate","taskl_accepted_date","action","push","columns","dataField"],"mappings":";;;;;;;;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;;AAGA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAI;AAAA;;AAAA;;AAE1B,kBAAqBR,QAAQ,CAAC,KAAD,CAA7B;AAAA;AAAA,MAAOS,IAAP;AAAA,MAAYC,OAAZ;;AACA,mBAAwCV,QAAQ,CAAC,KAAD,CAAhD;AAAA;AAAA,MAAOW,eAAP;AAAA,MAAuBC,cAAvB;;AACA,mBAA0CZ,QAAQ,CAAC,KAAD,CAAlD;AAAA;AAAA,MAAOa,cAAP;AAAA,MAAsBC,iBAAtB;;AACA,mBAAqCd,QAAQ,CAAC,EAAD,CAA7C;AAAA;AAAA,MAAOe,WAAP;AAAA,MAAmBC,cAAnB;;AACA,mBAA2BhB,QAAQ,CAAC,EAAD,CAAnC;AAAA;AAAA,MAAOiB,MAAP;AAAA,MAAcC,SAAd;;AACA,oBAAoClB,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOmB,eAAP;AAAA,MAAuBC,WAAvB;;AAGA,oBAAqBpB,QAAQ,CAAC,EAAD,CAA7B;AAAA;AAAA,MAAOqB,IAAP;AAAA,MAAYC,OAAZ;;AAEA,MAAMC,SAAS,GAAE,SAAXA,SAAW,CAACC,EAAD,EAAIC,OAAJ,EAAc;AAC1BP,IAAAA,SAAS,CAACM,EAAD,CAAT;AACDF,IAAAA,OAAO,CAAC;AAACI,MAAAA,MAAM,EAACF,EAAR;AAAWC,MAAAA,OAAO,EAACA;AAAnB,KAAD,CAAP;AACAf,IAAAA,OAAO,CAAC,IAAD,CAAP,CAH2B,CAK7B;AAGD,GARD;;AAUA,MAAMiB,KAAK,GAAC,SAANA,KAAM,GAAI;AACZjB,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAY,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH,GAHD;;AAIA,MAAMM,WAAW,GAAC,SAAZA,WAAY,GAAI;AAClBhB,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAF,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAHD;;AAKA,MAAMmB,qBAAqB;AAAA,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEvBV,eAAe,KAAK,EAFG;AAAA;AAAA;AAAA;;AAIxBhB,cAAAA,IAAI,UAAU,0BAAV,EAAsC,OAAtC,CAAJ;AAJwB;;AAAA;AAAA;AAAA,qBAQPI,UAAU,CAACuB,mBAAX,CAA+Bb,MAA/B,EAAsCE,eAAtC,CARO;;AAAA;AAQtBY,cAAAA,MARsB;;AAAA,oBAUvBA,MAAM,CAACC,IAAP,KAAgB,MAVO;AAAA;AAAA;AAAA;;AAWxB7B,cAAAA,IAAI,qBAAqB,kBAArB,EAAyC,SAAzC,CAAJ;AAEAO,cAAAA,OAAO,CAAC,KAAD,CAAP;AACAE,cAAAA,cAAc,CAAC,KAAD,CAAd;AACAU,cAAAA,OAAO,CAAC,EAAD,CAAP;AACAW,cAAAA,mBAAmB;AAhBK;;AAAA;AAoBxB9B,cAAAA,IAAI,UAAU,gBAAV,EAA4B,OAA5B,CAAJ;;AApBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA,oBAArB0B,qBAAqB;AAAA;AAAA;AAAA,KAA3B;;AA4BA,MAAMK,OAAO,GAAE,SAATA,OAAS,GAAI;AAAA;;AAEjB,sBAAyClC,QAAQ,CAAC,EAAD,CAAjD;AAAA;AAAA,QAAOmC,aAAP;AAAA,QAAqBC,gBAArB;;AAEE,QAAMC,SAAS;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACS9B,UAAU,CAAC+B,gBAAX,CAA4BrB,MAA5B,CADT;;AAAA;AACNc,gBAAAA,MADM;AAEZK,gBAAAA,gBAAgB,CAACL,MAAM,CAACC,IAAR,CAAhB;;AAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATK,SAAS;AAAA;AAAA;AAAA,OAAf;;AAKA,QAAG5B,IAAH,EAAQ;AACN4B,MAAAA,SAAS;AACV;;AAED,wBAAO;AAAA,6BACZ;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,kBACIF,aAAa,CAACI,GAAd,CAAkB,UAACC,IAAD,EAAQ;AAC1B;AACA,8BAAO;AAAI,YAAA,SAAS,EAAC,mEAAd;AAAA,uBACAA,IAAI,CAACC,qBAAL,CAA2BC,KAA3B,CAAiC,QAAjC,EAA2C,CAA3C,CADA,eAEP;AAAM,cAAA,KAAK,EAAE;AAACC,gBAAAA,MAAM,EAAC;AAAR,eAAb;AAAiC,cAAA,SAAS,EAAC,gCAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFO;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AAKA,SAPA;AADJ;AAAA;AAAA;AAAA;AAAA;AADY,qBAAP;AAaH,GA1BD;;AA3D0B,KA2DpBT,OA3DoB;;AAuF1B,MAAMU,eAAe,GAAC,SAAhBA,eAAgB,GAAI;AAItB,wBAAO;AAAA,8BACG;AAAA,kDAAgCvB,IAAI,CAAC,QAAD,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA,eADH,eAEE;AAAA;AAAA;AAAA;AAAA,eAFF,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,eAIE,QAAC,QAAD;AAER,QAAA,MAAM,EAAGhB,aAFD,CAGT;AAHS;AAKR,QAAA,OAAO,EAAG,iBAAAwC,MAAM,EAAI;AAChB;AACA;AACAA,UAAAA,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,UAACC,MAAD,EAAY;AACtCA,YAAAA,MAAM,CAACC,QAAP,CACI,QADJ,EAEI,OAFJ,EAGIL,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBI,QAApB,CAA6BC,OAA7B,EAHJ;AAKC,WANF;AAOH,SAfO;AAgBR,QAAA,QAAQ,EAAG,kBAAEC,KAAF,EAASR,MAAT,EAAqB;AAC5B,cAAMb,IAAI,GAAGa,MAAM,CAACS,OAAP,EAAb;AAEDlC,UAAAA,WAAW,CAACY,IAAD,CAAX;AACF;AApBO;AAAA;AAAA;AAAA;AAAA,eAJF;AAAA,oBAAP;AA4BH,GAhCD;;AAkCA,MAAMuB,aAAa,GAAC,SAAdA,aAAc,GAAI;AACpB7C,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAE,IAAAA,cAAc,CAAC,IAAD,CAAd;AAEH,GAJD;;AAMA,MAAM4C,qBAAqB,GAAC,SAAtBA,qBAAsB,CAAChC,EAAD,EAAIC,OAAJ,EAAc;AACxCH,IAAAA,OAAO,CAAC;AAACI,MAAAA,MAAM,EAACF,EAAR;AAAWC,MAAAA,OAAO,EAACA;AAAnB,KAAD,CAAP;AACEP,IAAAA,SAAS,CAACM,EAAD,CAAT;AACAV,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AAEH,GALD;;AAOE,MAAM4C,aAAa,GAAC,SAAdA,aAAc,CAACjC,EAAD,EAAIC,OAAJ,EAAc;AAChCtB,IAAAA,IAAI,oBAAasB,OAAb,GAAuB;AACrBiC,MAAAA,OAAO,EAAC;AACJC,QAAAA,IAAI,EAAC;AACDC,UAAAA,IAAI,EAAC,gBADJ;AAEDC,UAAAA,KAAK,EAAC,MAFL;AAGDC,UAAAA,SAAS,EAAC;AAHT,SADD;AAOJC,QAAAA,OAAO,EAAC;AACJH,UAAAA,IAAI,EAAC,eADD;AAEJC,UAAAA,KAAK,EAAC,SAFF;AAGJC,UAAAA,SAAS,EAAC;AAHN;AAPJ;AADa,KAAvB,CAAJ,CAeCE,IAfD,CAeM,UAACH,KAAD,EAAS;AACX,cAAQA,KAAR;AACI,aAAK,MAAL;AACItC,UAAAA,SAAS,CAACC,EAAD,EAAIC,OAAJ,CAAT;AACA;;AAEE,aAAK,SAAL;AACM+B,UAAAA,qBAAqB,CAAChC,EAAD,EAAIC,OAAJ,CAArB;AACF;;AAEV;AACI;AAVR;AAYH,KA5BD;AA6BD,GA9BD;;AA+BA,MAAMwC,OAAO,GAAC,SAARA,OAAQ,CAACzC,EAAD,EAAIC,OAAJ,EAAc;AACxB,wBAAO;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAIgC,aAAa,CAACjC,EAAD,EAAIC,OAAJ,CAAjB;AAAA,OAAjB;AAAgD,MAAA,SAAS,EAAC,iBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACF,GAFF;;AAIC,MAAMyC,gBAAgB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA3D,UAAU,CAAC4D,iBAAX,CAA6BlD,MAA7B,CADA;;AAAA;AACfc,cAAAA,MADe;;AAAA,oBAIlBA,MAAM,CAACC,IAAP,KAAgB,MAJE;AAAA;AAAA;AAAA;;AAKnB7B,cAAAA,IAAI,mBAAmB,cAAnB,EAAmC,SAAnC,CAAJ;AAEAO,cAAAA,OAAO,CAAC,KAAD,CAAP;AACAE,cAAAA,cAAc,CAAC,KAAD,CAAd;AACAU,cAAAA,OAAO,CAAC,EAAD,CAAP;AACAW,cAAAA,mBAAmB;AAVA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBiC,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AAgBF,MAAME,WAAW,GAAC,SAAZA,WAAY,GAAI;AAClBjE,IAAAA,IAAI,uCAAgCkB,IAAI,CAAC,QAAD,CAApC,mBAA6D;AAC7DqC,MAAAA,OAAO,EAAC;AACJW,QAAAA,MAAM,EAAC,UADH;AAEJC,QAAAA,QAAQ,EAAC;AACLV,UAAAA,IAAI,EAAC,YADA;AAEJC,UAAAA,KAAK,EAAC,UAFF;AAGJC,UAAAA,SAAS,EAAC;AAHN;AAFL;AADqD,KAA7D,CAAJ,CAUCE,IAVD,CAUM,UAACH,KAAD,EAAS;AACX,cAAQA,KAAR;AACI,aAAK,UAAL;AAEM1D,UAAAA,IAAI,CAAC,iBAAD,EAAmB,aAAnB,EAAiC,SAAjC,CAAJ;AACAO,UAAAA,OAAO,CAAC,KAAD,CAAP;AACLE,UAAAA,cAAc,CAAC,KAAD,CAAd;AACG;;AAEJ;AACIT,UAAAA,IAAI,CAAC,oBAAD,EAAsB,aAAtB,EAAoC,SAApC,CAAJ;AACA;AAVR;AAYH,KAvBD;AAwBH,GAzBD;;AA2BE,MAAMoE,IAAI,GAAC,SAALA,IAAK,GAAI;AACZ,wBAAO;AAAA,8BACG;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAIhB,aAAa,EAAjB;AAAA,SAAjB;AAAsC,QAAA,SAAS,EAAC,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADH,eAEG;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAIa,WAAW,EAAf;AAAA,SAAjB;AAAqC,QAAA,SAAS,EAAC,iBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFH;AAAA,oBAAP;AAKF,GAND;;AASJ,MAAMnC,mBAAmB;AAAA,yEAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACJ1B,UAAU,CAACiE,mBAAX,EADI;;AAAA;AACnBzC,cAAAA,MADmB;AAGrB0C,cAAAA,aAHqB,GAGP,EAHO;AAIrB1C,cAAAA,MAAM,CAACC,IAAP,CAAY0C,OAAZ,CAAoB,UAAAC,OAAO,EAAI;AACxB,oBAAIC,GAAG,GAAE;AACP,6BAAUD,OAAO,CAACE,OADX;AAEPC,kBAAAA,QAAQ,EAACH,OAAO,CAACI,mBAFV;AAGPC,kBAAAA,KAAK,EAACL,OAAO,CAACM,YAHP;AAIPC,kBAAAA,SAAS,EAACP,OAAO,CAACQ,UAJX;AAKPC,kBAAAA,MAAM,eAAC;AAAM,oBAAA,SAAS,EAAC,kBAAhB;AAAA,8BAAoCT,OAAO,CAACU;AAA5C;AAAA;AAAA;AAAA;AAAA,2BALA;AAMPC,kBAAAA,KAAK,EAACX,OAAO,CAACY,mBANP;AAOPC,kBAAAA,MAAM,EAACvB,OAAO,CAACU,OAAO,CAACE,OAAT,EAAiBF,OAAO,CAACE,OAAzB;AAPP,iBAAT;AAUAJ,gBAAAA,aAAa,CAACgB,IAAd,CAAmBb,GAAnB;AACN,eAZD;AAcA5D,cAAAA,cAAc,CAACyD,aAAD,CAAd;;AAlBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA,oBAAnBxC,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAuBAlC,EAAAA,SAAS,CAAC,YAAI;AACZkC,IAAAA,mBAAmB;AACpB,GAFQ,EAEP,EAFO,CAAT;AAOG,MAAMyD,OAAO,GAAC,CACV;AACIC,IAAAA,SAAS,EAAE,SADf;AAEI/B,IAAAA,IAAI,EAAE;AAFV,GADU,EAMR;AACE+B,IAAAA,SAAS,EAAE,UADb;AAEE/B,IAAAA,IAAI,EAAE;AAFR,GANQ,EAWR;AACE+B,IAAAA,SAAS,EAAE,OADb;AAEE/B,IAAAA,IAAI,EAAE;AAFR,GAXQ,EAgBR;AACE+B,IAAAA,SAAS,EAAE,WADb;AAEE/B,IAAAA,IAAI,EAAE;AAFR,GAhBQ,EAqBR;AACE+B,IAAAA,SAAS,EAAE,QADb;AAEE/B,IAAAA,IAAI,EAAE;AAFR,GArBQ,EA0BR;AACE+B,IAAAA,SAAS,EAAE,OADb;AAEE/B,IAAAA,IAAI,EAAE;AAFR,GA1BQ,EA+BR;AACE+B,IAAAA,SAAS,EAAE,QADb;AAEE/B,IAAAA,IAAI,EAAE;AAFR,GA/BQ,CAAd;AAuCA,sBAAO;AAAA,eACA/C,cAAc,iBAAI,QAAC,WAAD;AAAa,MAAA,EAAE,EAAEQ,IAAI,CAAC,QAAD,CAArB;AAAiC,MAAA,QAAQ,EAAE,KAA3C;AAAkD,MAAA,SAAS,EAAEmC;AAA7D;AAAA;AAAA;AAAA;AAAA,aADlB,eAEA,QAAC,SAAD;AACC,MAAA,IAAI,EAAE/C,IADP;AACa,MAAA,KAAK,EAAEkB,KADpB;AAEC,MAAA,OAAO,EAAE,KAFV;AAGC,MAAA,OAAO,EAAE4C,IAHV;AAIC,MAAA,OAAO,EAAErC,OAAO;AAJjB;AAAA;AAAA;AAAA;AAAA,aAFA,eASE,QAAC,SAAD;AACC,MAAA,IAAI,EAAEvB,eADP;AAEE,MAAA,UAAU,EAAE,uBAFd;AAGE,MAAA,OAAO,EAAEiC,eAAe,EAH1B;AAIE,MAAA,IAAI,EAAEf,qBAJR;AAKE,MAAA,KAAK,EAAED;AALT;AAAA;AAAA;AAAA;AAAA,aATF,EAiBF,CAACf,cAAD,iBAAoB,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAEE,WAArB;AAAkC,MAAA,OAAO,EAAE2E,OAA3C;AAAoD,MAAA,KAAK,EAAE;AAA3D;AAAA;AAAA;AAAA;AAAA,aAjBlB;AAAA,kBAAP;AAqBH,CAvTD;;IAAMlF,e;;KAAAA,e;AAyTN,eAAeA,eAAf","sourcesContent":["//import { cilSortNumericDown } from \"@coreui/icons\";\nimport { useEffect, useState } from \"react\";\nimport ModalCard from \"src/views/modal/Modal\";\nimport TableCard from \"src/views/table/TableCard\";\nimport swal from \"sweetalert\";\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport SingeleTask from \"../../TaskDetails/SingleTaskDetails\";\nimport ApiRequest from \"src/Api/Data/requestApi\";\n\n\nconst NewTaskSubmited = ()=>{\n\n  const [Show,setShow]=useState(false);\n  const [showRedoneModal,setRedoneModal]= useState(false);\n  const [showSingleTask,setShowSingleTask]= useState(false);\n  const [newSubmited,setNewSubmited] = useState([]);\n  const [taskId,setTaskId] = useState('');\n  const [revisionContent,setRevision]=useState('');\n \n\n  const [task,setTask]=useState([]);\n\n  const OpenModal =(id,invoice)=>{\n       setTaskId(id);\n      setTask({taskid:id,invoice:invoice});\n      setShow(true);\n\n    //  console.log(task);\n      \n      \n  }\n\n  const Close=()=>{\n      setShow(false);\n      setTask([]);\n  }\n  const CloseRedone=()=>{\n      setRedoneModal(false);\n      setShow(true)\n  }\n\n  const SubmitRevisionDetails=async ()=>{\n       \n    if(revisionContent === \"\"){\n    \n      swal(`Error`, \"provide revision details\", \"error\");\n      return;\n    }\n \n    var result = await ApiRequest.sendRevisionRequest(taskId,revisionContent);\n\n    if(result.data === \"done\"){\n      swal(`REVISION REQUEST`, \"Sent Succesfully\", \"success\")\n    \n      setShow(false);\n      setRedoneModal(false);\n      setTask([]);\n      LoadNewSubmitedTask();\n      return\n    }\n    else{\n      swal(`Error`, \"process failed\", \"error\");\n    }\n\n   \n   \n   \n  }\n\n  const Content =()=>{\n\n    const [submitedFiles,setSubmitedFiles] = useState([]);\n\n      const loadFiles = async ()=>{\n            const result = await ApiRequest.getSubmitedFiles(taskId);\n            setSubmitedFiles(result.data);\n      }\n     \n      if(Show){\n        loadFiles();\n      }\n  \n      return <>\n <ul className=\"list-group\">\n    {submitedFiles.map((item)=>{\n     // tbl_task_submited_url\n     return <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n           {item.tbl_task_submited_url.split('files/')[1]}\n     <span style={{cursor:\"pointer\"}} className=\"badge badge-primary badge-pill\">Download</span>\n          </li>\n      \n    })}\n \n</ul>\n       </>\n  }\n\n  const RevisionContenT=()=>{\n\n    \n\n      return <>\n               {<h6>REVISION REQUEST FOR ORDER {task['taskid']}</h6>}\n               <br/>\n                 <label>Revision Details</label>\n               <CKEditor\n       \n       editor={ ClassicEditor }\n      // data={message}\n    \n       onReady={ editor => {\n           // You can store the \"editor\" and use when it is needed.\n           //console.log( 'Editor is ready to use!', editor );\n           editor.editing.view.change((writer) => {\n            writer.setStyle(\n                \"height\",\n                \"300px\",\n                editor.editing.view.document.getRoot()\n            );\n            });\n       } }\n       onChange={ ( event, editor ) => {\n           const data = editor.getData();\n                 \n          setRevision(data);\n       } }\n      \n   />\n            </>\n  }\n\n  const RequestRedone=()=>{\n      setShow(false);\n      setRedoneModal(true);\n\n  }\n\n  const OpenSingleTaskDetails=(id,invoice)=>{\n    setTask({taskid:id,invoice:invoice});\n      setTaskId(id);\n      setShowSingleTask(!showSingleTask);\n     \n  }\n\n    const OpenMoreModal=(id,invoice)=>{\n      swal(`INVOICE +${invoice}`,{\n            buttons:{\n                file:{\n                    text:\"SUBMITED FILES\",\n                    value:\"file\",\n                    className:\"btn btn-outline-info\"\n                },\n               \n                details:{\n                    text:\"ORDER DETAILS\",\n                    value:\"details\",\n                    className:\"btn btn-info\"\n                },\n            }\n      })\n      .then((value)=>{\n          switch (value) {\n              case \"file\":\n                  OpenModal(id,invoice);\n                  break;\n               \n                    case \"details\":\n                          OpenSingleTaskDetails(id,invoice);\n                        break;  \n          \n              default:\n                  break;\n          }\n      })\n    }\n    const Buttons=(id,invoice)=>{\n        return <button onClick={()=>OpenMoreModal(id,invoice)} className=\"btn btn-primary\">More</button>\n     }\n\n     const MarkTaskcomplete = async ()=>{\n         const result = await ApiRequest.markTaskCompleted(taskId);\n        \n\n         if(result.data === \"done\"){\n           swal(`Task Completed`, \" Succesfully\", \"success\")\n         \n           setShow(false);\n           setRedoneModal(false);\n           setTask([]);\n           LoadNewSubmitedTask();\n           return\n         }\n\n     }\n\n   const AcceptOrder=()=>{\n       swal(`You Are About To Mark Order ${task['taskid']} As Complete`,{\n           buttons:{\n               cancel:\"Cancel !\",\n               complete:{\n                   text:\"COMPLETED?\",\n                    value:\"complete\",\n                    className:\"btn btn-success\"\n               }\n           }\n       })\n       .then((value)=>{\n           switch (value) {\n               case 'complete':\n                \n                     swal(\"ORDER COMPLETED\",\"succesfully\",\"success\");\n                     setShow(false);\n                setRedoneModal(false);\n                   break;\n           \n               default:\n                   swal(\"Process Cancelled \",\"succesfully\",\"success\");\n                   break;\n           }\n       })\n   }  \n\n     const Btns=()=>{\n        return <> \n                  <button onClick={()=>RequestRedone()} className=\"btn btn-info\">REQUEST REDONE</button>\n                  <button onClick={()=>AcceptOrder()}  className=\"btn btn-success\">ACCEPT ORDER</button>\n                 \n              </>\n     }\n  \n\n const LoadNewSubmitedTask =async ()=>{\n   const result = await ApiRequest.getNewSubmitedFiles();\n\n   var organisedData=[];\n       result.data.forEach(element => {\n              var dat ={\n                \"#taskId\":element.task_id,\n                username:element.writer_display_name,\n                email:element.writer_email,\n                taskTitle:element.task_title,\n                status:<span className=\"badge badge-info\">{element.task_status}</span>,\n                edate:element.taskl_accepted_date,\n                action:Buttons(element.task_id,element.task_id)\n              }\n\n              organisedData.push(dat);\n       });\n\n       setNewSubmited(organisedData);\n\n\n }   \n \n useEffect(()=>{\n   LoadNewSubmitedTask();\n },[]);\n\n\n\n\n    const columns=[\n        {\n            dataField: \"#taskId\",\n            text: \"#taskId\",\n           \n          },\n          {\n            dataField: \"username\",\n            text: \"writername\",\n           \n          },\n          {\n            dataField: \"email\",\n            text: \"writer email\",\n           \n          },\n          {\n            dataField: \"taskTitle\",\n            text: \"Task Title\",\n           \n          },\n          {\n            dataField: \"status\",\n            text: \"status\",\n           \n          },\n          {\n            dataField: \"edate\",\n            text: \"DeadLine\",\n           \n          },\n          {\n            dataField: \"action\",\n            text: \"Actions\",\n           \n          },\n    ]\n  \n\n    return <>\n          {showSingleTask && <SingeleTask id={task['taskid']} isAccept={false} closeTask={OpenSingleTaskDetails}/>}\n           <ModalCard\n            Show={Show} Close={Close}\n            showBtn={false}\n            Buttons={Btns}\n            content={Content()}\n             />\n\n             <ModalCard\n              Show={showRedoneModal}\n               ButtonName={\"SEND REVISION REQUEST\"}\n               content={RevisionContenT()}\n               Save={SubmitRevisionDetails}\n               Close={CloseRedone}\n\n             />\n        {!showSingleTask &&  <TableCard products={newSubmited} columns={columns} title={\"NEW SUBMITED TASK\"}/>}\n     </>\n  \n\n}\n\nexport default NewTaskSubmited;"]},"metadata":{},"sourceType":"module"}