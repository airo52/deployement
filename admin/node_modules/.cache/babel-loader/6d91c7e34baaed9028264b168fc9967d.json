{"ast":null,"code":"import _toConsumableArray from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/tony/Documents/Projects/react/Writer/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/pending/pendingPayments.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport TableCard from \"src/views/table/TableCard\";\nimport SingeleTask from \"../../Task/TaskDetails/SingleTaskDetails\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar PendingPayments = function PendingPayments() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isShowSingleTask = _useState2[0],\n      setIsShowSingleTask = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskId = _useState4[0],\n      setTaskId = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      markedOrders = _useState6[0],\n      setMarkedOrders = _useState6[1];\n\n  var ShowSingleTasks = function ShowSingleTasks(taskid) {\n    setTaskId(taskid); // setIsShowInvoice(false);\n\n    setIsShowSingleTask(true);\n  };\n\n  var CloseSingleTask = function CloseSingleTask() {\n    setTaskId(''); // setIsShowInvoice(false);\n\n    setIsShowSingleTask(false);\n  };\n\n  var SubmitMultipleMarked = function SubmitMultipleMarked() {\n    console.log();\n  };\n\n  var HandleSelected = function HandleSelected(id, invoice, event) {\n    if (event.target.checked) {\n      var newMarked = _toConsumableArray(markedOrders);\n\n      newMarked.push({\n        invoice: invoice,\n        taskId: id\n      }); //[i][e.target.name] = e.target.value;\n\n      setMarkedOrders(newMarked);\n    } else {\n      var _newMarked = _toConsumableArray(markedOrders);\n\n      _newMarked = _newMarked.filter(function (item) {\n        return item.taskId !== id;\n      }); // newMarked.push({invoice:invoice,taskId:id})\n\n      setMarkedOrders(_newMarked);\n    }\n\n    ;\n  };\n\n  var Button = function Button(id) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginRight: \"5px\"\n        },\n        className: \"btn btn-info\",\n        children: \"Mark Paid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          color: \"#000\"\n        },\n        onClick: function onClick() {\n          return ShowSingleTasks(id);\n        },\n        className: \"btn btn-success fa fa-history\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }, _this)]\n    }, void 0, true);\n  };\n\n  var columns = [{\n    dataField: \"check\",\n    text: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"fa fa-check badge badge-success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }, _this)\n  }, {\n    dataField: \"#taskId\",\n    text: \"#taskId\"\n  }, {\n    dataField: \"invoiceId\",\n    text: \"#Invoice Id\"\n  }, {\n    dataField: \"email\",\n    text: \"Writer email\"\n  }, {\n    dataField: \"status\",\n    text: \"status\"\n  }, {\n    dataField: \"pdate\",\n    text: \"Expected-Day-Pay\"\n  }, {\n    dataField: \"Action\",\n    text: \"Action\"\n  }];\n  var products = [{\n    check: /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: function onChange(e) {\n        return HandleSelected(1, '#738829', e);\n      },\n      type: \"checkbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }, _this),\n    \"#taskId\": \"#738829\",\n    invoiceId: \"#55445555\",\n    email: \"airotony8@gmail.com\",\n    status: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"badge badge-warning\",\n      children: \"unpaid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 20\n    }, _this),\n    pdate: \"2021-7-10\",\n    Action: Button(1)\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isShowSingleTask && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning\",\n        children: \"Submit All Selected As Paid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container card\",\n        children: /*#__PURE__*/_jsxDEV(TableCard, {\n          products: products,\n          columns: columns,\n          title: \"PENDING PAYMENTS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 14\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 14\n      }, _this)]\n    }, void 0, true), isShowSingleTask && /*#__PURE__*/_jsxDEV(SingeleTask, {\n      id: taskId,\n      closeTask: CloseSingleTask,\n      isAccept: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 34\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(PendingPayments, \"Hh5OxM1pGqRXTOospJId1OK8zxw=\");\n\n_c = PendingPayments;\nexport default PendingPayments;\n\nvar _c;\n\n$RefreshReg$(_c, \"PendingPayments\");","map":{"version":3,"sources":["/Users/tony/Documents/Projects/react/Writer/admin/src/views/base/Payments/pending/pendingPayments.js"],"names":["useState","TableCard","SingeleTask","PendingPayments","isShowSingleTask","setIsShowSingleTask","taskId","setTaskId","markedOrders","setMarkedOrders","ShowSingleTasks","taskid","CloseSingleTask","SubmitMultipleMarked","console","log","HandleSelected","id","invoice","event","target","checked","newMarked","push","filter","item","Button","marginRight","color","columns","dataField","text","products","check","e","invoiceId","email","status","pdate","Action"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport TableCard from \"src/views/table/TableCard\";\nimport SingeleTask from \"../../Task/TaskDetails/SingleTaskDetails\";\n\nconst PendingPayments= ()=>{\n\n  const [isShowSingleTask,setIsShowSingleTask]=useState(false);\n  const [taskId,setTaskId]=useState('');\n  const [markedOrders,setMarkedOrders] = useState([])\n\n  const ShowSingleTasks =taskid=>{\n    setTaskId(taskid);\n  // setIsShowInvoice(false);\n   setIsShowSingleTask(true);\n  }\n  const CloseSingleTask=()=>{\n    setTaskId('');\n    // setIsShowInvoice(false);\n     setIsShowSingleTask(false);\n  }\n  const SubmitMultipleMarked = ()=>{\n    console.log()\n  }\n\n  const HandleSelected =(id,invoice,event)=>{\n      if(event.target.checked){\n        let newMarked = [...markedOrders];\n        newMarked.push({invoice:invoice,taskId:id})\n        //[i][e.target.name] = e.target.value;\n       setMarkedOrders(newMarked);\n\n       \n      }else {\n        let newMarked = [...markedOrders];\n       newMarked= newMarked.filter((item)=>item.taskId !== id);\n       // newMarked.push({invoice:invoice,taskId:id})\n       setMarkedOrders(newMarked);\n        \n      };\n  }\n\n  const Button=id=>{\n    return <>\n        <button style={{marginRight:\"5px\"}} className=\"btn btn-info\">Mark Paid</button>\n    <button style={{\n             \n              color:\"#000\",\n            \n  }} onClick={()=>ShowSingleTasks(id)} className=\"btn btn-success fa fa-history\"></button>\n  </>\n  }\n    const columns = [\n      {\n        dataField: \"check\",\n        text: <span className=\"fa fa-check badge badge-success\"></span>,\n       \n      },\n        {\n          dataField: \"#taskId\",\n          text: \"#taskId\",\n         \n        },\n      \n        {\n          dataField: \"invoiceId\",\n          text: \"#Invoice Id\",\n       \n        },\n        {\n          dataField: \"email\",\n          text: \"Writer email\",\n        \n        },\n        {\n          \n            dataField: \"status\",\n            text: \"status\",\n          \n          \n        },\n       \n        {\n          \n          dataField: \"pdate\",\n          text: \"Expected-Day-Pay\",\n        \n        \n      },\n        {\n            dataField: \"Action\",\n            text: \"Action\",\n         \n          }\n      ];\n      const products=[\n          {\n            check:<input onChange={(e)=>HandleSelected(1,'#738829',e)} type=\"checkbox\"/>,\n            \"#taskId\":\"#738829\",\n            invoiceId:\"#55445555\",\n            email:\"airotony8@gmail.com\",\n            status:<span className=\"badge badge-warning\">unpaid</span>,\n            pdate:\"2021-7-10\",\n            Action:Button(1)\n          }\n\n      ]\n    return <>\n            {!isShowSingleTask &&<>\n            <button className=\"btn btn-warning\">Submit All Selected As Paid</button>\n             <div className=\"container card\">\n              \n             <TableCard \n             products={products}\n             columns={columns}\n              title={\"PENDING PAYMENTS\"}\n             />\n             </div></>}\n\n            {isShowSingleTask && <SingeleTask id={taskId} closeTask={CloseSingleTask} isAccept={false}/>}\n          </>\n          \n}\nexport default PendingPayments;"]},"metadata":{},"sourceType":"module"}