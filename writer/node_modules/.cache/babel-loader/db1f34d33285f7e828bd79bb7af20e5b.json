{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import ApiRequest from\"src/Api/Requests/Apirequest\";import Invoice from\"../../Invoice/invoice\";import SingeleTask from\"../../NewTask/taskDetails/singleTaskDetails\";import TableCard from\"../../Table/tableCard\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var UnpaidOrders=function UnpaidOrders(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isSingleTaskOpen=_useState2[0],setShowSingleTask=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),singleTaskId=_useState4[0],setSingleTaskId=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),UnpaidOrders=_useState6[0],setUnpaid=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),email=_useState8[0],setEmail=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),date=_useState10[0],setDate=_useState10[1];var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),Paid=_useState12[0],setPaid=_useState12[1];var _useState13=useState(0),_useState14=_slicedToArray(_useState13,2),unPaid=_useState14[0],setunPaid=_useState14[1];var _useState15=useState(0),_useState16=_slicedToArray(_useState15,2),PaidTotal=_useState16[0],setPaidTotal=_useState16[1];var handleShowSingleTask=function handleShowSingleTask(id){setSingleTaskId(id);setShowSingleTask(true);};var handleCloseTask=function handleCloseTask(){setSingleTaskId('');setShowSingleTask(false);};var getUnpaidOrders=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var result,organisedData,date,email,paid,Unpaid,total;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return ApiRequest.getUnpaidOrders();case 2:result=_context.sent;organisedData=[];date='';email='';paid=0;Unpaid=0;total=0;result.data.forEach(function(element){var dat={\"#order\":element.task_id,\"OrderName\":element.task_name,\"Title\":element.task_title,\"status\":/*#__PURE__*/_jsx(\"span\",{className:\"badge badge-danger\",children:element.task_status}),\"pstatus\":/*#__PURE__*/_jsx(\"span\",{className:\"badge badge-danger\",children:element.payment_status}),\"Created\":element.task_created_date,\"Deadline\":element.task_deadline,\"Service\":element.task_service,\"Pages\":element.pages,\"amount\":element.payment_expected_amount,\"Action\":/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:function onClick(){return handleShowSingleTask(element.task_id);},children:\"Details\"})};email=element.writer_email;date=element.end_date;if(element.payment_status==='unpaid'){Unpaid=Unpaid+Number(element.payment_expected_amount);}if(element.payment_status==='paid'){paid=paid+Number(element.payment_expected_amount);}organisedData.push(dat);});if(paid=='0'){total=paid;}else{total=paid+Unpaid;}setPaidTotal(total);setunPaid(Unpaid);setPaid(paid);setEmail(email);setDate(date);setUnpaid(organisedData);case 17:case\"end\":return _context.stop();}}},_callee);}));return function getUnpaidOrders(){return _ref.apply(this,arguments);};}();useEffect(function(){getUnpaidOrders();},[]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"container-fluid jumbotron card bg-white text-dark\",children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(React.Fragment,{children:[!isSingleTaskOpen&&/*#__PURE__*/_jsx(Invoice,{total:PaidTotal,unpaid:unPaid,paid:Paid,writerEmail:email,InvoiceEndate:date,tableData:UnpaidOrders,showSingleTask:handleShowSingleTask}),isSingleTaskOpen&&/*#__PURE__*/_jsx(SingeleTask,{isAccept:false,closeTask:handleCloseTask,id:singleTaskId})]})})})});};export default UnpaidOrders;","map":{"version":3,"sources":["/Users/tony/Documents/Projects/react/Writer/writer/src/views/base/Finaces/unpaid/index.js"],"names":["React","useEffect","useState","ApiRequest","Invoice","SingeleTask","TableCard","UnpaidOrders","isSingleTaskOpen","setShowSingleTask","singleTaskId","setSingleTaskId","setUnpaid","email","setEmail","date","setDate","Paid","setPaid","unPaid","setunPaid","PaidTotal","setPaidTotal","handleShowSingleTask","id","handleCloseTask","getUnpaidOrders","result","organisedData","paid","Unpaid","total","data","forEach","element","dat","task_id","task_name","task_title","task_status","payment_status","task_created_date","task_deadline","task_service","pages","payment_expected_amount","writer_email","end_date","Number","push"],"mappings":"wfAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,UAAP,KAAuB,6BAAvB,CAEA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,6CAAxB,CACA,MAAOC,CAAAA,SAAP,KAAsB,uBAAtB,C,6IAEA,GAAMC,CAAAA,YAAY,CAAC,uBAAI,CAEnB,cAA6CL,QAAQ,CAAC,KAAD,CAArD,wCAAOM,gBAAP,eAAwBC,iBAAxB,eACA,eAAuCP,QAAQ,EAA/C,yCAAOQ,YAAP,eAAoBC,eAApB,eACA,eAAiCT,QAAQ,CAAC,EAAD,CAAzC,yCAAOK,YAAP,eAAoBK,SAApB,eACA,eAAyBV,QAAQ,CAAC,EAAD,CAAjC,yCAAOW,KAAP,eAAaC,QAAb,eACA,eAAuBZ,QAAQ,CAAC,EAAD,CAA/B,0CAAOa,IAAP,gBAAYC,OAAZ,gBACA,gBAAuBd,QAAQ,CAAC,EAAD,CAA/B,2CAAOe,IAAP,gBAAYC,OAAZ,gBACE,gBAA2BhB,QAAQ,CAAC,CAAD,CAAnC,2CAAOiB,MAAP,gBAAcC,SAAd,gBACA,gBAAiClB,QAAQ,CAAC,CAAD,CAAzC,2CAAOmB,SAAP,gBAAiBC,YAAjB,gBAEF,GAAMC,CAAAA,oBAAoB,CAAC,QAArBA,CAAAA,oBAAqB,CAACC,EAAD,CAAM,CAE3Bb,eAAe,CAACa,EAAD,CAAf,CACAf,iBAAiB,CAAC,IAAD,CAAjB,CACL,CAJD,CAMA,GAAMgB,CAAAA,eAAe,CAAC,QAAhBA,CAAAA,eAAgB,EAAI,CACvBd,eAAe,CAAC,EAAD,CAAf,CACAF,iBAAiB,CAAC,KAAD,CAAjB,CACF,CAHD,CAOA,GAAMiB,CAAAA,eAAe,0FAAE,+MACAvB,CAAAA,UAAU,CAACuB,eAAX,EADA,QACfC,MADe,eAGdC,aAHc,CAGC,EAHD,CAIhBb,IAJgB,CAIT,EAJS,CAKhBF,KALgB,CAKT,EALS,CAMhBgB,IANgB,CAMV,CANU,CAOhBC,MAPgB,CAOR,CAPQ,CAQhBC,KARgB,CAQR,CARQ,CASrBJ,MAAM,CAACK,IAAP,CAAYC,OAAZ,CAAoB,SAAAC,OAAO,CAAI,CACtB,GAAIC,CAAAA,GAAG,CAAE,CACL,SAAUD,OAAO,CAACE,OADb,CAEL,YAAaF,OAAO,CAACG,SAFhB,CAGL,QAASH,OAAO,CAACI,UAHZ,CAIL,sBAAU,aAAM,SAAS,CAAC,oBAAhB,UAAsCJ,OAAO,CAACK,WAA9C,EAJL,CAKL,uBAAU,aAAM,SAAS,CAAC,oBAAhB,UAAsCL,OAAO,CAACM,cAA9C,EALL,CAML,UAAWN,OAAO,CAACO,iBANd,CAOL,WAAYP,OAAO,CAACQ,aAPf,CAQL,UAAWR,OAAO,CAACS,YARd,CASL,QAAST,OAAO,CAACU,KATZ,CAUL,SAASV,OAAO,CAACW,uBAVZ,CAWL,sBAAS,eAAQ,SAAS,CAAC,iBAAlB,CAAoC,OAAO,CAAE,yBAAItB,CAAAA,oBAAoB,CAACW,OAAO,CAACE,OAAT,CAAxB,EAA7C,qBAXJ,CAAT,CAcFvB,KAAK,CAACqB,OAAO,CAACY,YAAd,CACA/B,IAAI,CAAGmB,OAAO,CAACa,QAAf,CACA,GAAGb,OAAO,CAACM,cAAR,GAA2B,QAA9B,CAAuC,CACtCV,MAAM,CAAGA,MAAM,CAAGkB,MAAM,CAACd,OAAO,CAACW,uBAAT,CAAxB,CACH,CACD,GAAGX,OAAO,CAACM,cAAR,GAA2B,MAA9B,CAAqC,CAClCX,IAAI,CAAGA,IAAI,CAAGmB,MAAM,CAACd,OAAO,CAACW,uBAAT,CAApB,CACH,CAGKjB,aAAa,CAACqB,IAAd,CAAmBd,GAAnB,EACR,CA1BD,EA2BA,GAAGN,IAAI,EAAI,GAAX,CAAe,CACbE,KAAK,CAAGF,IAAR,CAED,CAHD,IAGK,CACHE,KAAK,CAAGF,IAAI,CAAEC,MAAd,CACD,CAEDR,YAAY,CAACS,KAAD,CAAZ,CACAX,SAAS,CAACU,MAAD,CAAT,CACAZ,OAAO,CAACW,IAAD,CAAP,CAGAf,QAAQ,CAACD,KAAD,CAAR,CACAG,OAAO,CAACD,IAAD,CAAP,CACAH,SAAS,CAACgB,aAAD,CAAT,CAlDqB,uDAAF,kBAAfF,CAAAA,eAAe,0CAArB,CAwDJzB,SAAS,CAAC,UAAI,CACbyB,eAAe,GACf,CAFQ,CAEP,EAFO,CAAT,CAGE,mBAAM,sCAEF,YAAK,SAAS,CAAC,mDAAf,uBACK,kCACD,MAAC,KAAD,CAAO,QAAP,YACK,CAAClB,gBAAD,eAAqB,KAAC,OAAD,EAAS,KAAK,CAAEa,SAAhB,CAA2B,MAAM,CAAEF,MAAnC,CAA2C,IAAI,CAAEF,IAAjD,CAAuD,WAAW,CAAEJ,KAApE,CAA2E,aAAa,CAAEE,IAA1F,CAAgG,SAAS,CAAER,YAA3G,CAAyH,cAAc,CAAEgB,oBAAzI,EAD1B,CAEKf,gBAAgB,eAAG,KAAC,WAAD,EAAa,QAAQ,CAAE,KAAvB,CAA8B,SAAS,CAAEiB,eAAzC,CAA0D,EAAE,CAAEf,YAA9D,EAFxB,GADC,EADL,EAFE,EAAN,CAYD,CA/FD,CAiGA,cAAeH,CAAAA,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Requests/Apirequest\";\n\nimport Invoice from \"../../Invoice/invoice\";\nimport SingeleTask from \"../../NewTask/taskDetails/singleTaskDetails\";\nimport TableCard from \"../../Table/tableCard\";\n\nconst UnpaidOrders=()=>{\n\n    const [isSingleTaskOpen,setShowSingleTask] = useState(false);\n    const [singleTaskId,setSingleTaskId] = useState();\n    const [UnpaidOrders,setUnpaid] = useState([]);\n    const [email,setEmail] = useState('');\n    const [date,setDate] = useState('');\n    const [Paid,setPaid] = useState('');\n      const [unPaid,setunPaid] = useState(0);\n      const [PaidTotal,setPaidTotal] = useState(0);\n\n    const handleShowSingleTask=(id)=>{\n      \n          setSingleTaskId(id);\n          setShowSingleTask(true);\n    }\n\n    const handleCloseTask=()=>{\n       setSingleTaskId('');\n       setShowSingleTask(false);\n    }\n\n    \n\n    const getUnpaidOrders =async ()=>{\n      const result = await ApiRequest.getUnpaidOrders();\n \n       const organisedData =[];\n       var date = '';\n       var email ='';\n       var paid =0;\n       var Unpaid =0;\n       var total = 0;\n      result.data.forEach(element => {\n               var dat ={\n                   \"#order\": element.task_id,\n                   \"OrderName\": element.task_name,\n                   \"Title\": element.task_title,\n                   \"status\": <span className=\"badge badge-danger\">{element.task_status}</span>,\n                   \"pstatus\":<span className=\"badge badge-danger\">{element.payment_status}</span>,\n                   \"Created\": element.task_created_date,\n                   \"Deadline\": element.task_deadline,\n                   \"Service\": element.task_service,\n                   \"Pages\": element.pages,\n                   \"amount\":element.payment_expected_amount,\n                   \"Action\":<button className=\"btn btn-primary\" onClick={()=>handleShowSingleTask(element.task_id)}>Details</button>\n               } \n\n             email=element.writer_email;\n             date = element.end_date;\n             if(element.payment_status === 'unpaid'){\n              Unpaid = Unpaid + Number(element.payment_expected_amount);\n          }\n          if(element.payment_status === 'paid'){\n             paid = paid + Number(element.payment_expected_amount);\n         }\n\n               \n               organisedData.push(dat);\n      });\n      if(paid == '0'){\n        total = paid;\n        \n      }else{\n        total = paid +Unpaid;\n      }\n      \n      setPaidTotal(total);\n      setunPaid(Unpaid);\n      setPaid(paid);\n       \n     \n      setEmail(email);\n      setDate(date);\n      setUnpaid(organisedData);\n}\n\n\n\n\nuseEffect(()=>{\n getUnpaidOrders()\n},[]);\n  return<> \n    \n      <div className=\"container-fluid jumbotron card bg-white text-dark\">\n           <div>\n          <React.Fragment> \n              {!isSingleTaskOpen && <Invoice total={PaidTotal} unpaid={unPaid} paid={Paid} writerEmail={email} InvoiceEndate={date} tableData={UnpaidOrders} showSingleTask={handleShowSingleTask}/>}\n              {isSingleTaskOpen &&<SingeleTask isAccept={false} closeTask={handleCloseTask} id={singleTaskId}/>}\n          </React.Fragment>\n           </div>\n         \n      </div>\n        </>\n}\n\nexport default UnpaidOrders;"]},"metadata":{},"sourceType":"module"}