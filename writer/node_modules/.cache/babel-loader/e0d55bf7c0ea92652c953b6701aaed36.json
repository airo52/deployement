{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/tony/Documents/Projects/react/Writer/writer/src/views/base/Finaces/unpaid/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Requests/Apirequest\";\nimport Invoice from \"../../Invoice/invoice\";\nimport SingeleTask from \"../../NewTask/taskDetails/singleTaskDetails\";\nimport TableCard from \"../../Table/tableCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar UnpaidOrders = function UnpaidOrders() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSingleTaskOpen = _useState2[0],\n      setShowSingleTask = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      singleTaskId = _useState4[0],\n      setSingleTaskId = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      UnpaidOrders = _useState6[0],\n      setUnpaid = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      email = _useState8[0],\n      setEmail = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      date = _useState10[0],\n      setDate = _useState10[1];\n\n  var handleShowSingleTask = function handleShowSingleTask(id) {\n    setSingleTaskId(id);\n    setShowSingleTask(true);\n  };\n\n  var handleCloseTask = function handleCloseTask() {\n    setSingleTaskId('');\n    setShowSingleTask(false);\n  };\n\n  var getUnpaidOrders = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result, organisedData, date, email;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return ApiRequest.getUnpaidOrders();\n\n            case 2:\n              result = _context.sent;\n              organisedData = [];\n              date = '';\n              email = '';\n              result.data.forEach(function (element) {\n                var dat = {\n                  \"#order\": element.task_id,\n                  \"OrderName\": element.task_name,\n                  \"Title\": element.task_title,\n                  \"status\": /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"badge badge-danger\",\n                    children: element.task_status\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 40,\n                    columnNumber: 30\n                  }, _this),\n                  \"pstatus\": /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"badge badge-danger\",\n                    children: element.payment_status\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 41,\n                    columnNumber: 30\n                  }, _this),\n                  \"Created\": element.task_created_date,\n                  \"Deadline\": element.task_deadline,\n                  \"Service\": element.task_service,\n                  \"Pages\": element.pages,\n                  \"amount\": element.payment_expected_amount,\n                  \"Action\": /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-primary\",\n                    onClick: function onClick() {\n                      return handleShowSingleTask(element.task_id);\n                    },\n                    children: \"Details\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 47,\n                    columnNumber: 29\n                  }, _this)\n                };\n                email = element.writer_email;\n                date = element.end_date;\n                organisedData.push(dat);\n              });\n              setEmail(email);\n              setDate(date);\n              setUnpaid(organisedData);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getUnpaidOrders() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getUnpaidOrders();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid jumbotron card bg-white text-dark\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [!isSingleTaskOpen && /*#__PURE__*/_jsxDEV(Invoice, {\n            writerEmail: email,\n            InvoiceEndate: date,\n            tableData: UnpaidOrders,\n            showSingleTask: handleShowSingleTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 37\n          }, _this), isSingleTaskOpen && /*#__PURE__*/_jsxDEV(SingeleTask, {\n            isAccept: false,\n            closeTask: handleCloseTask,\n            id: singleTaskId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 35\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 12\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(UnpaidOrders, \"FbPQCz2rh1WrraWmlXOxAso7Vq4=\");\n\n_c = UnpaidOrders;\nexport default UnpaidOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnpaidOrders\");","map":{"version":3,"sources":["/Users/tony/Documents/Projects/react/Writer/writer/src/views/base/Finaces/unpaid/index.js"],"names":["React","useEffect","useState","ApiRequest","Invoice","SingeleTask","TableCard","UnpaidOrders","isSingleTaskOpen","setShowSingleTask","singleTaskId","setSingleTaskId","setUnpaid","email","setEmail","date","setDate","handleShowSingleTask","id","handleCloseTask","getUnpaidOrders","result","organisedData","data","forEach","element","dat","task_id","task_name","task_title","task_status","payment_status","task_created_date","task_deadline","task_service","pages","payment_expected_amount","writer_email","end_date","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ApiRequest from \"src/Api/Requests/Apirequest\";\n\nimport Invoice from \"../../Invoice/invoice\";\nimport SingeleTask from \"../../NewTask/taskDetails/singleTaskDetails\";\nimport TableCard from \"../../Table/tableCard\";\n\nconst UnpaidOrders=()=>{\n\n    const [isSingleTaskOpen,setShowSingleTask] = useState(false);\n    const [singleTaskId,setSingleTaskId] = useState();\n    const [UnpaidOrders,setUnpaid] = useState([]);\n    const [email,setEmail] = useState('');\n    const [date,setDate] = useState('');\n\n    const handleShowSingleTask=(id)=>{\n      \n          setSingleTaskId(id);\n          setShowSingleTask(true);\n    }\n\n    const handleCloseTask=()=>{\n       setSingleTaskId('');\n       setShowSingleTask(false);\n    }\n\n    \n\n    const getUnpaidOrders =async ()=>{\n      const result = await ApiRequest.getUnpaidOrders();\n \n       const organisedData =[];\n       var date = '';\n       var email ='';\n      result.data.forEach(element => {\n               var dat ={\n                   \"#order\": element.task_id,\n                   \"OrderName\": element.task_name,\n                   \"Title\": element.task_title,\n                   \"status\": <span className=\"badge badge-danger\">{element.task_status}</span>,\n                   \"pstatus\":<span className=\"badge badge-danger\">{element.payment_status}</span>,\n                   \"Created\": element.task_created_date,\n                   \"Deadline\": element.task_deadline,\n                   \"Service\": element.task_service,\n                   \"Pages\": element.pages,\n                   \"amount\":element.payment_expected_amount,\n                   \"Action\":<button className=\"btn btn-primary\" onClick={()=>handleShowSingleTask(element.task_id)}>Details</button>\n               } \n\n             email=element.writer_email;\n             date = element.end_date;\n\n               \n               organisedData.push(dat);\n      });\n      setEmail(email);\n      setDate(date);\n      setUnpaid(organisedData);\n}\n\n\n\n\nuseEffect(()=>{\n getUnpaidOrders()\n},[]);\n  return<> \n    \n      <div className=\"container-fluid jumbotron card bg-white text-dark\">\n           <div>\n          <React.Fragment> \n              {!isSingleTaskOpen && <Invoice writerEmail={email} InvoiceEndate={date} tableData={UnpaidOrders} showSingleTask={handleShowSingleTask}/>}\n              {isSingleTaskOpen &&<SingeleTask isAccept={false} closeTask={handleCloseTask} id={singleTaskId}/>}\n          </React.Fragment>\n           </div>\n         \n      </div>\n        </>\n}\n\nexport default UnpaidOrders;"]},"metadata":{},"sourceType":"module"}