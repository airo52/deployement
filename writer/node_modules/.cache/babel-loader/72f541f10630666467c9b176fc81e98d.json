{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/tony/Documents/Projects/react/Writer/writer/src/views/base/Orders/assigned/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport SingeleTask from \"../../NewTask/taskDetails/singleTaskDetails\"; //import TableCard from \"../../Table/tableCard\";\n\nimport TableCard from '../../../table/TableCard';\nimport ApiRequest from \"src/Api/Requests/Apirequest\";\nimport swal from \"sweetalert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar AssignedOrders = function AssignedOrders() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSingleTaskOpen = _useState2[0],\n      setShowSingleTask = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      singleTaskId = _useState4[0],\n      setSingleTaskId = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      assignedTask = _useState6[0],\n      setAssignedTask = _useState6[1];\n\n  var HandleAssignedTask = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result, organisedData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return ApiRequest.getAssignedTask();\n\n            case 2:\n              result = _context.sent;\n              organisedData = []; // console.log(result.data)\n\n              result.data.forEach(function (element) {\n                var dat = {\n                  \"#order\": element.task_id,\n                  \"OrderName\": element.task_name,\n                  \"Title\": element.task_title,\n                  \"status\": /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"badge badge-danger\",\n                    children: element.task_status\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 25,\n                    columnNumber: 31\n                  }, _this),\n                  \"created\": element.task_created_date,\n                  \"deadline\": element.task_deadline,\n                  \"Service\": element.task_service,\n                  \"page\": element.pages,\n                  \"Action\": Buttons(element.task_id)\n                };\n                organisedData.push(dat);\n              });\n              setAssignedTask(organisedData);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function HandleAssignedTask() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    HandleAssignedTask();\n  }, []);\n\n  var handleShowSingleTask = function handleShowSingleTask(id) {\n    setSingleTaskId(id);\n    setShowSingleTask(true);\n  };\n\n  var handleCloseTask = function handleCloseTask() {\n    setSingleTaskId('');\n    setShowSingleTask(false);\n  };\n\n  var ViewItemDetails = function ViewItemDetails(id) {\n    handleShowSingleTask(id); //alert(id);\n  };\n\n  var Reject = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return ApiRequest.RejectTask(id);\n\n            case 2:\n              result = _context2.sent;\n\n              if (result.data === \"done\") {\n                swal('success', 'Task Rejected succesfully', 'success');\n                HandleAssignedTask();\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function Reject(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var Accept = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return ApiRequest.AcceptTask(id);\n\n            case 2:\n              result = _context3.sent;\n\n              if (result.data === \"done\") {\n                swal('success', 'Task accepted succesfully', 'success');\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function Accept(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var RejectOrder = function RejectOrder(id) {\n    swal(\"Are You Sure To Reject This Task!?\", {\n      buttons: {\n        cancel: \"Dont Proceed!\",\n        delete: {\n          text: \"Reject Task\",\n          value: \"reasign\"\n        }\n      }\n    }).then(function (value) {\n      switch (value) {\n        case \"reasign\":\n          Reject(id); // assignTask(user_id,task_id)\n          //swal(`task`, \"Re-assigned Successfully\", \"success\");\n\n          break;\n\n        default:\n          swal(\"Process Canceled Succesfully!\");\n      }\n    }); //alert(id);\n  };\n\n  var acceptTask = function acceptTask(id) {\n    swal(\"Are You Sure To Accept This Task!?\", {\n      buttons: {\n        cancel: \"Dont Proceed!\",\n        delete: {\n          text: \"Accept Task\",\n          value: \"reasign\"\n        }\n      }\n    }).then(function (value) {\n      switch (value) {\n        case \"reasign\":\n          Accept(id); // assignTask(user_id,task_id)\n          //swal(`task`, \"Re-assigned Successfully\", \"success\");\n\n          break;\n\n        default:\n          swal(\"Process Canceled Succesfully!\");\n      }\n    });\n  };\n\n  var Buttons = function Buttons(Ids) {\n    // alert(id)\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: function onClick() {\n          return RejectOrder(Ids);\n        },\n        children: \"Reject\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 10\n      }, _this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-info\",\n        onClick: function onClick() {\n          return ViewItemDetails(Ids);\n        },\n        children: \"Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 10\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 12\n    }, _this);\n  };\n\n  var columns = [{\n    dataField: '#order',\n    text: '#order'\n  }, {\n    dataField: 'OrderName',\n    text: 'ordername'\n  }, {\n    dataField: 'Title',\n    text: 'title'\n  }, {\n    dataField: 'status',\n    text: 'status'\n  }, {\n    dataField: 'created',\n    text: 'created'\n  }, {\n    dataField: 'deadline',\n    text: 'deadline'\n  }, {\n    dataField: 'Service',\n    text: 'service'\n  }, {\n    dataField: 'page',\n    text: 'page'\n  }, {\n    dataField: 'Action',\n    text: 'action'\n  }];\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [!isSingleTaskOpen && /*#__PURE__*/_jsxDEV(TableCard, {\n      title: \"assigned Orders\",\n      columns: columns,\n      products: assignedTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 23\n    }, _this), isSingleTaskOpen && /*#__PURE__*/_jsxDEV(SingeleTask, {\n      acceptTask: acceptTask,\n      closeTask: handleCloseTask,\n      id: singleTaskId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 22\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 8\n  }, _this);\n};\n\n_s(AssignedOrders, \"zJNFuWl/8YoWxrqqMx6Pdx8uQfg=\");\n\n_c = AssignedOrders;\nexport default AssignedOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"AssignedOrders\");","map":{"version":3,"sources":["/Users/tony/Documents/Projects/react/Writer/writer/src/views/base/Orders/assigned/index.js"],"names":["React","useEffect","useState","SingeleTask","TableCard","ApiRequest","swal","AssignedOrders","isSingleTaskOpen","setShowSingleTask","singleTaskId","setSingleTaskId","assignedTask","setAssignedTask","HandleAssignedTask","getAssignedTask","result","organisedData","data","forEach","element","dat","task_id","task_name","task_title","task_status","task_created_date","task_deadline","task_service","pages","Buttons","push","handleShowSingleTask","id","handleCloseTask","ViewItemDetails","Reject","RejectTask","Accept","AcceptTask","RejectOrder","buttons","cancel","delete","text","value","then","acceptTask","Ids","columns","dataField"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from \"react\";\nimport SingeleTask from \"../../NewTask/taskDetails/singleTaskDetails\";\n//import TableCard from \"../../Table/tableCard\";\nimport TableCard from '../../../table/TableCard';\nimport ApiRequest from \"src/Api/Requests/Apirequest\";\nimport swal from \"sweetalert\";\n\nconst AssignedOrders = ()=>{\n    const [isSingleTaskOpen,setShowSingleTask] = useState(false);\n    const [singleTaskId,setSingleTaskId] = useState();\n\n    const [assignedTask,setAssignedTask] = useState([]);\n\n\n    const HandleAssignedTask = async ()=>{\n        const result = await ApiRequest.getAssignedTask();\n          var organisedData = [];\n         // console.log(result.data)\n        result.data.forEach(element => {\n             var dat ={\n                    \"#order\": element.task_id,\n                    \"OrderName\":element.task_name,\n                    \"Title\": element.task_title,\n                    \"status\": <span className=\"badge badge-danger\">{element.task_status}</span>,\n                    \"created\": element.task_created_date,\n                    \"deadline\": element.task_deadline,\n                    \"Service\": element.task_service,\n                    \"page\": element.pages,\n                    \"Action\": Buttons(element.task_id)\n                 }\n\n                 organisedData.push(dat);\n             \n        });\n\n        setAssignedTask(organisedData);\n\n       \n    }\n    \n    useEffect(()=>{\n      HandleAssignedTask();\n    },[]);\n  \n    const handleShowSingleTask=(id)=>{\n      \n          setSingleTaskId(id);\n          setShowSingleTask(true);\n    }\n    \n  \n    const handleCloseTask=()=>{\n       setSingleTaskId('');\n       setShowSingleTask(false);\n    }\n\n const ViewItemDetails =(id)=>{\n    handleShowSingleTask(id)\n    //alert(id);\n}\nconst Reject=async (id)=>{\n    const result = await ApiRequest.RejectTask(id);\n    if(result.data === \"done\"){\n        swal('success','Task Rejected succesfully','success');\n        HandleAssignedTask();\n    }\n\n}\n\nconst Accept = async (id)=>{\n     const result = await ApiRequest.AcceptTask(id);\n\n     if(result.data === \"done\"){\n         swal('success','Task accepted succesfully','success');\n     }\n}\n\nconst RejectOrder = (id)=>{\n\n    swal(`Are You Sure To Reject This Task!?`, {\n        buttons: {\n          cancel: \"Dont Proceed!\",\n          delete: {\n            text: \"Reject Task\",\n            value: \"reasign\",\n          },\n         \n        },\n      })\n      .then((value) => {\n        switch (value) {\n       \n         \n       \n          case \"reasign\":\n              Reject(id);\n              // assignTask(user_id,task_id)\n            //swal(`task`, \"Re-assigned Successfully\", \"success\");\n            break;\n       \n          default:\n            swal(\"Process Canceled Succesfully!\");\n        }\n      });\n    //alert(id);\n}\n\nconst acceptTask = (id)=>{\n    swal(`Are You Sure To Accept This Task!?`, {\n        buttons: {\n          cancel: \"Dont Proceed!\",\n          delete: {\n            text: \"Accept Task\",\n            value: \"reasign\",\n          },\n         \n        },\n      })\n      .then((value) => {\n        switch (value) {\n       \n         \n       \n          case \"reasign\":\n              Accept(id)\n              // assignTask(user_id,task_id)\n            //swal(`task`, \"Re-assigned Successfully\", \"success\");\n            break;\n       \n          default:\n            swal(\"Process Canceled Succesfully!\");\n        }\n      });\n}\n\nconst Buttons =(Ids)=>{\n   // alert(id)\n    return <React.Fragment>\n         <button className=\"btn btn-danger\" onClick={()=>RejectOrder(Ids)}>Reject</button>&nbsp;\n         <button className=\"btn btn-info\" onClick={()=>ViewItemDetails(Ids)}>Details</button>\n    </React.Fragment>\n}\n\n\n\n\n const columns = [\n    \n        {\n            dataField: '#order',\n           text: '#order',\n        },\n        {\n            dataField: 'OrderName',\n           text: 'ordername',\n        },\n        {\n            dataField: 'Title',\n           text: 'title',\n        },\n        {\n            dataField: 'status',\n           text: 'status',\n        },\n        {\n            dataField: 'created',\n           text: 'created',\n        },\n        {\n            dataField: 'deadline',\n           text: 'deadline',\n        },\n        {\n            dataField: 'Service',\n           text: 'service',\n        },\n        {\n            dataField: 'page',\n           text: 'page',\n        },\n        \n        {\n            dataField: 'Action',\n           text: 'action',\n\n        },\n    \n ]\n\n\nreturn <React.Fragment>\n{!isSingleTaskOpen && <TableCard title={\"assigned Orders\"} columns={columns} products={assignedTask}/>}\n{isSingleTaskOpen && <SingeleTask acceptTask={acceptTask} closeTask={handleCloseTask} id={singleTaskId}/>}\n</React.Fragment> \n}\nexport default AssignedOrders;"]},"metadata":{},"sourceType":"module"}