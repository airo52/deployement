{"ast":null,"code":"import _slicedToArray from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/tony/Documents/Projects/react/Writer/writer/src/views/dashboard/Dashboard.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { lazy, useState } from 'react';\nimport NewTask from '../base/NewTask/NewTask.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar WidgetsDropdown = /*#__PURE__*/lazy(_c = function _c() {\n  return import('../widgets/WidgetsDropdown.js');\n}); //const WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\n\n_c2 = WidgetsDropdown;\n\nvar Dashboard = function Dashboard() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSingleTaskOpen = _useState2[0],\n      setShowSingleTask = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      singleTaskId = _useState4[0],\n      setSingleTaskId = _useState4[1];\n\n  var handleShowSingleTask = function handleShowSingleTask(id) {\n    setSingleTaskId(id);\n    setShowSingleTask(true);\n  };\n\n  var handleCloseTask = function handleCloseTask() {\n    setSingleTaskId('');\n    setShowSingleTask(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [!isSingleTaskOpen && /*#__PURE__*/_jsxDEV(WidgetsDropdown, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 29\n    }, _this), isSingleTaskOpen && /*#__PURE__*/_jsxDEV(NewTask, {\n      showSingleTask: handleShowSingleTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 28\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Dashboard, \"sqB2TyVxhnqGBj6zjVksviDqKwc=\");\n\n_c3 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"WidgetsDropdown$lazy\");\n$RefreshReg$(_c2, \"WidgetsDropdown\");\n$RefreshReg$(_c3, \"Dashboard\");","map":{"version":3,"sources":["/Users/tony/Documents/Projects/react/Writer/writer/src/views/dashboard/Dashboard.js"],"names":["React","lazy","useState","NewTask","WidgetsDropdown","Dashboard","isSingleTaskOpen","setShowSingleTask","singleTaskId","setSingleTaskId","handleShowSingleTask","id","handleCloseTask"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,OAAOC,OAAP,MAAoB,4BAApB;;AAKA,IAAMC,eAAe,gBAAGH,IAAI,MAAC;AAAA,SAAM,OAAO,+BAAP,CAAN;AAAA,CAAD,CAA5B,C,CACA;;MADMG,e;;AAGN,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAGtB,kBAA6CH,QAAQ,CAAC,KAAD,CAArD;AAAA;AAAA,MAAOI,gBAAP;AAAA,MAAwBC,iBAAxB;;AACA,mBAAuCL,QAAQ,EAA/C;AAAA;AAAA,MAAOM,YAAP;AAAA,MAAoBC,eAApB;;AAEA,MAAMC,oBAAoB,GAAC,SAArBA,oBAAqB,CAACC,EAAD,EAAM;AAE3BF,IAAAA,eAAe,CAACE,EAAD,CAAf;AACAJ,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACL,GAJD;;AAMA,MAAMK,eAAe,GAAC,SAAhBA,eAAgB,GAAI;AACvBH,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAF,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACF,GAHD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,eACG,CAACD,gBAAD,iBAAqB,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,aADxB,EAGGA,gBAAgB,iBAAI,QAAC,OAAD;AAAS,MAAA,cAAc,EAAEI;AAAzB;AAAA;AAAA;AAAA;AAAA,aAHvB;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,CA1BD;;GAAML,S;;MAAAA,S;AA4BN,eAAeA,SAAf","sourcesContent":["import React, { lazy, useState } from 'react'\n\nimport NewTask from '../base/NewTask/NewTask.js'\n\n\n\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\n//const WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\n\nconst Dashboard = () => {\n\n  \n  const [isSingleTaskOpen,setShowSingleTask] = useState(false);\n  const [singleTaskId,setSingleTaskId] = useState();\n\n  const handleShowSingleTask=(id)=>{\n    \n        setSingleTaskId(id);\n        setShowSingleTask(true);\n  }\n\n  const handleCloseTask=()=>{\n     setSingleTaskId('');\n     setShowSingleTask(false);\n  }\n  return (\n    <React.Fragment>\n      {!isSingleTaskOpen && <WidgetsDropdown />}\n     \n      {isSingleTaskOpen && <NewTask showSingleTask={handleShowSingleTask}/>}\n      \n\n     \n    </React.Fragment>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}