{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/tony/Documents/Projects/react/Writer/writer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/tony/Documents/Projects/react/Writer/writer/src/views/base/Orders/completed/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport SingeleTask from \"../../NewTask/taskDetails/singleTaskDetails\"; //import TableCard from \"../../Table/tableCard\";\n\nimport TablCard from '../../../table/TableCard';\nimport ApiRequest from \"src/Api/Requests/Apirequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CompletedOrders = function CompletedOrders() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSingleTaskOpen = _useState2[0],\n      setShowSingleTask = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      singleTaskId = _useState4[0],\n      setSingleTaskId = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      completed = _useState6[0],\n      setCompleted = _useState6[1];\n\n  var getCompletedTask = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result, organisedData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return ApiRequest.getCompletedTask();\n\n            case 2:\n              result = _context.sent;\n              organisedData = [];\n              result.data.forEach(function (element) {\n                var dat = {\n                  \"#order\": '#' + element.task_id,\n                  \"OrderName\": element.task_name,\n                  \"Title\": element.task_title,\n                  \"status\": /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"badge badge-danger\",\n                    children: element.task_status\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 21,\n                    columnNumber: 29\n                  }, _this),\n                  \"Createdon\": element.task_created_date,\n                  \"Deadline\": element.task_deadline,\n                  \"Service\": element.task_service,\n                  \"Pages\": element.pages,\n                  \"Action\": /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-info\",\n                    onClick: function onClick() {\n                      return ViewItemDetails(element.task_id);\n                    },\n                    children: \"Details\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 26,\n                    columnNumber: 29\n                  }, _this)\n                };\n                organisedData.push(dat);\n              });\n              setCompleted(organisedData);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getCompletedTask() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleShowSingleTask = function handleShowSingleTask(id) {\n    setSingleTaskId(id);\n    setShowSingleTask(true);\n  };\n\n  useEffect(function () {\n    getCompletedTask();\n  }, []);\n\n  var handleCloseTask = function handleCloseTask() {\n    setSingleTaskId('');\n    setShowSingleTask(false);\n  };\n\n  var ViewItemDetails = function ViewItemDetails(id) {\n    // alert(id);\n    handleShowSingleTask(id);\n  };\n\n  var columns = [{\n    dataField: '#order',\n    text: '#order'\n  }, {\n    dataField: 'OrderName',\n    text: 'ordername'\n  }, {\n    dataField: 'Title',\n    text: 'title'\n  }, {\n    dataField: 'status',\n    text: 'status'\n  }, {\n    dataField: 'Createdon',\n    text: 'created'\n  }, {\n    dataField: 'Deadline',\n    text: 'deadline'\n  }, {\n    dataField: 'Service',\n    text: 'service'\n  }, {\n    dataField: 'Pages',\n    text: 'page'\n  }, {\n    dataField: 'Action',\n    text: 'action'\n  }];\n  var data = [{\n    \"#order\": \"committee-c15dw\",\n    \"ordername\": \"editor-ktsjo\",\n    \"title\": 3,\n    \"status\": /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"badge badge-danger\",\n      children: \"cancelled\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 23\n    }, _this),\n    \"created\": '2021-07-7',\n    \"deadline\": '2021-07-7',\n    \"service\": \"paraprhrasing\",\n    \"page\": \"5\",\n    \"action\": /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-info\",\n      onClick: function onClick() {\n        return ViewItemDetails(5);\n      },\n      children: \"Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 23\n    }, _this)\n  }];\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [!isSingleTaskOpen && /*#__PURE__*/_jsxDEV(TablCard, {\n      title: \"COMPLETED ORDERS\",\n      columns: columns,\n      products: completed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 27\n    }, _this), isSingleTaskOpen && /*#__PURE__*/_jsxDEV(SingeleTask, {\n      isAccept: false,\n      closeTask: handleCloseTask,\n      id: singleTaskId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 26\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 12\n  }, _this);\n};\n\n_s(CompletedOrders, \"rPnjziApg5V7U64toQXKG1w9jZ4=\");\n\n_c = CompletedOrders;\nexport default CompletedOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompletedOrders\");","map":{"version":3,"sources":["/Users/tony/Documents/Projects/react/Writer/writer/src/views/base/Orders/completed/index.js"],"names":["React","useEffect","useState","SingeleTask","TablCard","ApiRequest","CompletedOrders","isSingleTaskOpen","setShowSingleTask","singleTaskId","setSingleTaskId","completed","setCompleted","getCompletedTask","result","organisedData","data","forEach","element","dat","task_id","task_name","task_title","task_status","task_created_date","task_deadline","task_service","pages","ViewItemDetails","push","handleShowSingleTask","id","handleCloseTask","columns","dataField","text"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport SingeleTask from \"../../NewTask/taskDetails/singleTaskDetails\";\n//import TableCard from \"../../Table/tableCard\";\nimport TablCard from '../../../table/TableCard';\nimport ApiRequest from \"src/Api/Requests/Apirequest\";\n\nconst CompletedOrders = ()=>{\n\n    const [isSingleTaskOpen,setShowSingleTask] = useState(false);\n    const [singleTaskId,setSingleTaskId] = useState();\n    const [completed,setCompleted] = useState([]);\n\n    const getCompletedTask =async ()=>{\n             const result = await ApiRequest.getCompletedTask();\n               var organisedData =[];\n            result.data.forEach(element => {\n                  var dat= {\n                  \"#order\": '#'+element.task_id,\n                  \"OrderName\": element.task_name,\n                  \"Title\": element.task_title,\n                  \"status\": <span className=\"badge badge-danger\">{element.task_status}</span>,\n                  \"Createdon\":element.task_created_date,\n                  \"Deadline\":element.task_deadline,\n                  \"Service\":element.task_service,\n                  \"Pages\":element.pages,\n                  \"Action\": <button className=\"btn btn-info\" onClick={()=>ViewItemDetails(element.task_id)}>Details</button>\n            }\n\n            organisedData.push(dat);\n            });\n\n            setCompleted(organisedData)\n    }\n  \n    const handleShowSingleTask=(id)=>{\n      \n          setSingleTaskId(id);\n          setShowSingleTask(true);\n    }\n    \n    useEffect(()=>{\n           getCompletedTask();\n    },[]);\n  \n    const handleCloseTask=()=>{\n       setSingleTaskId('');\n       setShowSingleTask(false);\n    }\n\n    const ViewItemDetails =(id)=>{\n       // alert(id);\n       handleShowSingleTask(id);\n    }\n\n    \n\n  \n     const columns= [\n                {\n                    dataField: '#order',\n                    text:'#order',\n                },\n                {\n                    dataField: 'OrderName',\n                    text:'ordername',\n                },\n                {\n                    dataField: 'Title',\n                    text:'title',\n                },\n                {\n                    dataField: 'status',\n                    text:'status',\n                },\n                {\n                    dataField: 'Createdon',\n                    text:'created',\n                },\n                {\n                    dataField: 'Deadline',\n                    text:'deadline',\n                },\n                {\n                    dataField: 'Service',\n                    text:'service',\n                },\n                {\n                    dataField: 'Pages',\n                    text:'page',\n                },\n                \n                {\n                    dataField: 'Action',\n                    text:'action',\n                },\n\n               \n             \n            ]\n       \n       \n   \n\n     const data=[\n         {\n            \"#order\": \"committee-c15dw\",\n            \"ordername\": \"editor-ktsjo\",\n            \"title\": 3,\n            \"status\": <span className=\"badge badge-danger\">cancelled</span>,\n            \"created\": '2021-07-7',\n            \"deadline\": '2021-07-7',\n            \"service\": \"paraprhrasing\",\n            \"page\": \"5\",\n            \"action\": <button className=\"btn btn-info\" onClick={()=>ViewItemDetails(5)}>Details</button>\n         }\n     ]\n    return <React.Fragment>\n\n    {!isSingleTaskOpen && <TablCard title={\"COMPLETED ORDERS\"} columns={columns} products={completed}/>}\n    {isSingleTaskOpen && <SingeleTask isAccept={false} closeTask={handleCloseTask} id={singleTaskId}/>}\n</React.Fragment> \n}\n\nexport default CompletedOrders;"]},"metadata":{},"sourceType":"module"}